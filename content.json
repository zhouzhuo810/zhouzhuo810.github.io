{"meta":{"title":"zhouzhuo810","subtitle":"活到老，学到老。","description":"周卓的github博客","author":"zhouzhuo810","url":"http://zhouzhuo810.github.io","root":"/"},"pages":[{"title":"关于我","date":"2017-06-01T08:19:18.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"about/index.html","permalink":"http://zhouzhuo810.github.io/about/index.html","excerpt":"","text":"Positiion : Android开发工程师 Email : &#50;&#x34;&#52;&#53;&#x37;&#x30;&#x36;&#55;&#x32;&#64;&#x71;&#x71;&#x2e;&#x63;&#111;&#x6d; QQ : 244570672 Github: https://github.com/zhouzhuo810 Gitee: https://gitee.com/zhouzhuo0810 简书: 去看看"},{"title":"常用网址","date":"2017-09-01T02:37:50.000Z","updated":"2024-06-13T11:58:36.813Z","comments":true,"path":"links/index.html","permalink":"http://zhouzhuo810.github.io/links/index.html","excerpt":"","text":"搜索引擎百度https://www.baidu.com JSON处理JSON格式化http://www.bejson.com/ JSON压缩转义http://www.bejson.com/zhuanyi/ 数据获取GUID获取https://www.guidgenerator.com/ 二维码生成https://cli.im/ 资源下载图标下载http://www.iconfont.cn/ UI设计图(动画等)http://www.ui.cn/ http://www.xueui.cn/ 在线生成Android-9图生成http://inloop.github.io/shadow4android/ 三方平台腾讯buglyhttps://bugly.qq.com/v2 高德地图http://lbs.amap.com/ 支付宝开放平台https://open.alipay.com 微信开放平台https://open.weixin.qq.com/ 微信公众平台https://mp.weixin.qq.com 域名相关域名购买-godaddyhttps://sso.godaddy.com 域名解析-dnspodhttps://www.dnspod.cn Android主流市场百度http://app.baidu.com 小米http://dev.xiaomi.com/console/ vivohttp://dev.vivo.com.cn 360http://dev.360.cn/ 应用宝http://open.qq.com 华为http://developer.huawei.com/ 荣耀https://developer.honor.com/cn/ oppohttp://open.oppomobile.com/newuser/login 魅族http://open.flyme.cn/?t=1489458048989 pp助手、豌豆荚http://open.uc.cn/ 联想乐商店http://open.lenovo.com/developer/ 乐视商店http://open.le.com/dev-web/ 搜狗开发者http://zhushou.sogou.com/open/ 应用汇http://dev.appchina.com/dev/index 网页前端BootCDNhttp://www.bootcdn.cn/ Bootstraphttp://www.bootcss.com/"},{"title":"工具下载","date":"2017-06-08T02:37:50.000Z","updated":"2024-06-13T11:58:36.813Z","comments":true,"path":"tools/index.html","permalink":"http://zhouzhuo810.github.io/tools/index.html","excerpt":"","text":"文本编辑工具Sublime Text 2百度云下载地址 1密码：bfrv Android开发工具Android Studio 2.2.3官方下载地址 JDK 8 和 环境配置百度云下载地址 1密码：y4km Andriod Studio 插件-ApiCreator(接口文档转API和实体类)Github下载地址 Andriod Studio 插件-StringKiller(layout字符串提取)Github下载地址 Andriod Studio 插件-Translator(实时翻译)百度云下载地址 1密码：kedn Andriod Studio 插件-AndroidLocalizationer(国际化)百度云下载地址 1密码：52dn SQLite浏览工具百度云下载地址 1密码：6dgi TV远程安装APK-ApkInstaller百度云下载地址 1密码：uf0q 美工PhotoShop CC 14.0百度云下载地址 1密码：iahr Animate CC 2017百度云下载地址 1密码：13f4 JavaEE开发工具MySQL百度云下载地址 1密码：5xby Tomcat百度云下载地址 1密码：fupw MyEclipse百度云下载地址 1密码：cka7 InteliJ IDEA 串口调试工具百度云下载地址 1密码：3nwt 破解工具InteliJ IDEA 破解服务器百度云下载地址 1密码：c8mq 网络调试工具百度云下载地址 1密码：bhq8 服务器远程登录工具putty百度云下载地址 1密码：7agk 快速下载PanDownload-百度云不限速下载百度云下载地址 1密码：0orb 办公软件Mac Office套装Mac Office套装"}],"posts":[{"title":"InteliJ IDEA 破解版安装教程","slug":"InteliJ-IDEA-破解版安装教程","date":"2024-06-13T12:10:00.000Z","updated":"2024-06-13T12:45:14.212Z","comments":true,"path":"2024/06/13/InteliJ-IDEA-破解版安装教程/","permalink":"http://zhouzhuo810.github.io/2024/06/13/InteliJ-IDEA-%E7%A0%B4%E8%A7%A3%E7%89%88%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/","excerpt":"一、准备工作 打开网址 https://3.jetbra.in/或https://jetbra.in/5d84466e31722979266057664941a71893322460 随意点击一个绿色的Hostname，打不开或打开报错就换一个。 下载jetbra.zip 在打开的网站里，下载jetbra.zip文件。 同时，找到IntelliJ IDEA的激活码上方的版本号，比如：“2023.2.x” 激活码先别关闭，等下要用。","text":"一、准备工作 打开网址 https://3.jetbra.in/或https://jetbra.in/5d84466e31722979266057664941a71893322460 随意点击一个绿色的Hostname，打不开或打开报错就换一个。 下载jetbra.zip 在打开的网站里，下载jetbra.zip文件。 同时，找到IntelliJ IDEA的激活码上方的版本号，比如：“2023.2.x” 激活码先别关闭，等下要用。 下载Intelij IDEA安装包 去官网下载上述版本号对应的安装包。 https://www.jetbrains.com.cn/idea/download/other.html 下载 上述版本号对对应的 IntelliJ IDEA Ultimate 版本安装包，如 2023.2.7 - Windows x64 (exe)。 二、安装和破解 安装ideaIU-2023.2.x.exe 解压jetbra.zip 将jebra文件夹拷贝到&#123;path\\to&#125;\\Intejil IDEA 2023.2\\bin目录 在idea64.exe.vmoptions文件末尾追加 1234-javaagent:H:\\Intejil IDEA 2023.2\\bin\\jetbra\\ja-netfilter.jar=jetbrains--add-opens=java.base/jdk.internal.org.objectweb.asm=ALL-UNNAMED--add-opens=java.base/jdk.internal.org.objectweb.asm.tree=ALL-UNNAMED 其中路径H:\\Intejil IDEA 2023.2改成自己的安装路径。 打开idea，复制激活码，激活。 使用上面那个激活的激活码即可。","categories":[{"name":"InteliJ IDEA","slug":"InteliJ-IDEA","permalink":"http://zhouzhuo810.github.io/categories/InteliJ-IDEA/"}],"tags":[{"name":"InteliJ IDEA","slug":"InteliJ-IDEA","permalink":"http://zhouzhuo810.github.io/tags/InteliJ-IDEA/"}]},{"title":"MySQL-druid连接报错问题","slug":"MySQL-druid连接报错问题","date":"2024-06-12T00:38:21.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"2024/06/12/MySQL-druid连接报错问题/","permalink":"http://zhouzhuo810.github.io/2024/06/12/MySQL-druid%E8%BF%9E%E6%8E%A5%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98/","excerpt":"报错问题1com.alibaba.druid.pool.DruidDataSource : create connection SQLException, url: jdbc:mysql://xxx.xxx.xxx.xxx:3306/xxx?useUnicode=true&amp;characterEncoding=UTF-8, errorCode 0, state 08S01 SpringBoot配置 application.properties 1234567spring.application.name=xxxserver.port=8080spring.datasource.url=jdbc:mysql://xxx.xxx.xxx.xxx:3306/xxx?useUnicode=true&amp;characterEncoding=UTF-8spring.datasource.username=xxxspring.datasource.password=xxxspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driverspring.datasource.type=com.alibaba.druid.pool.DruidDataSource","text":"报错问题1com.alibaba.druid.pool.DruidDataSource : create connection SQLException, url: jdbc:mysql://xxx.xxx.xxx.xxx:3306/xxx?useUnicode=true&amp;characterEncoding=UTF-8, errorCode 0, state 08S01 SpringBoot配置 application.properties 1234567spring.application.name=xxxserver.port=8080spring.datasource.url=jdbc:mysql://xxx.xxx.xxx.xxx:3306/xxx?useUnicode=true&amp;characterEncoding=UTF-8spring.datasource.username=xxxspring.datasource.password=xxxspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driverspring.datasource.type=com.alibaba.druid.pool.DruidDataSource 原因1服务端MySQL未启用SSL。 解决方案在url末尾追加useSSL=false即可。 1spring.datasource.url=jdbc:mysql://xxx.xxx.xxx.xxx:3306/xxx?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false","categories":[{"name":"JavaEE","slug":"JavaEE","permalink":"http://zhouzhuo810.github.io/categories/JavaEE/"},{"name":"MySQL","slug":"MySQL","permalink":"http://zhouzhuo810.github.io/categories/MySQL/"}],"tags":[{"name":"MySQL - JavaEE","slug":"MySQL-JavaEE","permalink":"http://zhouzhuo810.github.io/tags/MySQL-JavaEE/"}]},{"title":"Git常见问题-子目录是submodule无法add问题","slug":"Git常见问题-子目录是submodule无法add问题","date":"2024-05-31T07:52:44.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"2024/05/31/Git常见问题-子目录是submodule无法add问题/","permalink":"http://zhouzhuo810.github.io/2024/05/31/Git%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98-%E5%AD%90%E7%9B%AE%E5%BD%95%E6%98%AFsubmodule%E6%97%A0%E6%B3%95add%E9%97%AE%E9%A2%98/","excerpt":"","text":"问题目录A里面有个目录B，目录B也是一个仓库。 现在目录A也有一个仓库，想将目录B的仓库取消，直接加入到目录A的仓库里。 直接git add 目录B，是没有任何反应的。 解决方案123456cd 目录Brm -rf .gitcd 目录Agit rm --cached 目录Bgit add 目录B 知识扩展Git查看已被排除的文件及目录1git status --ignored","categories":[{"name":"Git常见问题","slug":"Git常见问题","permalink":"http://zhouzhuo810.github.io/categories/Git%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://zhouzhuo810.github.io/tags/Git/"}]},{"title":"Android疑难杂症-X5内核播放视频全屏问题","slug":"Android疑难杂症-X5内核播放视频全屏问题","date":"2018-12-24T05:03:00.000Z","updated":"2024-06-13T11:58:36.766Z","comments":true,"path":"2018/12/24/Android疑难杂症-X5内核播放视频全屏问题/","permalink":"http://zhouzhuo810.github.io/2018/12/24/Android%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87-X5%E5%86%85%E6%A0%B8%E6%92%AD%E6%94%BE%E8%A7%86%E9%A2%91%E5%85%A8%E5%B1%8F%E9%97%AE%E9%A2%98/","excerpt":"直接上代码123456&lt;activity android:name=&quot;.ui.act.community.WebActivity&quot; android:configChanges=&quot;keyboardHidden|keyboard|layoutDirection|screenLayout|screenSize|touchscreen|orientation&quot; android:launchMode=&quot;singleTop&quot; android:windowSoftInputMode=&quot;adjustNothing|stateAlwaysHidden&quot; android:screenOrientation=&quot;sensor&quot;/&gt;","text":"直接上代码123456&lt;activity android:name=&quot;.ui.act.community.WebActivity&quot; android:configChanges=&quot;keyboardHidden|keyboard|layoutDirection|screenLayout|screenSize|touchscreen|orientation&quot; android:launchMode=&quot;singleTop&quot; android:windowSoftInputMode=&quot;adjustNothing|stateAlwaysHidden&quot; android:screenOrientation=&quot;sensor&quot;/&gt; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354private View myVideoView;private WebChromeClient mWebChromeClient = new WebChromeClient() &#123; @Override public void onProgressChanged(WebView view, int i) &#123; mProgressBar.setProgress(i); if (i == 100) &#123; mProgressBar.setVisibility(View.GONE); &#125; else if (mProgressBar.getVisibility() != View.VISIBLE) &#123; mProgressBar.setVisibility(View.VISIBLE); &#125; &#125; @Override public void onShowCustomView(View view, IX5WebChromeClient.CustomViewCallback customViewCallback) &#123; super.onShowCustomView(view, customViewCallback); ViewGroup viewGroup = (ViewGroup) mWebView.getParent(); viewGroup.removeView(mWebView); viewGroup.setBackgroundColor(SimpleUtil.getColor(R.color.colorBlack)); viewGroup.addView(view); myVideoView = view; &#125; @Override public void onHideCustomView() &#123; super.onHideCustomView(); if (myVideoView == null) &#123; return; &#125; ViewGroup viewGroup = (ViewGroup) myVideoView.getParent(); viewGroup.removeView(myVideoView); viewGroup.addView(mWebView); &#125; &#125;; @Overridepublic void onConfigurationChanged(Configuration newConfig) &#123; // TODO Auto-generated method stub try &#123; super.onConfigurationChanged(newConfig); if (this.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) &#123; getWindow().addFlags( WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS); mTitleBar.setVisibility(View.GONE); &#125; else if (this.getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) &#123; getWindow().clearFlags( WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS); mTitleBar.setVisibility(View.VISIBLE); &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125;&#125;","categories":[{"name":"Android疑难杂症","slug":"Android疑难杂症","permalink":"http://zhouzhuo810.github.io/categories/Android%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"AndroidException-常见Exception汇总","slug":"AndroidException-常见Exception汇总","date":"2018-11-16T14:22:22.000Z","updated":"2024-06-13T11:58:36.750Z","comments":true,"path":"2018/11/16/AndroidException-常见Exception汇总/","permalink":"http://zhouzhuo810.github.io/2018/11/16/AndroidException-%E5%B8%B8%E8%A7%81Exception%E6%B1%87%E6%80%BB/","excerpt":"Invoke-customs are only supported starting with android 0 –min-api 2612345678910//build.gradleandroid &#123; //... ... android &#123; compileOptions &#123; sourceCompatibility JavaVersion.VERSION_1_8 targetCompatibility JavaVersion.VERSION_1_8 &#125; &#125;&#125;","text":"Invoke-customs are only supported starting with android 0 –min-api 2612345678910//build.gradleandroid &#123; //... ... android &#123; compileOptions &#123; sourceCompatibility JavaVersion.VERSION_1_8 targetCompatibility JavaVersion.VERSION_1_8 &#125; &#125;&#125; 64位CPU的手机无法加载腾讯X5内核1234567891011//build.gradleandroid &#123; defaultConfig &#123; // 指定支持的so架构 ndk &#123; //根据需要 自行选择添加的对应cpu类型的.so库。 abiFilters &#x27;armeabi&#x27;, &#x27;armeabi-v7a&#x27;, &#x27;arm64-v8a&#x27;, &quot;x86&quot; &#125; &#125;&#125;//复制armeabi中的.so文件到armeabi-v7a、arm64-v8a、x86对应的文件夹","categories":[{"name":"Android常见Exception","slug":"Android常见Exception","permalink":"http://zhouzhuo810.github.io/categories/Android%E5%B8%B8%E8%A7%81Exception/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"RxJava2-监听EditText变化并查询数据库并更新UI","slug":"RxJava2-监听EditText变化并查询数据库并更新UI","date":"2018-11-16T02:57:15.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"2018/11/16/RxJava2-监听EditText变化并查询数据库并更新UI/","permalink":"http://zhouzhuo810.github.io/2018/11/16/RxJava2-%E7%9B%91%E5%90%ACEditText%E5%8F%98%E5%8C%96%E5%B9%B6%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B6%E6%9B%B4%E6%96%B0UI/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354Disposable subscription = RxTextView.textChangeEvents(etSearch) .debounce(200, TimeUnit.MILLISECONDS) .observeOn(AndroidSchedulers.mainThread()) .toFlowable(BackpressureStrategy.BUFFER) .switchMap(new Function&lt;TextViewTextChangeEvent, Publisher&lt;RealmResults&lt;Note&gt;&gt;&gt;() &#123; @Override public Publisher&lt;RealmResults&lt;Note&gt;&gt; apply(TextViewTextChangeEvent event) throws Exception &#123; String etContent = event.getText().toString(); if (etContent.length() &gt; 0) &#123; mLv.setVisibility(View.VISIBLE); &#125; else &#123; mLv.setVisibility(View.GONE); &#125; if (etContent.length() &gt; 0) &#123; mLv.setVisibility(View.VISIBLE); &#125; else &#123; mLv.setVisibility(View.GONE); &#125; finalMAdapter.setSearchStr(etContent); if (dirId == MyApplication.DEFAULT_DIR_ID) &#123; return Realm.getDefaultInstance().where(Note.class) .contains(&quot;title&quot;, etContent) .sort(&quot;timeMills&quot;, Sort.DESCENDING).findAllAsync().asFlowable(); &#125; else &#123; return Realm.getDefaultInstance().where(Note.class) .equalTo(&quot;dirId&quot;, dirId) .contains(&quot;title&quot;, etContent) .sort(&quot;timeMills&quot;, Sort.DESCENDING).findAllAsync().asFlowable(); &#125; &#125; &#125;) .filter(new Predicate&lt;RealmResults&lt;Note&gt;&gt;() &#123; @Override public boolean test(RealmResults&lt;Note&gt; notes) throws Exception &#123; return notes.isLoaded(); &#125; &#125;) .subscribe(new Consumer&lt;RealmResults&lt;Note&gt;&gt;() &#123; @Override public void accept(RealmResults&lt;Note&gt; notes) throws Exception &#123; mNotes = notes; if (notes != null &amp;&amp; notes.size() &gt; 0) &#123; llNoResult.setVisibility(View.GONE); &#125; else &#123; llNoResult.setVisibility(View.VISIBLE); &#125; finalMAdapter.updateAll(mNotes); &#125; &#125;, new Consumer&lt;Throwable&gt;() &#123; @Override public void accept(Throwable throwable) throws Exception &#123; throwable.printStackTrace(); &#125; &#125;);","categories":[{"name":"RxJava","slug":"RxJava","permalink":"http://zhouzhuo810.github.io/categories/RxJava/"}],"tags":[{"name":"RxJava","slug":"RxJava","permalink":"http://zhouzhuo810.github.io/tags/RxJava/"}]},{"title":"AndroidStudio技巧-关闭全局代理","slug":"AndroidStudio技巧-关闭全局代理","date":"2018-11-08T01:30:14.000Z","updated":"2024-06-13T11:58:36.750Z","comments":true,"path":"2018/11/08/AndroidStudio技巧-关闭全局代理/","permalink":"http://zhouzhuo810.github.io/2018/11/08/AndroidStudio%E6%8A%80%E5%B7%A7-%E5%85%B3%E9%97%AD%E5%85%A8%E5%B1%80%E4%BB%A3%E7%90%86/","excerpt":"问题","text":"问题 根源1~/.gradle/gradle.properties中配置了代理。 Mac打开Teminal 12345678cd ~cd .gradlelsvi gradle.propertiesi//移动光标删除对应代理配置按ESC:wq 全局代理就关闭了。","categories":[{"name":"Android开发工具","slug":"Android开发工具","permalink":"http://zhouzhuo810.github.io/categories/Android%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"Linux-编辑器vi的使用","slug":"Linux-编辑器vi的使用","date":"2018-11-07T22:40:07.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"2018/11/08/Linux-编辑器vi的使用/","permalink":"http://zhouzhuo810.github.io/2018/11/08/Linux-%E7%BC%96%E8%BE%91%E5%99%A8vi%E7%9A%84%E4%BD%BF%E7%94%A8/","excerpt":"","text":"进入vi编辑器1vi filename 插入按 i 保存按ESC键 跳到命令模式，然后：:w 保存文件但不退出vi:w file 将修改另外保存到file中，不退出vi:w! 强制保存，不推出vi:wq 保存文件并退出vi:wq! 强制保存文件，并退出viq: 不保存文件，退出vi:q! 不保存文件，强制退出vi:e! 放弃所有修改，从上次保存文件开始再编辑","categories":[{"name":"Linux","slug":"Linux","permalink":"http://zhouzhuo810.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://zhouzhuo810.github.io/tags/Linux/"}]},{"title":"小常识-移动硬盘文件或目录损坏且无法读取","slug":"小常识-移动硬盘文件或目录损坏且无法读取","date":"2018-11-04T09:24:45.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"2018/11/04/小常识-移动硬盘文件或目录损坏且无法读取/","permalink":"http://zhouzhuo810.github.io/2018/11/04/%E5%B0%8F%E5%B8%B8%E8%AF%86-%E7%A7%BB%E5%8A%A8%E7%A1%AC%E7%9B%98%E6%96%87%E4%BB%B6%E6%88%96%E7%9B%AE%E5%BD%95%E6%8D%9F%E5%9D%8F%E4%B8%94%E6%97%A0%E6%B3%95%E8%AF%BB%E5%8F%96/","excerpt":"","text":"问题描述移动硬盘打不开，提示文件或目录损坏且无法读取 解决方案在运行中输入cmd，打开命令提示符窗口然后输入 1chkdsk I: /f (I是我在用的移动硬盘的盘符) 等待修复结束即可。","categories":[{"name":"常识","slug":"常识","permalink":"http://zhouzhuo810.github.io/categories/%E5%B8%B8%E8%AF%86/"}],"tags":[{"name":"常识","slug":"常识","permalink":"http://zhouzhuo810.github.io/tags/%E5%B8%B8%E8%AF%86/"}]},{"title":"Android常用代码-颜色透明度百分比和十六进制对照表","slug":"Android常用代码-颜色透明度百分比和十六进制对照表","date":"2018-10-31T07:15:30.000Z","updated":"2024-06-13T11:58:36.766Z","comments":true,"path":"2018/10/31/Android常用代码-颜色透明度百分比和十六进制对照表/","permalink":"http://zhouzhuo810.github.io/2018/10/31/Android%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81-%E9%A2%9C%E8%89%B2%E9%80%8F%E6%98%8E%E5%BA%A6%E7%99%BE%E5%88%86%E6%AF%94%E5%92%8C%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E5%AF%B9%E7%85%A7%E8%A1%A8/","excerpt":"","text":"对照表","categories":[{"name":"Android常用代码","slug":"Android常用代码","permalink":"http://zhouzhuo810.github.io/categories/Android%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"Android常用代码-读取联系人","slug":"Android常用代码-读取联系人","date":"2018-10-31T06:35:15.000Z","updated":"2024-06-13T11:58:36.766Z","comments":true,"path":"2018/10/31/Android常用代码-读取联系人/","permalink":"http://zhouzhuo810.github.io/2018/10/31/Android%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81-%E8%AF%BB%E5%8F%96%E8%81%94%E7%B3%BB%E4%BA%BA/","excerpt":"AndroidManifest.xml添加权限1&lt;uses-permission android:name=&quot;android.permission.READ_CONTACTS&quot;/&gt;","text":"AndroidManifest.xml添加权限1&lt;uses-permission android:name=&quot;android.permission.READ_CONTACTS&quot;/&gt; 申请动态权限，并读取数据12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576private void loadAddressBook() &#123; AndPermission.with(this) .runtime() .permission(Permission.READ_CONTACTS) .rationale((context, data, executor) -&gt; showConfirmDialog(getString(R.string.get_contacts), getString(R.string.contact_rationale), null, null, false, new TwoBtnTextDialog.OnTwoBtnTextClick() &#123; @Override public void onLeftClick(TextView v) &#123; executor.cancel(); &#125; @Override public void onRightClick(TextView v) &#123; executor.execute(); &#125; &#125;)) .onDenied(data -&gt; &#123; if (AndPermission.hasAlwaysDeniedPermission(AddressBookActivity.this, data)) &#123; // 这里使用一个Dialog展示没有这些权限应用程序无法继续运行，询问用户是否去设置中授权。 final Setting setting = AndPermission.with(AddressBookActivity.this).runtime().setting(); setting.onComeback(() -&gt; &#123; if (AndPermission.hasPermissions(AddressBookActivity.this, Permission.READ_CONTACTS)) &#123; readContacts(); &#125; &#125;); showConfirmDialog(getString(R.string.permission_set), getString(R.string.set_read_phone_permission), null, null, false, new TwoBtnTextDialog.OnTwoBtnTextClick() &#123; @Override public void onLeftClick(TextView v) &#123; &#125; @Override public void onRightClick(TextView v) &#123; setting.start(); &#125; &#125;); &#125; &#125;) .onGranted(data -&gt; readContacts()) .start();&#125;/** * 读取联系人 */private void readContacts() &#123; mBooks = new ArrayList&lt;&gt;(); Cursor cursor = null; try &#123; //cursor指针 query询问 contract协议 kinds种类 cursor = getContentResolver().query(ContactsContract.CommonDataKinds.Phone.CONTENT_URI, null, null, null, null); if (cursor != null) &#123; while (cursor.moveToNext()) &#123; String displayName = cursor.getString(cursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME)); String number = cursor.getString(cursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER)); if (number != null) &#123; number = number.replace(&quot; &quot;, &quot;&quot;); &#125; mBooks.add(new AddressBookEntity(displayName, number)); &#125; Log.e(&quot;TTT&quot;, &quot;books=&quot;+ mBooks.toString()); //notify公布 mAdapter.setData(mBooks); mSidebar.setShowString(CollectionUtil.listToString(mAdapter.getLetters())); mSidebar.setTextSize(ScreenAdapterUtil.getInstance().getScaledValue(36)); mLlNoData.setVisibility(CollectionUtil.isEmpty(mBooks) ? View.VISIBLE : View.GONE); &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; finally &#123; if (cursor != null) &#123; cursor.close(); &#125; &#125;&#125;","categories":[{"name":"Android常用代码","slug":"Android常用代码","permalink":"http://zhouzhuo810.github.io/categories/Android%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"AndroidStudio技巧-部分库报错红色却能编译通过解决方案","slug":"AndroidStudio技巧-部分库报错红色却能编译通过解决方案","date":"2018-10-29T01:30:14.000Z","updated":"2024-06-13T11:58:36.766Z","comments":true,"path":"2018/10/29/AndroidStudio技巧-部分库报错红色却能编译通过解决方案/","permalink":"http://zhouzhuo810.github.io/2018/10/29/AndroidStudio%E6%8A%80%E5%B7%A7-%E9%83%A8%E5%88%86%E5%BA%93%E6%8A%A5%E9%94%99%E7%BA%A2%E8%89%B2%E5%8D%B4%E8%83%BD%E7%BC%96%E8%AF%91%E9%80%9A%E8%BF%87%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/","excerpt":"","text":"方案1（推荐） 1.删除.gradle和.idea文件夹； 2.重启项目； 方案2 File-&gt;Invalidate Caches&#x2F;Restart","categories":[{"name":"Android开发工具","slug":"Android开发工具","permalink":"http://zhouzhuo810.github.io/categories/Android%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"Android-8.0新特性-通知通道配置","slug":"Android-8.0新特性-通知通道配置","date":"2018-10-26T05:30:53.000Z","updated":"2024-06-13T11:58:36.750Z","comments":true,"path":"2018/10/26/Android-8.0新特性-通知通道配置/","permalink":"http://zhouzhuo810.github.io/2018/10/26/Android-8.0%E6%96%B0%E7%89%B9%E6%80%A7-%E9%80%9A%E7%9F%A5%E9%80%9A%E9%81%93%E9%85%8D%E7%BD%AE/","excerpt":"Android 8.0开始发送通知需要配置渠道id； Application#onCreate()中配置1234567891011121314151617181920212223242526//8.0if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) &#123; NotificationManager mNotificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE); // 通知渠道的id String id = &quot;你的渠道id&quot;; // 用户可以看到的通知渠道的名字. CharSequence name = getString(R.string.app_name); // 用户可以看到的通知渠道的描述 String description = getString(R.string.app_push_message_hint); int importance = NotificationManager.IMPORTANCE_HIGH; NotificationChannel mChannel = new NotificationChannel(id, name, importance); mChannel.setLockscreenVisibility(Notification.VISIBILITY_PUBLIC); // 配置通知渠道的属性 mChannel.setDescription(description); // 设置通知出现时的闪灯（如果 android 设备支持的话） mChannel.enableLights(true); mChannel.setLightColor(Color.RED); mChannel.setSound(Uri.parse(&quot;android.resource://&quot; + BaseUtil.getPackageInfo(BaseUtil.getApp()).packageName + &quot;/&quot; + R.raw.hint_zz_four), null); // 设置通知出现时的震动（如果 android 设备支持的话） mChannel.enableVibration(true); mChannel.setVibrationPattern(new long[]&#123;100, 200, 300, 400, 500, 400, 300, 200, 400&#125;); //最后在notificationmanager中创建该通知渠道 if (mNotificationManager != null) &#123; mNotificationManager.createNotificationChannel(mChannel); &#125;&#125;","text":"Android 8.0开始发送通知需要配置渠道id； Application#onCreate()中配置1234567891011121314151617181920212223242526//8.0if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) &#123; NotificationManager mNotificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE); // 通知渠道的id String id = &quot;你的渠道id&quot;; // 用户可以看到的通知渠道的名字. CharSequence name = getString(R.string.app_name); // 用户可以看到的通知渠道的描述 String description = getString(R.string.app_push_message_hint); int importance = NotificationManager.IMPORTANCE_HIGH; NotificationChannel mChannel = new NotificationChannel(id, name, importance); mChannel.setLockscreenVisibility(Notification.VISIBILITY_PUBLIC); // 配置通知渠道的属性 mChannel.setDescription(description); // 设置通知出现时的闪灯（如果 android 设备支持的话） mChannel.enableLights(true); mChannel.setLightColor(Color.RED); mChannel.setSound(Uri.parse(&quot;android.resource://&quot; + BaseUtil.getPackageInfo(BaseUtil.getApp()).packageName + &quot;/&quot; + R.raw.hint_zz_four), null); // 设置通知出现时的震动（如果 android 设备支持的话） mChannel.enableVibration(true); mChannel.setVibrationPattern(new long[]&#123;100, 200, 300, 400, 500, 400, 300, 200, 400&#125;); //最后在notificationmanager中创建该通知渠道 if (mNotificationManager != null) &#123; mNotificationManager.createNotificationChannel(mChannel); &#125;&#125; 发送通知12345678910111213141516171819202122//发送通知则需要使用渠道idIntent it = new Intent(context, MemoListActivity.class);PendingIntent pi = PendingIntent.getActivity(context, 0, it, PendingIntent.FLAG_CANCEL_CURRENT);Resources res = context.getResources();Bitmap bmp = BitmapFactory.decodeResource(res, R.mipmap.ic_launcher);NotificationManager notificationManager = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);//定义notificationNotificationCompat.Builder builder = new NotificationCompat.Builder(context, &quot;你的渠道id&quot;);builder.setContentTitle(&quot;备忘录通知&quot;) .setSmallIcon(R.mipmap.ic_launcher) .setLargeIcon(bmp) .setContentText(content + &quot;&quot;) .setTicker(&quot;备忘录通知&quot;) .setSound(Uri.parse(&quot;android.resource://您的包名/&quot; + R.raw.hint)) .setVibrate(new long[]&#123;100, 200, 300, 400, 500, 400, 300, 200, 400&#125;) // 单机 面板自动取消通知 .setAutoCancel(true) .setContentIntent(pi);if (notificationManager != null) &#123; notificationManager.notify(1, builder.build());// 通过管理器发送通知（通知的id，Notification对象）&#125;","categories":[{"name":"Android版本特性","slug":"Android版本特性","permalink":"http://zhouzhuo810.github.io/categories/Android%E7%89%88%E6%9C%AC%E7%89%B9%E6%80%A7/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"Android常用代码-阿里云推送","slug":"Android常用代码-阿里云推送","date":"2018-10-18T06:35:15.000Z","updated":"2024-06-13T11:58:36.766Z","comments":true,"path":"2018/10/18/Android常用代码-阿里云推送/","permalink":"http://zhouzhuo810.github.io/2018/10/18/Android%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81-%E9%98%BF%E9%87%8C%E4%BA%91%E6%8E%A8%E9%80%81/","excerpt":"集成依赖1implementation &#x27;com.aliyun.ams:alicloud-android-push:3.1.2&#x27; 核心代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051/** * 初始化云推送通道 */private void initCloudChannel(Context applicationContext) &#123; //8.0 if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) &#123; NotificationManager mNotificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE); // 通知渠道的id String id = &quot;1&quot;; // 用户可以看到的通知渠道的名字. CharSequence name = &quot;测试渠道名&quot;; // 用户可以看到的通知渠道的描述 String description = &quot;测试渠道描述&quot;; int importance = NotificationManager.IMPORTANCE_HIGH; NotificationChannel mChannel = new NotificationChannel(id, name, importance); mChannel.setLockscreenVisibility(Notification.VISIBILITY_PUBLIC); // 配置通知渠道的属性 mChannel.setDescription(description); // 设置通知出现时的闪灯（如果 android 设备支持的话） mChannel.enableLights(true); mChannel.setLightColor(Color.RED); mChannel.setSound(Uri.parse(&quot;android.resource://&quot; + BaseUtil.getPackageInfo(BaseUtil.getApp()).packageName + &quot;/&quot; + R.raw.hint_four), null); // 设置通知出现时的震动（如果 android 设备支持的话） mChannel.enableVibration(true); mChannel.setVibrationPattern(new long[]&#123;100, 200 , 300, 400, 500, 400, 300, 200, 400&#125;); //最后在notificationmanager中创建该通知渠道 if (mNotificationManager != null) &#123; mNotificationManager.createNotificationChannel(mChannel); &#125; &#125; PushServiceFactory.init(applicationContext); CloudPushService pushService = PushServiceFactory.getCloudPushService(); if (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.O) &#123; pushService.setNotificationSoundFilePath(Uri.parse(&quot;android.resource://&quot; + BaseUtil.getPackageInfo(BaseUtil.getApp()).packageName + &quot;/&quot; + R.raw.hint_four).toString()); &#125; pushService.register(applicationContext, new CommonCallback() &#123; @Override public void onSuccess(String response) &#123; Log.d(TAG, &quot;init cloudchannel success&quot;); pushService.turnOnPushChannel(null); &#125; @Override public void onFailed(String errorCode, String errorMessage) &#123; Log.d(TAG, &quot;init cloudchannel failed -- errorcode:&quot; + errorCode + &quot; -- errorMessage:&quot; + errorMessage); &#125; &#125;); &#125;","text":"集成依赖1implementation &#x27;com.aliyun.ams:alicloud-android-push:3.1.2&#x27; 核心代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051/** * 初始化云推送通道 */private void initCloudChannel(Context applicationContext) &#123; //8.0 if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) &#123; NotificationManager mNotificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE); // 通知渠道的id String id = &quot;1&quot;; // 用户可以看到的通知渠道的名字. CharSequence name = &quot;测试渠道名&quot;; // 用户可以看到的通知渠道的描述 String description = &quot;测试渠道描述&quot;; int importance = NotificationManager.IMPORTANCE_HIGH; NotificationChannel mChannel = new NotificationChannel(id, name, importance); mChannel.setLockscreenVisibility(Notification.VISIBILITY_PUBLIC); // 配置通知渠道的属性 mChannel.setDescription(description); // 设置通知出现时的闪灯（如果 android 设备支持的话） mChannel.enableLights(true); mChannel.setLightColor(Color.RED); mChannel.setSound(Uri.parse(&quot;android.resource://&quot; + BaseUtil.getPackageInfo(BaseUtil.getApp()).packageName + &quot;/&quot; + R.raw.hint_four), null); // 设置通知出现时的震动（如果 android 设备支持的话） mChannel.enableVibration(true); mChannel.setVibrationPattern(new long[]&#123;100, 200 , 300, 400, 500, 400, 300, 200, 400&#125;); //最后在notificationmanager中创建该通知渠道 if (mNotificationManager != null) &#123; mNotificationManager.createNotificationChannel(mChannel); &#125; &#125; PushServiceFactory.init(applicationContext); CloudPushService pushService = PushServiceFactory.getCloudPushService(); if (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.O) &#123; pushService.setNotificationSoundFilePath(Uri.parse(&quot;android.resource://&quot; + BaseUtil.getPackageInfo(BaseUtil.getApp()).packageName + &quot;/&quot; + R.raw.hint_four).toString()); &#125; pushService.register(applicationContext, new CommonCallback() &#123; @Override public void onSuccess(String response) &#123; Log.d(TAG, &quot;init cloudchannel success&quot;); pushService.turnOnPushChannel(null); &#125; @Override public void onFailed(String errorCode, String errorMessage) &#123; Log.d(TAG, &quot;init cloudchannel failed -- errorcode:&quot; + errorCode + &quot; -- errorMessage:&quot; + errorMessage); &#125; &#125;); &#125; 其他配置1234567891011121314151617181920&lt;meta-data android:name=&quot;com.alibaba.app.appkey&quot; android:value=&quot;你的appKey&quot;/&gt; &lt;!-- 请填写你自己的- appKey --&gt;&lt;meta-data android:name=&quot;com.alibaba.app.appsecret&quot; android:value=&quot;你的appSecret&quot;/&gt; &lt;!-- 请填写你自己的appSecret --&gt;&lt;!-- 消息接收监听器 （用户可自主扩展） --&gt;&lt;receiver android:name=&quot;.common.receiver.MyMessageReceiver&quot; android:exported=&quot;false&quot;&gt; &lt;!-- 为保证receiver安全，建议设置不可导出，如需对其他应用开放可通过android：permission进行限制 --&gt; &lt;intent-filter&gt; &lt;action android:name=&quot;com.alibaba.push2.action.NOTIFICATION_OPENED&quot;/&gt; &lt;/intent-filter&gt; &lt;intent-filter&gt; &lt;action android:name=&quot;com.alibaba.push2.action.NOTIFICATION_REMOVED&quot;/&gt; &lt;/intent-filter&gt; &lt;intent-filter&gt; &lt;action android:name=&quot;com.alibaba.sdk.android.push.RECEIVE&quot;/&gt; &lt;/intent-filter&gt;&lt;/receiver&gt; 1234567891011121314151617181920212223242526272829303132333435public class MyMessageReceiver extends MessageReceiver &#123; // 消息接收部分的LOG_TAG public static final String REC_TAG = &quot;receiver&quot;; @Override public void onNotification(Context context, String title, String summary, Map&lt;String, String&gt; extraMap) &#123; // TODO 处理推送通知 Log.e(&quot;MyMessageReceiver&quot;, &quot;Receive notification, title: &quot; + title + &quot;, summary: &quot; + summary + &quot;, extraMap: &quot; + extraMap); &#125; @Override public void onMessage(Context context, CPushMessage cPushMessage) &#123; Log.e(&quot;MyMessageReceiver&quot;, &quot;onMessage, messageId: &quot; + cPushMessage.getMessageId() + &quot;, title: &quot; + cPushMessage.getTitle() + &quot;, content:&quot; + cPushMessage.getContent()); &#125; @Override public void onNotificationOpened(Context context, String title, String summary, String extraMap) &#123; Log.e(&quot;MyMessageReceiver&quot;, &quot;onNotificationOpened, title: &quot; + title + &quot;, summary: &quot; + summary + &quot;, extraMap:&quot; + extraMap); &#125; @Override protected void onNotificationClickedWithNoAction(Context context, String title, String summary, String extraMap) &#123; Log.e(&quot;MyMessageReceiver&quot;, &quot;onNotificationClickedWithNoAction, title: &quot; + title + &quot;, summary: &quot; + summary + &quot;, extraMap:&quot; + extraMap); &#125; @Override protected void onNotificationReceivedInApp(Context context, String title, String summary, Map&lt;String, String&gt; extraMap, int openType, String openActivity, String openUrl) &#123; Log.e(&quot;MyMessageReceiver&quot;, &quot;onNotificationReceivedInApp, title: &quot; + title + &quot;, summary: &quot; + summary + &quot;, extraMap:&quot; + extraMap + &quot;, openType:&quot; + openType + &quot;, openActivity:&quot; + openActivity + &quot;, openUrl:&quot; + openUrl); &#125; @Override protected void onNotificationRemoved(Context context, String messageId) &#123; Log.e(&quot;MyMessageReceiver&quot;, &quot;onNotificationRemoved&quot;); &#125;&#125;","categories":[{"name":"Android常用代码","slug":"Android常用代码","permalink":"http://zhouzhuo810.github.io/categories/Android%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"AndroidStudio技巧-发布library到jitpack并带注释","slug":"AndroidStudio技巧-发布library到jitpack并带注释","date":"2018-09-25T01:30:14.000Z","updated":"2024-06-13T11:58:36.750Z","comments":true,"path":"2018/09/25/AndroidStudio技巧-发布library到jitpack并带注释/","permalink":"http://zhouzhuo810.github.io/2018/09/25/AndroidStudio%E6%8A%80%E5%B7%A7-%E5%8F%91%E5%B8%83library%E5%88%B0jitpack%E5%B9%B6%E5%B8%A6%E6%B3%A8%E9%87%8A/","excerpt":"在project的build.gralde中添加classpath1classpath &#x27;com.github.dcendents:android-maven-gradle-plugin:2.1&#x27; 注意：如果没有加google()，必须加上这个，并且buildscript和allprojects都得加上。 123456789101112131415161718buildscript &#123; repositories &#123; google() jcenter() &#125; dependencies &#123; classpath &#x27;com.android.tools.build:gradle:3.1.2&#x27; classpath &#x27;com.github.dcendents:android-maven-gradle-plugin:2.1&#x27; // NOTE: Do not place your application dependencies here; they belong // in the individual module build.gradle files &#125;&#125;allprojects &#123; repositories &#123; google() jcenter() &#125;&#125;","text":"在project的build.gralde中添加classpath1classpath &#x27;com.github.dcendents:android-maven-gradle-plugin:2.1&#x27; 注意：如果没有加google()，必须加上这个，并且buildscript和allprojects都得加上。 123456789101112131415161718buildscript &#123; repositories &#123; google() jcenter() &#125; dependencies &#123; classpath &#x27;com.android.tools.build:gradle:3.1.2&#x27; classpath &#x27;com.github.dcendents:android-maven-gradle-plugin:2.1&#x27; // NOTE: Do not place your application dependencies here; they belong // in the individual module build.gradle files &#125;&#125;allprojects &#123; repositories &#123; google() jcenter() &#125;&#125; 在library的build.gradle中添加1234567891011121314151617181920212223242526272829303132apply plugin: &#x27;com.github.dcendents.android-maven&#x27; //&#123;github用户名&#125;改为自己github的用户名group=&#x27;com.github.&#123;github用户名&#125;&#x27; //... //添加下面这些才会有文档注释。 // build a jar with source filestask sourcesJar(type: Jar) &#123; from android.sourceSets.main.java.srcDirs classifier = &#x27;sources&#x27;&#125; task javadoc(type: Javadoc) &#123; failOnError false source = android.sourceSets.main.java.sourceFiles classpath += project.files(android.getBootClasspath().join(File.pathSeparator)) classpath += configurations.compile&#125; // build a jar with javadoctask javadocJar(type: Jar, dependsOn: javadoc) &#123; classifier = &#x27;javadoc&#x27; from javadoc.destinationDir&#125; artifacts &#123; archives sourcesJar archives javadocJar&#125; 提交代码到github在github项目页面release一个新版本访问jitpack官网查看https://jitpack.io 搜索框输入github项目地址如： https://github.com/zhouzhuo810/Magpie 点击最新版的get按钮，即开始编译，编译成功即可使用。使用方法该页面下方有。 更多可参考官方demohttps://github.com/jitpack/android-example","categories":[{"name":"Android开发工具","slug":"Android开发工具","permalink":"http://zhouzhuo810.github.io/categories/Android%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"Android疑难杂症-购物车商品种类和商品列表联动效果","slug":"Android疑难杂症-购物车商品种类和商品列表联动效果","date":"2018-05-16T13:55:22.000Z","updated":"2024-06-13T11:58:36.766Z","comments":true,"path":"2018/05/16/Android疑难杂症-购物车商品种类和商品列表联动效果/","permalink":"http://zhouzhuo810.github.io/2018/05/16/Android%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87-%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%95%86%E5%93%81%E7%A7%8D%E7%B1%BB%E5%92%8C%E5%95%86%E5%93%81%E5%88%97%E8%A1%A8%E8%81%94%E5%8A%A8%E6%95%88%E6%9E%9C/","excerpt":"说明 基于BaseRecyclerViewAdapterHelper 1compile &#x27;com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.30&#x27; 效果图","text":"说明 基于BaseRecyclerViewAdapterHelper 1compile &#x27;com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.30&#x27; 效果图 实体类123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111package com.keqiang.gftstore.entity; import com.chad.library.adapter.base.entity.AbstractExpandableItem;import com.chad.library.adapter.base.entity.MultiItemEntity; import java.util.List; /** * Created by zhouzhuo810 on 2018/5/15. */public class CateEntity extends AbstractExpandableItem&lt;CateEntity.ContentEntity&gt; implements MultiItemEntity &#123; private String name; private boolean choose; private int index; private List&lt;ContentEntity&gt; contents; public int getIndex() &#123; return index; &#125; public void setIndex(int index) &#123; this.index = index; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public boolean isChoose() &#123; return choose; &#125; public void setChoose(boolean choose) &#123; this.choose = choose; &#125; public List&lt;ContentEntity&gt; getContents() &#123; return contents; &#125; public void setContents(List&lt;ContentEntity&gt; contents) &#123; this.contents = contents; &#125; @Override public int getLevel() &#123; return 0; &#125; @Override public int getItemType() &#123; return 0; &#125; public static class ContentEntity implements MultiItemEntity &#123; private String name; private String picUrl; private Float price; private int count; private int index; public int getIndex() &#123; return index; &#125; public void setIndex(int index) &#123; this.index = index; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public String getPicUrl() &#123; return picUrl; &#125; public void setPicUrl(String picUrl) &#123; this.picUrl = picUrl; &#125; public Float getPrice() &#123; return price; &#125; public void setPrice(Float price) &#123; this.price = price; &#125; public int getCount() &#123; return count; &#125; public void setCount(int count) &#123; this.count = count; &#125; @Override public int getItemType() &#123; return 1; &#125; &#125;&#125; 菜单adapter12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152import android.content.Context;import android.util.TypedValue;import android.widget.TextView; import com.keqiang.gftstore.R;import com.keqiang.gftstore.entity.CateEntity;import com.zhy.autolayout.utils.AutoUtils; import java.util.List; import zhouzhuo810.me.zzandframe.ui.adapter.RvAutoBaseAdapter; /** * Created by zhouzhuo810 on 2018/5/15. */public class CateRvAdapter extends RvAutoBaseAdapter&lt;CateEntity&gt; &#123; public CateRvAdapter(Context context, List&lt;CateEntity&gt; data) &#123; super(context, data); &#125; @Override protected int getLayoutId(int viewType) &#123; return R.layout.rv_item_cate; &#125; @Override protected void fillData(ViewHolder holder, CateEntity item, int position) &#123; holder.setText(R.id.tv_name, item.getName()) .setBackgroundRes(R.id.list_root, item.isChoose() ? R.color.colorWhite : R.color.colorBg) .setTextColor(R.id.tv_name, item.isChoose() ? 0xff000000 : 0xff888888) .setGone(R.id.iv_icon, position != 0); TextView tvName = holder.getView(R.id.tv_name); if (item.isChoose()) &#123; tvName.setTextSize(TypedValue.COMPLEX_UNIT_PX, AutoUtils.getPercentWidthSize(41)); tvName.requestLayout(); &#125; else &#123; tvName.setTextSize(TypedValue.COMPLEX_UNIT_PX, AutoUtils.getPercentWidthSize(36)); tvName.requestLayout(); &#125; &#125; public void setSelection(int position) &#123; if (getData() != null) &#123; for (CateEntity entity : getData()) &#123; entity.setChoose(false); &#125; getData().get(position).setChoose(true); notifyDataSetChanged(); &#125; &#125;&#125; 菜单点击监听1234567891011121314cateRvAdapter.setOnItemClickListener(new RvAutoBaseAdapter.OnItemClickListener() &#123; @Override public void onItemClick(View view, int position) &#123; if (cateRvAdapter.getData() != null) &#123; for (CateEntity entity : cateRvAdapter.getData()) &#123; entity.setChoose(false); &#125; cateRvAdapter.getData().get(position).setChoose(true); cateRvAdapter.notifyDataSetChanged(); ((LinearLayoutManager)rvContent.getLayoutManager()).scrollToPositionWithOffset(contentRvAdapter.getFirstPositionOfGroup(position), 0); &#125; &#125;&#125;); 菜单adapter123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123import android.support.annotation.Nullable;import android.util.Log;import android.view.View;import android.view.ViewGroup; import com.chad.library.adapter.base.BaseMultiItemQuickAdapter;import com.chad.library.adapter.base.BaseViewHolder;import com.chad.library.adapter.base.entity.MultiItemEntity;import com.keqiang.gftstore.R;import com.keqiang.gftstore.entity.CateEntity;import com.zhy.autolayout.utils.AutoUtils; import java.util.ArrayList;import java.util.List; /** * Created by zhouzhuo810 on 2018/5/15. */ public class ContentRvAdapter extends BaseMultiItemQuickAdapter&lt;MultiItemEntity, BaseViewHolder&gt; &#123; public ContentRvAdapter(@Nullable List&lt;MultiItemEntity&gt; data) &#123; super(data); addItemType(0, R.layout.rv_item_right_title); addItemType(1, R.layout.rv_item_right_content); &#125; @Override protected BaseViewHolder createBaseViewHolder(ViewGroup parent, int layoutResId) &#123; BaseViewHolder baseViewHolder = super.createBaseViewHolder(parent, layoutResId); AutoUtils.auto(baseViewHolder.itemView); baseViewHolder.setNestView(R.id.iv_dec); baseViewHolder.setNestView(R.id.iv_add); return baseViewHolder; &#125; @Override protected void convert(BaseViewHolder helper, MultiItemEntity item) &#123; switch (helper.getItemViewType()) &#123; case 0: CateEntity cate = (CateEntity) item; helper.setText(R.id.tv_title_name, cate.getName()); break; case 1: CateEntity.ContentEntity content = (CateEntity.ContentEntity) item; helper.setText(R.id.tv_goods_name, content.getName()) .setText(R.id.tv_price, content.getPrice() + &quot;&quot;) .setText(R.id.tv_shop_qty, content.getCount() + &quot;&quot;) .setVisible(R.id.iv_dec, content.getCount() != 0) .setVisible(R.id.tv_shop_qty, content.getCount() != 0); break; &#125; &#125; public int getFirstPositionOfGroup(int group) &#123; if (getData() != null) &#123; List&lt;MultiItemEntity&gt; data = getData(); for (int i = 0; i &lt; data.size(); i++) &#123; MultiItemEntity multiItemEntity = data.get(i); if (multiItemEntity instanceof CateEntity) &#123; CateEntity cate = (CateEntity) multiItemEntity; if (cate.getIndex() == group) &#123; Log.e(&quot;TTT&quot;, &quot;i=&quot; + i); return i; &#125; &#125; &#125; &#125; return 0; &#125; public int getGroupForPosition(int position) &#123; if (getData() != null) &#123; MultiItemEntity multiItemEntity = getData().get(position); if (multiItemEntity instanceof CateEntity.ContentEntity) &#123; CateEntity.ContentEntity content = (CateEntity.ContentEntity) multiItemEntity; return content.getIndex(); &#125; else &#123; CateEntity cate = (CateEntity) multiItemEntity; return cate.getIndex(); &#125; &#125; return 0; &#125; public float countMoney() &#123; float count = 0f; for (MultiItemEntity multiItemEntity : getData()) &#123; if (multiItemEntity instanceof CateEntity.ContentEntity) &#123; CateEntity.ContentEntity content = (CateEntity.ContentEntity) multiItemEntity; float v = content.getCount() * content.getPrice(); count += v; &#125; &#125; return count; &#125; public int getCount() &#123; int count = 0; for (MultiItemEntity multiItemEntity : getData()) &#123; if (multiItemEntity instanceof CateEntity.ContentEntity) &#123; CateEntity.ContentEntity content = (CateEntity.ContentEntity) multiItemEntity; int v = content.getCount(); count += v; &#125; &#125; return count; &#125; public List&lt;CateEntity.ContentEntity&gt; getCarShop() &#123; List&lt;CateEntity.ContentEntity&gt; list = new ArrayList&lt;&gt;(); for (MultiItemEntity multiItemEntity : getData()) &#123; if (multiItemEntity instanceof CateEntity.ContentEntity) &#123; CateEntity.ContentEntity content = (CateEntity.ContentEntity) multiItemEntity; int v = content.getCount(); if (v &gt; 0) &#123; list.add(content); &#125; &#125; &#125; return list; &#125;&#125; 内容滚动监听123456789101112131415rvContent.addOnScrollListener(new RecyclerView.OnScrollListener() &#123; @Override public void onScrolled(RecyclerView recyclerView, int dx, int dy) &#123; super.onScrolled(recyclerView, dx, dy); LinearLayoutManager linearLayoutManager = (LinearLayoutManager) rvContent.getLayoutManager(); int firstVisibleItemPosition=linearLayoutManager.findFirstVisibleItemPosition();//可见范围内的第一项的位置 int lastVisibleItemPosition=linearLayoutManager.findLastVisibleItemPosition();//可见范围内的最后一项的位置 int itemCount=linearLayoutManager.getItemCount();//recyclerview中的item的所有的数目 if (firstVisibleItemPosition &gt; 0) &#123; int group = contentRvAdapter.getGroupForPosition(firstVisibleItemPosition); cateRvAdapter.setSelection(group); &#125; &#125;&#125;); 数据模拟与填充12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364//关闭闪烁动画((SimpleItemAnimator) rvContent.getItemAnimator()).setSupportsChangeAnimations(false);((SimpleItemAnimator) rvShopCar.getItemAnimator()).setSupportsChangeAnimations(false); String[] names = &#123; &quot;我的最爱&quot;, &quot;饼干&quot;, &quot;饮料&quot;, &quot;方便面&quot;, &quot;水果&quot;&#125;; String[] shops = &#123; &quot;可口可乐330ml&quot;, &quot;Dole都乐菲律宾高地蕉&quot;, &quot;奥利奥夹心饼干&quot;, &quot;可口可乐330ml&quot;, &quot;Dole都乐菲律宾高地蕉&quot;, &quot;奥利奥夹心饼干&quot;, &quot;可口可乐330ml&quot;, &quot;Dole都乐菲律宾高地蕉&quot;&#125;; List&lt;CateEntity&gt; cates = new ArrayList&lt;&gt;();for (int i = 0; i &lt; names.length; i++) &#123; CateEntity entity = new CateEntity(); entity.setName(names[i]); entity.setChoose(i == 0); cates.add(entity); List&lt;CateEntity.ContentEntity&gt; contents = new ArrayList&lt;&gt;(); for (int i1 = 0; i1 &lt; shops.length; i1++) &#123; CateEntity.ContentEntity contentEntity = new CateEntity.ContentEntity(); contentEntity.setName(shops[i1]); contentEntity.setPrice(4f); contents.add(contentEntity); &#125; entity.setContents(contents);&#125;cateRvAdapter.updateAll(cates); List&lt;MultiItemEntity&gt; list = new ArrayList&lt;&gt;();for (int i = 0; i &lt; cates.size(); i++) &#123; CateEntity entity = cates.get(i); //设置GroupPosition entity.setIndex(i); //这个必须加！！！，不然刷新数据会重复添加。 if (entity.getSubItems() != null) &#123; entity.getSubItems().clear(); &#125; if (entity.getContents() != null) &#123; for (CateEntity.ContentEntity contentEntity : entity.getContents()) &#123; //设置GroupPosition contentEntity.setIndex(i); entity.addSubItem(contentEntity); &#125; &#125; list.add(entity);&#125;contentRvAdapter.setNewData(list);for (int i = 0; i &lt; cates.size(); i++) &#123; //注意！！！，这里如果adapter添加了n个header则i+n。 contentRvAdapter.collapse(i + 1);&#125;contentRvAdapter.expandAll();","categories":[{"name":"Android疑难杂症","slug":"Android疑难杂症","permalink":"http://zhouzhuo810.github.io/categories/Android%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"JavaEE-使用javaemail发送邮件","slug":"JavaEE-使用javaemail发送邮件","date":"2018-05-11T09:11:05.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"2018/05/11/JavaEE-使用javaemail发送邮件/","permalink":"http://zhouzhuo810.github.io/2018/05/11/JavaEE-%E4%BD%BF%E7%94%A8javaemail%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/","excerpt":"pom12345&lt;dependency&gt; &lt;groupId&gt;com.sun.mail&lt;/groupId&gt; &lt;artifactId&gt;javax.mail&lt;/artifactId&gt; &lt;version&gt;1.6.1&lt;/version&gt;&lt;/dependency&gt;","text":"pom12345&lt;dependency&gt; &lt;groupId&gt;com.sun.mail&lt;/groupId&gt; &lt;artifactId&gt;javax.mail&lt;/artifactId&gt; &lt;version&gt;1.6.1&lt;/version&gt;&lt;/dependency&gt; 使用163邮箱发送邮件1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980package javamail;import java.util.Properties; import javax.mail.Authenticator;import javax.mail.Message;import javax.mail.MessagingException;import javax.mail.PasswordAuthentication;import javax.mail.Session;import javax.mail.Transport;import javax.mail.Message.RecipientType;import javax.mail.internet.AddressException;import javax.mail.internet.InternetAddress;import javax.mail.internet.MimeMessage; public class Mail163Test &#123; public static void main(String[] args) throws Exception&#123; //0.1 确定连接位置 Properties props = new Properties(); //获取163邮箱smtp服务器的地址， props.setProperty(&quot;mail.host&quot;, &quot;smtp.163.com&quot;); //是否进行权限验证。 props.setProperty(&quot;mail.smtp.auth&quot;, &quot;true&quot;); //0.2确定权限（账号和密码） Authenticator authenticator = new Authenticator() &#123; @Override public PasswordAuthentication getPasswordAuthentication() &#123; //填写自己的163邮箱的登录帐号和授权密码，授权密码的获取，在后面会进行讲解。 return new PasswordAuthentication(&quot;163邮箱的帐号&quot;,&quot;授权码&quot;); &#125; &#125;; //1 获得连接 /** * props：包含配置信息的对象，Properties类型 * 配置邮箱服务器地址、配置是否进行权限验证(帐号密码验证)等 * * authenticator：确定权限(帐号和密码) * * 所以就要在上面构建这两个对象。 */ Session session = Session.getDefaultInstance(props, authenticator); //2 创建消息 Message message = new MimeMessage(session); // 2.1 发件人 xxx@163.com 我们自己的邮箱地址，就是名称 message.setFrom(new InternetAddress(&quot;xxx@163.com&quot;)); /** * 2.2 收件人 * 第一个参数： * RecipientType.TO 代表收件人 * RecipientType.CC 抄送 * RecipientType.BCC 暗送 * 比如A要给B发邮件，但是A觉得有必要给要让C也看看其内容，就在给B发邮件时， * 将邮件内容抄送给C，那么C也能看到其内容了，但是B也能知道A给C抄送过该封邮件 * 而如果是暗送(密送)给C的话，那么B就不知道A给C发送过该封邮件。 * 第二个参数 * 收件人的地址，或者是一个Address[]，用来装抄送或者暗送人的名单。或者用来群发。可以是相同邮箱服务器的，也可以是不同的 * 这里我们发送给我们的qq邮箱 */ message.setRecipient(RecipientType.TO, new InternetAddress(&quot;526745683@qq.com&quot;)); // 2.3 主题（标题） message.setSubject(&quot;邮件的标题&quot;); // 2.4 正文 String str = &quot;李四： &lt;br/&gt;&quot; + &quot;您好，您在本论坛注册用户，点击下面url进行激活&lt;br/&gt;&quot; + &quot;http://ww......&lt;br/&gt;&quot; + &quot;如果不能点击，请复制直接激活&lt;br/&gt;&quot; + &quot;如果不是本人，请删除邮件&quot;; //设置编码，防止发送的内容中文乱码。 message.setContent(str, &quot;text/html;charset=UTF-8&quot;); //3发送消息 Transport.send(message); &#125;&#125;","categories":[{"name":"JavaEE","slug":"JavaEE","permalink":"http://zhouzhuo810.github.io/categories/JavaEE/"},{"name":"SpringMVC","slug":"SpringMVC","permalink":"http://zhouzhuo810.github.io/categories/SpringMVC/"}],"tags":[{"name":"JavaEE","slug":"JavaEE","permalink":"http://zhouzhuo810.github.io/tags/JavaEE/"}]},{"title":"Android自定义控件-仿星空散点图","slug":"Android自定义控件-仿星空散点图","date":"2018-04-13T09:31:54.000Z","updated":"2024-06-13T11:58:36.766Z","comments":true,"path":"2018/04/13/Android自定义控件-仿星空散点图/","permalink":"http://zhouzhuo810.github.io/2018/04/13/Android%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6-%E4%BB%BF%E6%98%9F%E7%A9%BA%E6%95%A3%E7%82%B9%E5%9B%BE/","excerpt":"效果图 代码自定义属性12345&lt;declare-styleable name=&quot;StartBgView&quot;&gt; &lt;attr name=&quot;sbv_bg_color&quot; format=&quot;color|reference&quot; /&gt; &lt;attr name=&quot;sbv_star_color&quot; format=&quot;color|reference&quot; /&gt; &lt;attr name=&quot;sbv_star_qty&quot; format=&quot;integer&quot; /&gt;&lt;/declare-styleable&gt;","text":"效果图 代码自定义属性12345&lt;declare-styleable name=&quot;StartBgView&quot;&gt; &lt;attr name=&quot;sbv_bg_color&quot; format=&quot;color|reference&quot; /&gt; &lt;attr name=&quot;sbv_star_color&quot; format=&quot;color|reference&quot; /&gt; &lt;attr name=&quot;sbv_star_qty&quot; format=&quot;integer&quot; /&gt;&lt;/declare-styleable&gt; java代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178import android.content.Context;import android.content.res.TypedArray;import android.graphics.Canvas;import android.graphics.Paint;import android.graphics.RectF;import android.os.Build;import android.support.annotation.Nullable;import android.support.annotation.RequiresApi;import android.util.AttributeSet;import android.view.View; import com.zjkq.highnet_jt.R; import java.util.ArrayList;import java.util.List; /** * 仿星空背景 * Created by zhouzhuo810 on 2018/4/10. */public class StarBgView extends View &#123; private int bgColor; private int starColor; private int starQty; private Paint starPaint; private boolean hasInit; private List&lt;StarData&gt; stars; private static class StarData &#123; private int alpha; private int x; private int y; private int color; private RectF rect; public RectF getRect() &#123; return rect; &#125; public void setRect(RectF rect) &#123; this.rect = rect; &#125; public int getAlpha() &#123; return alpha; &#125; public void setAlpha(int alpha) &#123; this.alpha = alpha; &#125; public int getX() &#123; return x; &#125; public void setX(int x) &#123; this.x = x; &#125; public int getY() &#123; return y; &#125; public void setY(int y) &#123; this.y = y; &#125; public int getColor() &#123; return color; &#125; public void setColor(int color) &#123; this.color = color; &#125; &#125; public StarBgView(Context context) &#123; super(context); init(context, null); &#125; public StarBgView(Context context, @Nullable AttributeSet attrs) &#123; super(context, attrs); init(context, attrs); &#125; public StarBgView(Context context, @Nullable AttributeSet attrs, int defStyleAttr) &#123; super(context, attrs, defStyleAttr); init(context, attrs); &#125; @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP) public StarBgView(Context context, @Nullable AttributeSet attrs, int defStyleAttr, int defStyleRes) &#123; super(context, attrs, defStyleAttr, defStyleRes); init(context, attrs); &#125; private void init(Context context, AttributeSet attrs) &#123; if (attrs != null) &#123; TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.StarBgView); bgColor = a.getColor(R.styleable.StarBgView_sbv_bg_color, 0xff0a224a); starColor = a.getColor(R.styleable.StarBgView_sbv_star_color, 0xffffffff); starQty = a.getInteger(R.styleable.StarBgView_sbv_star_qty, 50); a.recycle(); &#125; else &#123; bgColor = 0xff0a224a; starColor = 0xffffffff; starQty = 50; &#125; initPaint(); setBackgroundColor(bgColor); &#125; private void generateStarData() &#123; if (stars != null) &#123; stars.clear(); stars = null; &#125; stars = new ArrayList&lt;&gt;(); for (int i = 0; i &lt; starQty; i++) &#123; int x = getRandomX(); int y = getRandomY(); int alpha = getRandomAlpha(); StarData starData = new StarData(); starData.setX(x); starData.setY(y); starData.setAlpha(alpha); if (i % 2 == 0) &#123; starData.setRect(new RectF(x, y, x + 1, y + 2)); &#125; else &#123; starData.setRect(new RectF(x, y, x + 2, y + 1)); &#125;// starData.setColor(); stars.add(starData); &#125; &#125; private int getRandomAlpha() &#123; return (int) (255 * Math.random() + 0.5f); &#125; private int getRandomX() &#123; return (int) (getWidth() * Math.random() + 0.5f); &#125; private int getRandomY() &#123; return (int) (getHeight() * Math.random() + 0.5f); &#125; private void drawStar(Canvas canvas) &#123; if (stars != null) &#123; for (StarData star : stars) &#123; starPaint.setAlpha(star.getAlpha()); canvas.drawRoundRect(star.getRect(), 1, 1, starPaint); &#125; &#125; &#125; @Override protected void onDraw(Canvas canvas) &#123; super.onDraw(canvas); if (stars == null) &#123; generateStarData(); &#125; drawStar(canvas); &#125; private void initPaint() &#123; starPaint = new Paint(); starPaint.setColor(starColor); starPaint.setStyle(Paint.Style.FILL); starPaint.setAntiAlias(true); starPaint.setStrokeWidth(1); &#125; &#125;","categories":[{"name":"Android自定义控件","slug":"Android自定义控件","permalink":"http://zhouzhuo810.github.io/categories/Android%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"Android疑难杂症-自定义RecyclerView的LayoutManager","slug":"Android疑难杂症-自定义RecyclerView的LayoutManager","date":"2018-04-13T06:35:15.000Z","updated":"2024-06-13T11:58:36.766Z","comments":true,"path":"2018/04/13/Android疑难杂症-自定义RecyclerView的LayoutManager/","permalink":"http://zhouzhuo810.github.io/2018/04/13/Android%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87-%E8%87%AA%E5%AE%9A%E4%B9%89RecyclerView%E7%9A%84LayoutManager/","excerpt":"禁用RecyclerView手动滑动功能；12345678910111213141516171819202122232425public class PlanDateRecyclerView extends RecyclerView &#123; public PlanDateRecyclerView(Context context) &#123; super(context); init(); &#125; public PlanDateRecyclerView(Context context, @Nullable AttributeSet attrs) &#123; super(context, attrs); init(); &#125; public PlanDateRecyclerView(Context context, @Nullable AttributeSet attrs, int defStyle) &#123; super(context, attrs, defStyle); init(); &#125; private void init() &#123; setOnTouchListener(new OnTouchListener() &#123; @Override public boolean onTouch(View v, MotionEvent event) &#123; return true; &#125; &#125;); &#125;&#125;","text":"禁用RecyclerView手动滑动功能；12345678910111213141516171819202122232425public class PlanDateRecyclerView extends RecyclerView &#123; public PlanDateRecyclerView(Context context) &#123; super(context); init(); &#125; public PlanDateRecyclerView(Context context, @Nullable AttributeSet attrs) &#123; super(context, attrs); init(); &#125; public PlanDateRecyclerView(Context context, @Nullable AttributeSet attrs, int defStyle) &#123; super(context, attrs, defStyle); init(); &#125; private void init() &#123; setOnTouchListener(new OnTouchListener() &#123; @Override public boolean onTouch(View v, MotionEvent event) &#123; return true; &#125; &#125;); &#125;&#125; 示例123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138import android.content.Context;import android.graphics.Rect;import android.support.v7.widget.RecyclerView;import android.view.View;import android.view.ViewGroup; import java.util.List; /** * Created by zhouzhuo810 on 2018/4/12. */public class PlanCalendarLayoutManager extends RecyclerView.LayoutManager &#123; private int totalWidth; private int totalHeight; private int verticalScrollOffset; private int horizontalScrollOffset; private List&lt;PlanOrderEntity&gt; frames; private int todayX; public PlanCalendarLayoutManager(Context ctx, List&lt;PlanOrderEntity&gt; frames, int todayX) &#123; this.frames = frames; this.todayX = todayX; &#125; @Override public RecyclerView.LayoutParams generateDefaultLayoutParams() &#123; return new RecyclerView.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT); &#125; @Override public void onLayoutChildren(RecyclerView.Recycler recycler, RecyclerView.State state) &#123; if (getItemCount() &lt;= 0 || state.isPreLayout()) &#123; return; &#125; detachAndScrapAttachedViews(recycler); fill(recycler, state); &#125; private void fill(RecyclerView.Recycler recycler, RecyclerView.State state) &#123; int itemCount = state.getItemCount(); if (itemCount &lt;= 0) &#123; return; &#125; if (frames != null) &#123; int size = Math.min(getItemCount(), frames.size()); for (int i = 0; i &lt; size; i++) &#123; Rect rect = frames.get(i).getRect(); totalHeight = Math.max(rect.bottom, totalHeight); totalWidth = Math.max(rect.right, totalWidth); View viewForPosition = recycler.getViewForPosition(i); if (viewForPosition instanceof ViewGroup) &#123; ViewGroup.LayoutParams lp = viewForPosition.getLayoutParams(); &#125; addView(viewForPosition); measureChildWithMargins(viewForPosition, 0, 0); layoutDecoratedWithMargins(viewForPosition, rect.left, rect.top, rect.right, rect.bottom); &#125; totalHeight = Math.max(totalHeight, getHeight()); totalWidth = Math.max(totalWidth, getWidth()); &#125; &#125; public int getTodayX() &#123; return todayX - horizontalScrollOffset; &#125; @Override public boolean canScrollVertically() &#123; return true; &#125; @Override public boolean canScrollHorizontally() &#123; return true; &#125; @Override public int scrollHorizontallyBy(int dx, RecyclerView.Recycler recycler, RecyclerView.State state) &#123; int travelX = dx; //如果滑动到最左边 if (horizontalScrollOffset + dx &lt; 0) &#123; travelX = -horizontalScrollOffset; &#125; else if (horizontalScrollOffset + dx &gt; totalWidth - getHorizontalSpace()) &#123;//如果滑动到最右边 travelX = totalWidth - getHorizontalSpace() - horizontalScrollOffset; &#125; //将水平方向的偏移量+travel horizontalScrollOffset += travelX; // 调用该方法通知view在y方向上移动指定距离 offsetChildrenHorizontal(-travelX); return travelX; &#125; public void setTotalWidth(int totalWidth) &#123; this.totalWidth = totalWidth; &#125; @Override public int scrollVerticallyBy(int dy, RecyclerView.Recycler recycler, RecyclerView.State state) &#123; //列表向下滚动dy为正，列表向上滚动dy为负，这点与Android坐标系保持一致。 //实际要滑动的距离 int travel = dy; //如果滑动到最顶部 if (verticalScrollOffset + dy &lt; 0) &#123; travel = -verticalScrollOffset; &#125; else if (verticalScrollOffset + dy &gt; totalHeight - getVerticalSpace()) &#123;//如果滑动到最底部 travel = totalHeight - getVerticalSpace() - verticalScrollOffset; &#125; //将竖直方向的偏移量+travel verticalScrollOffset += travel; // 调用该方法通知view在y方向上移动指定距离 offsetChildrenVertical(-travel); return travel; &#125; private int getVerticalSpace() &#123; //计算RecyclerView的可用高度，除去上下Padding值 return getHeight() - getPaddingBottom() - getPaddingTop(); &#125; public int getHorizontalSpace() &#123; return getWidth() - getPaddingLeft() - getPaddingRight(); &#125; public int getTotalWidth() &#123; return totalWidth; &#125;&#125; 双RecyclerView滑动绑定功能实现123456rv.addOnScrollListener(new RecyclerView.OnScrollListener() &#123; @Override public void onScrolled(RecyclerView recyclerView, int dx, int dy) &#123; rvDate.scrollBy(dx, 0); &#125;&#125;);","categories":[{"name":"Android疑难杂症","slug":"Android疑难杂症","permalink":"http://zhouzhuo810.github.io/categories/Android%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"Android疑难杂证-解决ViewPager和Fragment中水平滑动控件冲突问题","slug":"Android疑难杂证-解决ViewPager和Fragment中水平滑动控件冲突问题","date":"2018-04-13T04:35:15.000Z","updated":"2024-06-13T11:58:36.766Z","comments":true,"path":"2018/04/13/Android疑难杂证-解决ViewPager和Fragment中水平滑动控件冲突问题/","permalink":"http://zhouzhuo810.github.io/2018/04/13/Android%E7%96%91%E9%9A%BE%E6%9D%82%E8%AF%81-%E8%A7%A3%E5%86%B3ViewPager%E5%92%8CFragment%E4%B8%AD%E6%B0%B4%E5%B9%B3%E6%BB%91%E5%8A%A8%E6%8E%A7%E4%BB%B6%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98/","excerpt":"","text":"终极解决方案123456789101112131415161718192021222324252627import android.content.Context;import android.util.AttributeSet;import android.view.View; import zhouzhuo810.me.zzandframe.ui.widget.ZzViewPager; /** * Created by zhouzhuo810 on 2018/4/11. */public class NoConflictViewPager extends ZzViewPager &#123; public NoConflictViewPager(Context context) &#123; super(context); &#125; public NoConflictViewPager(Context context, AttributeSet attrs) &#123; super(context, attrs); &#125; @Override protected boolean canScroll(View v, boolean checkV, int dx, int x, int y) &#123; //这里添加冲突的控件类型 if (v instanceof PickerView) &#123; return true; &#125; return super.canScroll(v, checkV, dx, x, y); &#125;&#125;","categories":[{"name":"Android疑难杂症","slug":"Android疑难杂症","permalink":"http://zhouzhuo810.github.io/categories/Android%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"Android常用代码-再按一次退出App","slug":"Android常用代码-再按一次退出App","date":"2018-04-13T00:35:15.000Z","updated":"2024-06-13T11:58:36.766Z","comments":true,"path":"2018/04/13/Android常用代码-再按一次退出App/","permalink":"http://zhouzhuo810.github.io/2018/04/13/Android%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81-%E5%86%8D%E6%8C%89%E4%B8%80%E6%AC%A1%E9%80%80%E5%87%BAApp/","excerpt":"","text":"核心代码123456789101112131415@Overridepublic void onBackPressed() &#123; if (isExit) &#123; finish(); &#125; else &#123; isExit = true; ToastUtils.showCustomBgToast(getString(R.string.press_angin_exit_text)); new Timer().schedule(new TimerTask() &#123; @Override public void run() &#123; isExit = false; &#125; &#125;, 2000); &#125;&#125;","categories":[{"name":"Android常用代码","slug":"Android常用代码","permalink":"http://zhouzhuo810.github.io/categories/Android%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"Android常用代码-渐变背景色shape","slug":"Android常用代码-渐变背景色shape","date":"2018-04-09T06:35:15.000Z","updated":"2024-06-13T11:58:36.766Z","comments":true,"path":"2018/04/09/Android常用代码-渐变背景色shape/","permalink":"http://zhouzhuo810.github.io/2018/04/09/Android%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81-%E6%B8%90%E5%8F%98%E8%83%8C%E6%99%AF%E8%89%B2shape/","excerpt":"","text":"关键代码12345678&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:shape=&quot;rectangle&quot;&gt; &lt;gradient android:angle=&quot;90&quot; android:endColor=&quot;#3A559B&quot; android:startColor=&quot;#5c7bbb&quot; /&gt;&lt;/shape&gt;","categories":[{"name":"Android常用代码","slug":"Android常用代码","permalink":"http://zhouzhuo810.github.io/categories/Android%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"Android-8.0新特性-服务启动问题","slug":"Android-8.0新特性-服务启动问题","date":"2018-04-02T05:30:53.000Z","updated":"2024-06-13T11:58:36.750Z","comments":true,"path":"2018/04/02/Android-8.0新特性-服务启动问题/","permalink":"http://zhouzhuo810.github.io/2018/04/02/Android-8.0%E6%96%B0%E7%89%B9%E6%80%A7-%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E9%97%AE%E9%A2%98/","excerpt":"问题描述 Android 8.0 启动后台service 出错 IllegalStateException: Not allowed to start service Intent 原因 极光推送老版本sdk启动推送服务未兼容8.0才出现的问题； Android O对应用在后台运行时可以执行的操作施加了限制，称为后台执行限制（Background Execution Limits），这可以大大减少应用的内存使用和耗电量，提高用户体验。后台执行限制分为两个部分：后台服务限制（Background Service Limitations）、广播限&gt; 制（BroadcastLimitations）。","text":"问题描述 Android 8.0 启动后台service 出错 IllegalStateException: Not allowed to start service Intent 原因 极光推送老版本sdk启动推送服务未兼容8.0才出现的问题； Android O对应用在后台运行时可以执行的操作施加了限制，称为后台执行限制（Background Execution Limits），这可以大大减少应用的内存使用和耗电量，提高用户体验。后台执行限制分为两个部分：后台服务限制（Background Service Limitations）、广播限&gt; 制（BroadcastLimitations）。 本案例解决方式 更新极光推送sdk就好了。 其他解决方式 如果自己启动服务遇到此问题，可以这样解决 修改启动方式 12345if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) &#123; context.startForegroundService(intent);&#125; else &#123; context.startService(intent);&#125; 并且在service里再调用startForeground方法，不然就会出现ANR 12context.startForeground(SERVICE_ID, builder.getNotification());\\","categories":[{"name":"Android版本特性","slug":"Android版本特性","permalink":"http://zhouzhuo810.github.io/categories/Android%E7%89%88%E6%9C%AC%E7%89%B9%E6%80%A7/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"Android常用代码-自定义View和ViewGroup","slug":"Android常用代码-自定义View和ViewGroup","date":"2018-03-20T08:52:50.000Z","updated":"2024-06-13T11:58:36.766Z","comments":true,"path":"2018/03/20/Android常用代码-自定义View和ViewGroup/","permalink":"http://zhouzhuo810.github.io/2018/03/20/Android%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81-%E8%87%AA%E5%AE%9A%E4%B9%89View%E5%92%8CViewGroup/","excerpt":"一、自定义View自定义属性 以ZzHorizontalProgressBar为例 1234567891011121314151617181920//attrs.xml&lt;declare-styleable name=&quot;ZzHorizontalProgressBar&quot;&gt; &lt;!--大小--&gt; &lt;attr name=&quot;zpb_padding&quot; format=&quot;dimension&quot; /&gt; &lt;!--颜色--&gt; &lt;attr name=&quot;zpb_bg_color&quot; format=&quot;color|reference&quot; /&gt; &lt;attr name=&quot;zpb_pb_color&quot; format=&quot;color|reference&quot; /&gt; &lt;attr name=&quot;zpb_second_pb_color&quot; format=&quot;color|reference&quot; /&gt; &lt;!--整数--&gt; &lt;attr name=&quot;zpb_max&quot; format=&quot;integer&quot; /&gt; &lt;attr name=&quot;zpb_progress&quot; format=&quot;integer&quot; /&gt; &lt;attr name=&quot;zpb_second_progress&quot; format=&quot;integer&quot; /&gt; &lt;!--布尔--&gt; &lt;attr name=&quot;zpb_show_second_progress&quot; format=&quot;boolean&quot; /&gt; &lt;!--枚举--&gt; &lt;attr name=&quot;zpb_show_second_point_shape&quot; format=&quot;enum&quot;&gt; &lt;enum name=&quot;point&quot; value=&quot;0&quot;/&gt; &lt;enum name=&quot;line&quot; value=&quot;1&quot;/&gt; &lt;/attr&gt;&lt;/declare-styleable&gt;","text":"一、自定义View自定义属性 以ZzHorizontalProgressBar为例 1234567891011121314151617181920//attrs.xml&lt;declare-styleable name=&quot;ZzHorizontalProgressBar&quot;&gt; &lt;!--大小--&gt; &lt;attr name=&quot;zpb_padding&quot; format=&quot;dimension&quot; /&gt; &lt;!--颜色--&gt; &lt;attr name=&quot;zpb_bg_color&quot; format=&quot;color|reference&quot; /&gt; &lt;attr name=&quot;zpb_pb_color&quot; format=&quot;color|reference&quot; /&gt; &lt;attr name=&quot;zpb_second_pb_color&quot; format=&quot;color|reference&quot; /&gt; &lt;!--整数--&gt; &lt;attr name=&quot;zpb_max&quot; format=&quot;integer&quot; /&gt; &lt;attr name=&quot;zpb_progress&quot; format=&quot;integer&quot; /&gt; &lt;attr name=&quot;zpb_second_progress&quot; format=&quot;integer&quot; /&gt; &lt;!--布尔--&gt; &lt;attr name=&quot;zpb_show_second_progress&quot; format=&quot;boolean&quot; /&gt; &lt;!--枚举--&gt; &lt;attr name=&quot;zpb_show_second_point_shape&quot; format=&quot;enum&quot;&gt; &lt;enum name=&quot;point&quot; value=&quot;0&quot;/&gt; &lt;enum name=&quot;line&quot; value=&quot;1&quot;/&gt; &lt;/attr&gt;&lt;/declare-styleable&gt; 12345678910111213TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.SomeWidgetName);//整数int max = a.getInteger(R.styleable.ZzHorizontalProgressBar_zpb_max, 100);//颜色int bgColor = a.getColor(R.styleable.ZzHorizontalProgressBar_zpb_bg_color, 0xff3F51B5);//尺寸大小int padding = a.getDimensionPixelSize(R.styleable.ZzHorizontalProgressBar_zpb_padding, 2);//布尔类型boolean showSecondProgress = a.getBoolean(R.styleable.ZzHorizontalProgressBar_zpb_show_second_progress, false);//枚举int secondProgressShape = a.getInteger(R.styleable.ZzHorizontalProgressBar_zpb_show_second_point_shape, 0);//... ...a.recycle(); Paint相关设置文字大小1mPaint.setTextSize(AutoUtils.getPercentWidthSize(20)); 获取文字宽度1float textWidth = mPaint.measureText(text); 获取文字高度1float textHeight = mPaint.descent() - mPaint.ascent(); 获取文字基线123456//posX 和 posY 为文字的左上角的坐标Paint.FontMetrics metrics = new Paint.FontMetrics();mPaint.getFontMetrics(metrics);float baseLineY = posY - metrics.top;//... ...canvas.drawText(textTop, posX, baseLineY, mPaint); 透明度1mPaint.setAlpha(255); //0~255 抗锯齿1mPaint.setAntiAlias(true); 颜色1mPaint.setColor(Color.WHITE); 填充样式 填充 1mPaint.setStyle(Paint.Style.FILL); 边框 1mPaint.setStyle(Paint.Style.STROKE); 1mPaint.setStyle(Paint.Style.FILL_AND_STROKE); 渐变色线性渐变123456789101112131415161718//以画渐变进度条为例int progressWidth = width - padding * 2;float mDx = progressWidth * percent;int colors[] = new int[2];float positions[] = new float[2];//渐变开始颜色colors[0] = gradientFrom;positions[0] = 0;//渐变结束颜色colors[1] = gradientTo;positions[1] = 1;LinearGradient shader = new LinearGradient( padding + progressHeight / 2, padding, padding + progressHeight / 2 + mDx, padding + progressHeight, colors, positions, Shader.TileMode.MIRROR);//gradientmPaint.setShader(shader); LinearGradient构造方法说明 1public LinearGradient(float x0, float y0,float x1, float y1, int colors[], float positions[],TileMode tile)&#123;&#125; x0 渐变线起点的x坐标 y0 渐变线起点的y坐标 x1 渐变线结束处的x坐标 y1 渐变线结束处的y坐标 colors 沿渐变线分布的颜色 positions 可能为null,颜色数组中每个对应颜色的相对位置[0..1]。如果它为空，则颜色沿梯度线均匀分布 tile 着色器平铺模式 弧形渐变123SweepGradient shader = new SweepGradient(getWidth() / 2, getHeight() / 2, startProgressColor, endProgressColor);//gradientprogressPaint.setShader(shader); SweepGradient构造方法说明1public SweepGradient(float cx, float cy, @ColorInt int color0, @ColorInt int color1) &#123;&#125; cx 中心的x坐标 cy 中心的y坐标 color0 在扫描开始时使用的颜色 color1 扫描结束时使用的颜色 Canvas相关文字1canvas.drawText(textTop, posX, baseLineY, mPaint); 方法说明 1public void drawText(@NonNull String text, float x, float y, @NonNull Paint paint)&#123;&#125; text 要绘制的文本 x 正在绘制的文本原点的x坐标 y 正在绘制的文本的基线的y坐标，注意是baseLine的坐标 paint 用于绘制文本的画笔 圆形123//设置实心mPaint.setStyle(Paint.Style.FILL);canvas.drawCircle(padding + s_progressHeight / 2, padding + s_progressHeight / 2, s_progressHeight / 2, mPaint); 圆环12345//设置空心mPaint.setStyle(Paint.Style.STROKE);//设置环厚mPaint.setStrokeWidth(10f);canvas.drawCircle(padding + s_progressHeight / 2, padding + s_progressHeight / 2, s_progressHeight / 2, mPaint); 方法说明 1public void drawCircle(float cx, float cy, float radius, @NonNull Paint paint)&#123;&#125; cx 要绘制的圆的中心的x坐标 cy 要绘制的圆的中心的y坐标 radius 要绘制的圆的半径 paint 用于绘制圆的画笔 矩形圆角矩形扇形1canvas.drawArc(outRect, mData.getStartAngle(), mData.getSwipeAngle(), true, mPaint); 方法说明 1public void drawArc(@NonNull RectF oval, float startAngle, float sweepAngle, boolean useCenter, @NonNull Paint paint)&#123;&#125; oval 椭圆的边界用于定义弧的形状和大小 startAngle 圆弧开始的起始角度（以度为单位） sweepAngle 扫描角度（以度为单位）顺时针测量 useCenter 如果为true，则将椭圆的中心包含在弧中，如果为false，则将其关闭。这将画一个楔子 paint 用于绘制弧线的画笔 贝塞尔曲线直线1234//垂直直线canvas.drawLine(x, 0, x, getHeight(), paint);//水平直线canvas.drawLine(0, y, getWidth(), y, paint); 图片三角形123456Path path = new Path();path.moveTo(centerX, AutoUtils.getPercentHeightSize(20));// 此点为多边形的起点path.lineTo(centerX-AutoUtils.getPercentWidthSize(30), 0);path.lineTo(centerX+AutoUtils.getPercentWidthSize(30), 0);path.close(); // 使这些点构成封闭的多边形c.drawPath(path, paint); 五角星网格12345678910111213141516171819private void drawGrid(Canvas canvas) &#123; int width = getWidth(); int height = getHeight(); int rectWidth = width / totalColumn; int rectHeight = height / totalRow; int posY = 1; canvas.drawLine(0, posY, getWidth(), posY, gridPaint); for (int i = 1; i &lt;= totalRow; i++) &#123; posY = i * rectHeight; canvas.drawLine(0, posY, getWidth(), posY, gridPaint); &#125; int posX = 1; canvas.drawLine(posX, 0, posX, getHeight(), gridPaint); for (int i = 1; i &lt;= totalColumn; i++) &#123; posX = i * rectWidth; canvas.drawLine(posX, 0, posX, getHeight(), gridPaint); &#125;&#125; 动画二、自定义ViewGrouponLayout","categories":[{"name":"Android常用代码","slug":"Android常用代码","permalink":"http://zhouzhuo810.github.io/categories/Android%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"Android-TV开发-使用OkHttp定时请求网络数据不刷新问题","slug":"Android-TV开发-使用OkHttp定时请求网络数据不刷新问题","date":"2018-03-15T06:50:32.000Z","updated":"2024-06-13T11:58:36.750Z","comments":true,"path":"2018/03/15/Android-TV开发-使用OkHttp定时请求网络数据不刷新问题/","permalink":"http://zhouzhuo810.github.io/2018/03/15/Android-TV%E5%BC%80%E5%8F%91-%E4%BD%BF%E7%94%A8OkHttp%E5%AE%9A%E6%97%B6%E8%AF%B7%E6%B1%82%E7%BD%91%E7%BB%9C%E6%95%B0%E6%8D%AE%E4%B8%8D%E5%88%B7%E6%96%B0%E9%97%AE%E9%A2%98/","excerpt":"问题描述 电视APP某个页面需要每隔若干秒刷新一次数据； 但是，刷新一定时间后数据不更新了，电视网络没问题； 并且，使用电视的清理APP缓存功能后，会刷新； 而且，隔一段时间后又出现此问题了。","text":"问题描述 电视APP某个页面需要每隔若干秒刷新一次数据； 但是，刷新一定时间后数据不更新了，电视网络没问题； 并且，使用电视的清理APP缓存功能后，会刷新； 而且，隔一段时间后又出现此问题了。 解决办法12345678910111213141516171819202122232425262728293031323334353637383940 public static KqApi getDefaultApi() &#123; String serverIp = KqSharedUtil.getServerIp(); if (api0 == null) &#123; synchronized (Api.class) &#123; if (api0 == null) &#123; File cache = KqApplication.getINSTANCE().getCacheDir();/* HttpLoggingInterceptor logging = new HttpLoggingInterceptor(); logging.setLevel(HttpLoggingInterceptor.Level.BASIC); HttpLoggingInterceptor logging1 = new HttpLoggingInterceptor(); logging1.setLevel(HttpLoggingInterceptor.Level.BODY);*/ OkHttpClient client = new OkHttpClient.Builder() .cache(new Cache(cache, 1024)) .readTimeout(20, TimeUnit.SECONDS) .writeTimeout(20, TimeUnit.SECONDS) .connectTimeout(10, TimeUnit.SECONDS) //！！！关键代码，强制不使用缓存 .addNetworkInterceptor(new Interceptor() &#123; @Override public Response intercept(Chain chain) throws IOException &#123; Request request = chain.request().newBuilder() .cacheControl(new CacheControl.Builder().noCache().build()) .build(); return chain.proceed(request); &#125; &#125;)// .addInterceptor(logging)// .addInterceptor(logging1) .build(); Retrofit retrofit = new Retrofit.Builder() .client(client) .addConverterFactory(GsonConverterFactory.create())//添加 json 转换器 .addCallAdapterFactory(RxJavaCallAdapterFactory.create())//添加 RxJava 适配器 .baseUrl(serverIp) .build(); api0 = retrofit.create(KqApi.class); &#125; &#125; &#125; return api0; &#125; 依赖说明123456789101112//retrofitcompile &#x27;com.squareup.retrofit2:retrofit:2.1.0&#x27;//gsoncompile &#x27;com.squareup.retrofit2:converter-gson:2.1.0&#x27;//rxjavacompile &#x27;io.reactivex:rxjava:1.1.9&#x27;compile &#x27;io.reactivex:rxandroid:1.2.1&#x27;compile &#x27;com.squareup.retrofit2:adapter-rxjava:2.1.0&#x27;//okhttpcompile &#x27;com.squareup.okhttp3:okhttp:3.4.1&#x27;compile &#x27;com.squareup.okhttp3:okhttp-urlconnection:3.4.1&#x27;compile &#x27;com.squareup.okhttp3:logging-interceptor:3.4.1&#x27;","categories":[{"name":"Android-TV开发","slug":"Android-TV开发","permalink":"http://zhouzhuo810.github.io/categories/Android-TV%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"Android-TV开发-RecyclerView刷新焦点丢失以及局部刷新问题","slug":"Android-TV开发-RecyclerView刷新焦点丢失以及局部刷新问题","date":"2018-03-15T06:20:33.000Z","updated":"2024-06-13T11:58:36.750Z","comments":true,"path":"2018/03/15/Android-TV开发-RecyclerView刷新焦点丢失以及局部刷新问题/","permalink":"http://zhouzhuo810.github.io/2018/03/15/Android-TV%E5%BC%80%E5%8F%91-RecyclerView%E5%88%B7%E6%96%B0%E7%84%A6%E7%82%B9%E4%B8%A2%E5%A4%B1%E4%BB%A5%E5%8F%8A%E5%B1%80%E9%83%A8%E5%88%B7%E6%96%B0%E9%97%AE%E9%A2%98/","excerpt":"问题1 使用GridLayoutManager时，多选的情况下，点击item刷新后，焦点被抢问题； 解决方式 123456789holder.setText(R.id.tv_name, data.get(position).getcName()) .setChecked(R.id.cb_choose, data.get(position).isChoosed()) .setOnClickListener(R.id.ll_cb, new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; data.get(position).setChoosed(!data.get(position).isChoosed()); notifyItemChanged(position); //关键代码 &#125; &#125;);","text":"问题1 使用GridLayoutManager时，多选的情况下，点击item刷新后，焦点被抢问题； 解决方式 123456789holder.setText(R.id.tv_name, data.get(position).getcName()) .setChecked(R.id.cb_choose, data.get(position).isChoosed()) .setOnClickListener(R.id.ll_cb, new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; data.get(position).setChoosed(!data.get(position).isChoosed()); notifyItemChanged(position); //关键代码 &#125; &#125;); 问题2 在问题1解决后，手机上没问题，电视上会出现牵连闪烁问题，就是点击某一行的某一个item，该行最左边一个item也会跟着闪烁一下； 解决方式 12//关闭闪烁动画((SimpleItemAnimator)rv.getItemAnimator()).setSupportsChangeAnimations(false);","categories":[{"name":"Android-TV开发","slug":"Android-TV开发","permalink":"http://zhouzhuo810.github.io/categories/Android-TV%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"Android常用代码-横竖屏切换","slug":"Android常用代码-横竖屏切换","date":"2018-02-26T06:35:15.000Z","updated":"2024-06-13T11:58:36.766Z","comments":true,"path":"2018/02/26/Android常用代码-横竖屏切换/","permalink":"http://zhouzhuo810.github.io/2018/02/26/Android%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81-%E6%A8%AA%E7%AB%96%E5%B1%8F%E5%88%87%E6%8D%A2/","excerpt":"自动切换 Android Manifest在需要切换的Activity中添加 12android:configChanges=&quot;orientation|keyboardHidden|layoutDirection|screenSize|screenLayout&quot;android:screenOrientation=&quot;sensor&quot; res添加layout-land和layout-port文件夹，分别放两套布局。 Activity代码中实现 1234567891011@Overridepublic void onConfigurationChanged(Configuration newConfig) &#123; super.onConfigurationChanged(newConfig); if(newConfig.orientation == ActivityInfo.SCREEN_ORIENTATION_PORTRAIT)&#123; //切换到竖屏 setContentView(R.layout.activity_main); &#125;else&#123; //切换到横屏 setContentView(R.layout.activity_main); &#125;&#125;","text":"自动切换 Android Manifest在需要切换的Activity中添加 12android:configChanges=&quot;orientation|keyboardHidden|layoutDirection|screenSize|screenLayout&quot;android:screenOrientation=&quot;sensor&quot; res添加layout-land和layout-port文件夹，分别放两套布局。 Activity代码中实现 1234567891011@Overridepublic void onConfigurationChanged(Configuration newConfig) &#123; super.onConfigurationChanged(newConfig); if(newConfig.orientation == ActivityInfo.SCREEN_ORIENTATION_PORTRAIT)&#123; //切换到竖屏 setContentView(R.layout.activity_main); &#125;else&#123; //切换到横屏 setContentView(R.layout.activity_main); &#125;&#125; 手动切换12345678910111213findViewById(R.id.btn_click).setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View view) &#123; //判断当前屏幕方向 if(getRequestedOrientation() == ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE) &#123; //切换竖屏 MainActivity.this.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT); &#125;else&#123; //切换横屏 MainActivity.this.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE); &#125; &#125;&#125;); 注意 配置android:configChanges=&quot;orientation|keyboardHidden|screenSize&quot;，才不会销毁 activity，且只调用onConfigurationChanged方法。","categories":[{"name":"Android常用代码","slug":"Android常用代码","permalink":"http://zhouzhuo810.github.io/categories/Android%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"Android疑难杂症-7.0系统PopupWindow#showAsDropDown()显示异常","slug":"Android疑难杂症-7.0系统PopupWindow#showAsDropDown()显示异常","date":"2018-02-09T06:35:15.000Z","updated":"2024-06-13T11:58:36.766Z","comments":true,"path":"2018/02/09/Android疑难杂症-7.0系统PopupWindow#showAsDropDown()显示异常/","permalink":"http://zhouzhuo810.github.io/2018/02/09/Android%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87-7.0%E7%B3%BB%E7%BB%9FPopupWindow#showAsDropDown()%E6%98%BE%E7%A4%BA%E5%BC%82%E5%B8%B8/","excerpt":"问题描述123final PopupWindow popupWindow = new PopupWindow(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);//... ...popupWindow.showAsDropDown(anchor); 上述代码在7.0手机上不会在anchor下方弹出，而是在屏幕最上方弹出，7.0以下手机则没问题；高度MATCH_PARENT时才会这样，WRAP_CONTENT时不会。 原因 7.0系统的一个bug；","text":"问题描述123final PopupWindow popupWindow = new PopupWindow(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);//... ...popupWindow.showAsDropDown(anchor); 上述代码在7.0手机上不会在anchor下方弹出，而是在屏幕最上方弹出，7.0以下手机则没问题；高度MATCH_PARENT时才会这样，WRAP_CONTENT时不会。 原因 7.0系统的一个bug； 现有解决措施 重写PopupWindow的showAsDropDown()系列方法。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556import android.content.Context;import android.graphics.Rect;import android.os.Build;import android.util.AttributeSet;import android.view.View;import android.widget.PopupWindow; /** * 解决7.0PopupWindow全屏问题； * Created by zhouzhuo810 on 2018/2/9. */public class FixedPopupWindow extends PopupWindow &#123; public FixedPopupWindow(View contentView) &#123; super(contentView); &#125; public FixedPopupWindow(int width, int height) &#123; super(width, height); &#125; public FixedPopupWindow(View contentView, int width, int height) &#123; super(contentView, width, height); &#125; public FixedPopupWindow(View contentView, int width, int height, boolean focusable) &#123; super(contentView, width, height, focusable); &#125; public FixedPopupWindow(Context context) &#123; super(context); &#125; public FixedPopupWindow(Context context, AttributeSet attrs) &#123; super(context, attrs); &#125; public FixedPopupWindow(Context context, AttributeSet attrs, int defStyleAttr) &#123; super(context, attrs, defStyleAttr); &#125; public FixedPopupWindow(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) &#123; super(context, attrs, defStyleAttr, defStyleRes); &#125; @Override public void showAsDropDown(View anchor) &#123; if (Build.VERSION.SDK_INT &gt;= 24) &#123; Rect rect = new Rect(); anchor.getGlobalVisibleRect(rect); int h = anchor.getResources().getDisplayMetrics().heightPixels - rect.bottom; setHeight(h); &#125; super.showAsDropDown(anchor); &#125;&#125; 仍存在兼容性问题虽然官方在25版本修复了该问题；但是部分国产机的25版本并未修复该问题；因此此方法并不通用； 终极解决方案 设置高度为WRAP_CONTENT； layout中在anchor的下方覆盖一层半透明的View，默认GONE。 12345678910popupWindow.setOnDismissListener(new PopupWindow.OnDismissListener() &#123; @Override public void onDismiss() &#123; //隐藏遮罩 viewMask.setVisibility(View.GONE); &#125;&#125;);//显示遮罩viewMask.setVisibility(View.VISIBLE);popupWindow.showAsDropDown(lineAnchor); 哈哈哈，在经过一番折腾后突然出现了这么个想法，关键是效果还不错！","categories":[{"name":"Android疑难杂症","slug":"Android疑难杂症","permalink":"http://zhouzhuo810.github.io/categories/Android%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"Android常用代码-EditText各种样式背景","slug":"Android常用代码-EditText各种样式背景","date":"2018-02-08T11:05:40.000Z","updated":"2024-06-13T11:58:36.766Z","comments":true,"path":"2018/02/08/Android常用代码-EditText各种样式背景/","permalink":"http://zhouzhuo810.github.io/2018/02/08/Android%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81-EditText%E5%90%84%E7%A7%8D%E6%A0%B7%E5%BC%8F%E8%83%8C%E6%99%AF/","excerpt":"底部变色直线12345678910111213141516171819202122232425262728293031&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;selector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt; &lt;item android:bottom=&quot;1px&quot; android:state_focused=&quot;true&quot;&gt; &lt;layer-list&gt; &lt;item&gt; &lt;shape&gt; &lt;solid android:color=&quot;@color/colorPrimary&quot; /&gt; &lt;/shape&gt; &lt;/item&gt; &lt;item android:bottom=&quot;1px&quot;&gt; &lt;shape&gt; &lt;solid android:color=&quot;@android:color/white&quot; /&gt; &lt;/shape&gt; &lt;/item&gt; &lt;/layer-list&gt; &lt;/item&gt; &lt;item android:bottom=&quot;1px&quot; android:state_pressed=&quot;false&quot;&gt; &lt;layer-list&gt; &lt;item&gt; &lt;shape&gt; &lt;solid android:color=&quot;#ddd&quot; /&gt; &lt;/shape&gt; &lt;/item&gt; &lt;item android:bottom=&quot;1px&quot;&gt; &lt;shape&gt; &lt;solid android:color=&quot;@android:color/white&quot; /&gt; &lt;/shape&gt; &lt;/item&gt; &lt;/layer-list&gt; &lt;/item&gt;&lt;/selector&gt;","text":"底部变色直线12345678910111213141516171819202122232425262728293031&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;selector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt; &lt;item android:bottom=&quot;1px&quot; android:state_focused=&quot;true&quot;&gt; &lt;layer-list&gt; &lt;item&gt; &lt;shape&gt; &lt;solid android:color=&quot;@color/colorPrimary&quot; /&gt; &lt;/shape&gt; &lt;/item&gt; &lt;item android:bottom=&quot;1px&quot;&gt; &lt;shape&gt; &lt;solid android:color=&quot;@android:color/white&quot; /&gt; &lt;/shape&gt; &lt;/item&gt; &lt;/layer-list&gt; &lt;/item&gt; &lt;item android:bottom=&quot;1px&quot; android:state_pressed=&quot;false&quot;&gt; &lt;layer-list&gt; &lt;item&gt; &lt;shape&gt; &lt;solid android:color=&quot;#ddd&quot; /&gt; &lt;/shape&gt; &lt;/item&gt; &lt;item android:bottom=&quot;1px&quot;&gt; &lt;shape&gt; &lt;solid android:color=&quot;@android:color/white&quot; /&gt; &lt;/shape&gt; &lt;/item&gt; &lt;/layer-list&gt; &lt;/item&gt;&lt;/selector&gt; 圆角变色边框(调大radius大小可实现全圆角)1234567891011121314151617&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;selector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt; &lt;item android:state_focused=&quot;true&quot;&gt; &lt;shape android:shape=&quot;rectangle&quot;&gt; &lt;corners android:radius=&quot;4dp&quot; /&gt; &lt;solid android:color=&quot;@color/colorWhite&quot; /&gt; &lt;stroke android:width=&quot;1px&quot; android:color=&quot;@color/colorMain&quot; /&gt; &lt;/shape&gt; &lt;/item&gt; &lt;item android:state_focused=&quot;false&quot;&gt; &lt;shape android:shape=&quot;rectangle&quot;&gt; &lt;corners android:radius=&quot;4dp&quot; /&gt; &lt;solid android:color=&quot;@color/colorWhite&quot; /&gt; &lt;stroke android:width=&quot;1px&quot; android:color=&quot;@color/colorTransparent&quot; /&gt; &lt;/shape&gt; &lt;/item&gt;&lt;/selector&gt; 虚线半圆圆角边框1234567891011121314151617&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;selector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt; &lt;item android:state_pressed=&quot;true&quot;&gt; &lt;shape android:shape=&quot;rectangle&quot;&gt; &lt;corners android:radius=&quot;100dp&quot; /&gt; &lt;solid android:color=&quot;@color/colorMain&quot; /&gt; &lt;stroke android:width=&quot;1dp&quot; android:color=&quot;@color/colorGrayB&quot; android:dashGap=&quot;2dp&quot; android:dashWidth=&quot;3dp&quot;/&gt; &lt;/shape&gt; &lt;/item&gt; &lt;item android:state_pressed=&quot;false&quot;&gt; &lt;shape android:shape=&quot;rectangle&quot;&gt; &lt;corners android:radius=&quot;100dp&quot; /&gt; &lt;solid android:color=&quot;@color/colorWhite&quot; /&gt; &lt;stroke android:width=&quot;1dp&quot; android:color=&quot;@color/colorGrayB&quot; android:dashGap=&quot;2dp&quot; android:dashWidth=&quot;3dp&quot;/&gt; &lt;/shape&gt; &lt;/item&gt;&lt;/selector&gt; 直角变色边框123456789101112131415&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;selector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt; &lt;item android:state_focused=&quot;true&quot;&gt; &lt;shape android:shape=&quot;rectangle&quot;&gt; &lt;solid android:color=&quot;@color/colorWhite&quot; /&gt; &lt;stroke android:width=&quot;1px&quot; android:color=&quot;@color/colorMain&quot; /&gt; &lt;/shape&gt; &lt;/item&gt; &lt;item android:state_focused=&quot;false&quot;&gt; &lt;shape android:shape=&quot;rectangle&quot;&gt; &lt;solid android:color=&quot;@color/colorWhite&quot; /&gt; &lt;stroke android:width=&quot;1px&quot; android:color=&quot;#eee&quot; /&gt; &lt;/shape&gt; &lt;/item&gt;&lt;/selector&gt;","categories":[{"name":"Android常用代码","slug":"Android常用代码","permalink":"http://zhouzhuo810.github.io/categories/Android%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"Android常用代码-发送验证码倒计时","slug":"Android常用代码-发送验证码倒计时","date":"2018-02-08T06:50:31.000Z","updated":"2024-06-13T11:58:36.766Z","comments":true,"path":"2018/02/08/Android常用代码-发送验证码倒计时/","permalink":"http://zhouzhuo810.github.io/2018/02/08/Android%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81-%E5%8F%91%E9%80%81%E9%AA%8C%E8%AF%81%E7%A0%81%E5%80%92%E8%AE%A1%E6%97%B6/","excerpt":"使用RxJava优雅的实现12345678910111213141516171819202122232425262728293031323334353637383940btnVerifyCode.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; btnVerifyCode.setEnabled(false); Observable.interval(0, 1, TimeUnit.SECONDS) .observeOn(AndroidSchedulers.mainThread()) .subscribeOn(AndroidSchedulers.mainThread()) .limit(31) .map(new Func1&lt;Long, Long&gt;() &#123; @Override public Long call(Long aLong) &#123; return 30 - aLong; &#125; &#125;) .doOnSubscribe(new Action0() &#123; @Override public void call() &#123; btnVerifyCode.setEnabled(false); &#125; &#125;) .doOnCompleted(new Action0() &#123; @Override public void call() &#123; btnVerifyCode.setEnabled(true); btnVerifyCode.setText(&quot;重新发送&quot;); &#125; &#125;) .subscribe(new Action1&lt;Long&gt;() &#123; @Override public void call(Long aLong) &#123; btnVerifyCode.setText(&quot;重新发送（&quot;+aLong + &quot; s ）&quot;); &#125; &#125;, new Action1&lt;Throwable&gt;() &#123; @Override public void call(Throwable throwable) &#123; ToastUtils.showCustomBgToast(&quot;获取失败，错误信息：&quot; + throwable.getMessage() + &quot;&quot;); &#125; &#125;); &#125;&#125;);","text":"使用RxJava优雅的实现12345678910111213141516171819202122232425262728293031323334353637383940btnVerifyCode.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; btnVerifyCode.setEnabled(false); Observable.interval(0, 1, TimeUnit.SECONDS) .observeOn(AndroidSchedulers.mainThread()) .subscribeOn(AndroidSchedulers.mainThread()) .limit(31) .map(new Func1&lt;Long, Long&gt;() &#123; @Override public Long call(Long aLong) &#123; return 30 - aLong; &#125; &#125;) .doOnSubscribe(new Action0() &#123; @Override public void call() &#123; btnVerifyCode.setEnabled(false); &#125; &#125;) .doOnCompleted(new Action0() &#123; @Override public void call() &#123; btnVerifyCode.setEnabled(true); btnVerifyCode.setText(&quot;重新发送&quot;); &#125; &#125;) .subscribe(new Action1&lt;Long&gt;() &#123; @Override public void call(Long aLong) &#123; btnVerifyCode.setText(&quot;重新发送（&quot;+aLong + &quot; s ）&quot;); &#125; &#125;, new Action1&lt;Throwable&gt;() &#123; @Override public void call(Throwable throwable) &#123; ToastUtils.showCustomBgToast(&quot;获取失败，错误信息：&quot; + throwable.getMessage() + &quot;&quot;); &#125; &#125;); &#125;&#125;); 布局示例123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&lt;FrameLayout android:id=&quot;@+id/ll_verify_code&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginTop=&quot;70px&quot; android:orientation=&quot;horizontal&quot;&gt; &lt;EditText android:id=&quot;@+id/et_verify_Code&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;108px&quot; android:background=&quot;@drawable/et_bg_line&quot; android:hint=&quot;@string/et_hint_code&quot; android:paddingLeft=&quot;100px&quot; android:paddingRight=&quot;280px&quot; android:textColor=&quot;@color/colorBlack&quot; android:textColorHint=&quot;#999&quot; android:textSize=&quot;36px&quot; /&gt; &lt;ImageView android:layout_width=&quot;50px&quot; android:layout_height=&quot;50px&quot; android:layout_gravity=&quot;center_vertical&quot; android:layout_marginLeft=&quot;20px&quot; android:src=&quot;@drawable/verification&quot; app:layout_auto_baseheight=&quot;width&quot; /&gt; &lt;ImageView android:id=&quot;@+id/iv_clear_verify_code&quot; android:layout_width=&quot;40px&quot; android:layout_height=&quot;40px&quot; android:layout_gravity=&quot;right|center_vertical&quot; android:layout_marginRight=&quot;320px&quot; android:src=&quot;@drawable/undo&quot; android:visibility=&quot;gone&quot; /&gt; &lt;Button android:id=&quot;@+id/btn_verify_code&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;78px&quot; style=&quot;?borderlessButtonStyle&quot; android:layout_gravity=&quot;center_vertical|right&quot; android:background=&quot;@drawable/full_round_shape_white_with_gray_border&quot; android:gravity=&quot;center&quot; android:paddingLeft=&quot;30px&quot; android:paddingRight=&quot;30px&quot; android:text=&quot;@string/get_code&quot; android:textColor=&quot;@color/btn_code_color_selector&quot; android:textSize=&quot;30px&quot; /&gt; &lt;/FrameLayout&gt;","categories":[{"name":"Android常用代码","slug":"Android常用代码","permalink":"http://zhouzhuo810.github.io/categories/Android%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"Android常用代码-时间轴布局","slug":"Android常用代码-时间轴布局","date":"2018-02-05T06:50:31.000Z","updated":"2024-06-13T11:58:36.766Z","comments":true,"path":"2018/02/05/Android常用代码-时间轴布局/","permalink":"http://zhouzhuo810.github.io/2018/02/05/Android%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81-%E6%97%B6%E9%97%B4%E8%BD%B4%E5%B8%83%E5%B1%80/","excerpt":"时间轴特征 某人 某个时间 做了某个事情 效果图 圆点背景12345&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:shape=&quot;oval&quot;&gt; &lt;solid android:color=&quot;#61b4fe&quot; /&gt;&lt;/shape&gt;","text":"时间轴特征 某人 某个时间 做了某个事情 效果图 圆点背景12345&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:shape=&quot;oval&quot;&gt; &lt;solid android:color=&quot;#61b4fe&quot; /&gt;&lt;/shape&gt; 布局代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:background=&quot;@color/colorWhite&quot;&gt; &lt;LinearLayout android:layout_width=&quot;216px&quot; android:layout_height=&quot;wrap_content&quot; android:gravity=&quot;center&quot; android:orientation=&quot;vertical&quot;&gt; &lt;TextView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginTop=&quot;70px&quot; android:text=&quot;13:52&quot; android:textColor=&quot;#666&quot; android:textSize=&quot;36px&quot; /&gt; &lt;TextView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginTop=&quot;14px&quot; android:text=&quot;01-12&quot; android:textColor=&quot;#999&quot; android:textSize=&quot;31px&quot; /&gt; &lt;/LinearLayout&gt; &lt;LinearLayout android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;match_parent&quot; android:gravity=&quot;center_horizontal&quot; android:orientation=&quot;vertical&quot;&gt; &lt;View android:layout_width=&quot;1px&quot; android:layout_height=&quot;0dp&quot; android:layout_marginBottom=&quot;5px&quot; android:layout_weight=&quot;1&quot; android:background=&quot;#e5e5e5&quot; /&gt; &lt;View android:id=&quot;@+id/point_state&quot; android:layout_width=&quot;30px&quot; android:layout_height=&quot;30px&quot; android:layout_centerInParent=&quot;true&quot; android:background=&quot;@drawable/point_time_line_first&quot; app:layout_auto_baseheight=&quot;width&quot; /&gt; &lt;View android:layout_width=&quot;1px&quot; android:layout_height=&quot;0dp&quot; android:layout_marginTop=&quot;5px&quot; android:layout_weight=&quot;1&quot; android:background=&quot;#e5e5e5&quot; /&gt; &lt;/LinearLayout&gt; &lt;LinearLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginLeft=&quot;40px&quot; android:orientation=&quot;vertical&quot;&gt; &lt;LinearLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginTop=&quot;40px&quot; android:gravity=&quot;center_vertical&quot; android:orientation=&quot;horizontal&quot;&gt; &lt;TextView android:id=&quot;@+id/tv_person&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginLeft=&quot;10px&quot; android:text=&quot;王五&quot; android:textColor=&quot;#666&quot; android:textSize=&quot;36px&quot; /&gt; &lt;TextView android:id=&quot;@+id/tv_time_before&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginLeft=&quot;50px&quot; android:text=&quot;10分钟前&quot; android:textColor=&quot;#999&quot; android:textSize=&quot;31px&quot; /&gt; &lt;/LinearLayout&gt; &lt;TextView android:id=&quot;@+id/tv_content&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginBottom=&quot;40px&quot; android:layout_marginRight=&quot;60px&quot; android:layout_marginTop=&quot;26px&quot; android:text=&quot;进行了首件确认进行了首件确认进行了首件确认进行了首件确认进行了首件确认&quot; android:textColor=&quot;#333&quot; android:textSize=&quot;36px&quot; /&gt; &lt;/LinearLayout&gt;&lt;/LinearLayout&gt;","categories":[{"name":"Android常用代码","slug":"Android常用代码","permalink":"http://zhouzhuo810.github.io/categories/Android%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"前端-Web移动端适配值rem和sass","slug":"前端-Web移动端适配值rem和sass","date":"2018-02-02T07:18:49.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"2018/02/02/前端-Web移动端适配值rem和sass/","permalink":"http://zhouzhuo810.github.io/2018/02/02/%E5%89%8D%E7%AB%AF-Web%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D%E5%80%BCrem%E5%92%8Csass/","excerpt":"安装node.jshttps://nodejs.org/en/ 安装node-sass1npm install node-sass -g 安装webpack1npm install webpack -g 安装sass-loader1npm install sass-loader -g 配置环境变量123Path追加(安装路径)例如：C:\\Users\\admin\\AppData\\Roaming\\npm","text":"安装node.jshttps://nodejs.org/en/ 安装node-sass1npm install node-sass -g 安装webpack1npm install webpack -g 安装sass-loader1npm install sass-loader -g 配置环境变量123Path追加(安装路径)例如：C:\\Users\\admin\\AppData\\Roaming\\npm 项目目录下安装 创建package.json 1234567891011121314151617181920212223242526&#123; &quot;name&quot;: &quot;TestApp&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;description&quot;: &quot;&quot;, &quot;main&quot;: &quot;index.js&quot;, &quot;scripts&quot;: &#123; &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot; &#125;, &quot;author&quot;: &quot;zhouzhuo810&quot;, &quot;license&quot;: &quot;ISC&quot;, &quot;dependencies&quot;: &#123; &quot;css-loader&quot;: &quot;^0.28.7&quot;, &quot;node-sass&quot;: &quot;^4.7.2&quot;, &quot;sass-loader&quot;: &quot;^6.0.6&quot;, &quot;style-loader&quot;: &quot;^0.19.0&quot;, &quot;url-loader&quot;: &quot;^0.6.2&quot;, &quot;webpack&quot;: &quot;^3.8.1&quot; &#125;, &quot;devDependencies&quot;: &#123; &quot;css-loader&quot;: &quot;^0.28.9&quot;, &quot;node-sass&quot;: &quot;^4.7.2&quot;, &quot;sass-loader&quot;: &quot;^6.0.6&quot;, &quot;style-loader&quot;: &quot;^0.19.1&quot;, &quot;webpack&quot;: &quot;^3.10.0&quot; &#125;&#125; 项目下执行命令 1npm install sass-loader node-sass webpack css-loader style-loader url-loader --save-dev sass基本用法 嵌套 Sass允许嵌套规则，使CSS更易于维护。 &amp; Sass 提供了 &amp; 用于引用父选择器。 @import Sass 的 @import 指令用于导入其他样式模块。 运算 Sass 支持对数字标准的算术运算(加法 +，减法 - ，乘法 *，除法 &#x2F; 和取模 %) 并保留单位。 注释 单行注释 &#x2F;&#x2F; 会在 .scss 被编译成 .css 后移除。多行注释 &#x2F;* *&#x2F; 会在 .scss 被编译成 .css 后保留。 编译 假设项目目录下有 css 和 scss 文件夹，运行以下命令会持续观察文件变化并即时编译。 1node-sass -wro css scss 在终端按 Control + C 停止编译。 webpack基本用法&#x2F;&#x2F;webpack.config.js 123456789101112131415161718var webpack = require(&#x27;webpack&#x27;);var path = require(&#x27;path&#x27;);module.exports=&#123; entry: [ &#x27;./app.js&#x27; ], output:&#123; path: path.resolve(__dirname, &#x27;./build&#x27;), filename: &#x27;bundle.js&#x27; &#125;, module: &#123; loaders: [ &#123; test: /\\.css$/, loader: &#x27;style-loader!css-loader&#x27;&#125;, &#123; test: /\\.scss$/, loader: &#x27;style-loader!css-loader!sass-loader&#x27;&#125;, &#123; test: /\\.(png|jpg)$/, loader: &#x27;url-loader?limit=8192&#x27;&#125; ] &#125;&#125; 执行命令 1webpack --watch rem单位的说明 rem是一个单位，可以代替px。 11 rem = html[0].style.fontSize px; 当不设置font-size时，默认的font-size为第一个html元素的font-size，用js动态设置第一个html元素的font-size属性即可动态改变rem对应的px大小。 reset.css123456789101112131415161718192021222324252627282930313233343536373839404142434445464748/* http://meyerweb.com/eric/tools/css/reset/ v2.0 | 20110126 License: none (public domain)*/ html, body, div, span, applet, object, iframe,h1, h2, h3, h4, h5, h6, p, blockquote, pre,a, abbr, acronym, address, big, cite, code,del, dfn, em, img, ins, kbd, q, s, samp,small, strike, strong, sub, sup, tt, var,b, u, i, center,dl, dt, dd, ol, ul, li,fieldset, form, label, legend,table, caption, tbody, tfoot, thead, tr, th, td,article, aside, canvas, details, embed,figure, figcaption, footer, header, hgroup,menu, nav, output, ruby, section, summary,time, mark, audio, video &#123; margin: 0; padding: 0; border: 0; font-size: 100%; font: inherit; vertical-align: baseline;&#125;/* HTML5 display-role reset for older browsers */article, aside, details, figcaption, figure,footer, header, hgroup, menu, nav, section &#123; display: block;&#125;body &#123; line-height: 1;&#125;ol, ul &#123; list-style: none;&#125;blockquote, q &#123; quotes: none;&#125;blockquote:before, blockquote:after,q:before, q:after &#123; content: &#x27;&#x27;; content: none;&#125;table &#123; border-collapse: collapse; border-spacing: 0;&#125; index.scss12345678910@function px2rem($px) &#123; $rem: 37.5px; @return ($px / $rem) + rem;&#125; .header &#123; height: px2rem(40px); width: 100%; background-color: red;&#125; app.js1234567891011121314151617require(&#x27;./index.scss&#x27;); //窗口宽度let htmlWidth = document.documentElement.clientWidth || document.body.clientWidth; //html根元素let htmlDom = document.getElementsByTagName(&#x27;html&#x27;)[0]; //设置html根元素的font-sizehtmlDom.style.fontSize = htmlWidth / 10 + &#x27;px&#x27;; //监听窗口大小变化，动态缩放window.addEventListener(&#x27;resize&#x27;, (e) =&gt; &#123; let htmlWidth = document.documentElement.clientWidth || document.body.clientWidth; //设置根元素html的font-size即1 rem，为屏幕宽度的1/10 htmlDom.style.fontSize = htmlWidth / 10 + &#x27;px&#x27;;&#125;); index.html123456789101112131415&lt;!DOCTYPE html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initail-scale=1,maximum-scale=1,minimum-scale=1,user-scalable=no&quot;&gt; &lt;title&gt;测试&lt;/title&gt; &lt;link ref=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;./reset.css&quot;/&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;header&quot;&gt; 测试头部 &lt;/div&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;./build/bundle.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 测试1webpack --watch 注意点12345div &#123; width:100%; padding-left:20px; padding-right:20px;&#125; 100%宽度时，如果有左右内边距，会在使移动端界面产生左右滑动； 需要添加： 12345div &#123; box-sizing:border-box; -moz-box-sizing:border-box; /* Firefox */ -webkit-box-sizing:border-box; /* Safari */&#125; 使为元素指定的任何内边距和边框都将在已设定的宽度和高度内进行绘制。","categories":[{"name":"网页前端","slug":"网页前端","permalink":"http://zhouzhuo810.github.io/categories/%E7%BD%91%E9%A1%B5%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"网页前端","slug":"网页前端","permalink":"http://zhouzhuo810.github.io/tags/%E7%BD%91%E9%A1%B5%E5%89%8D%E7%AB%AF/"}]},{"title":"Android常用代码-底部弹出PopupWindow","slug":"Android常用代码-底部弹出PopupWindow","date":"2018-01-30T06:35:15.000Z","updated":"2024-06-13T11:58:36.766Z","comments":true,"path":"2018/01/30/Android常用代码-底部弹出PopupWindow/","permalink":"http://zhouzhuo810.github.io/2018/01/30/Android%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81-%E5%BA%95%E9%83%A8%E5%BC%B9%E5%87%BAPopupWindow/","excerpt":"关键代码1234567891011121314151617181920212223242526272829303132333435/** * 显示自定义底部弹出PopupWindow * * @param parent 传根布局就好了 * @param contentView PopupWindow内容 * @param bgColor 背景颜色(窗体变暗效果) * @param focusable 是否点击空白区域取消(非全屏时可以)和返回键关闭 * @param fullScreen 是否全屏 * @param onDismissListener 取消监听 */public void showBottomPopupWindow(View parent, View contentView, int bgColor, boolean focusable, boolean fullScreen, PopupWindow.OnDismissListener onDismissListener) &#123; hideBottomDialog(); AutoUtils.auto(contentView); popupWindow = new PopupWindow(ViewGroup.LayoutParams.MATCH_PARENT, fullScreen ? ViewGroup.LayoutParams.MATCH_PARENT : ViewGroup.LayoutParams.WRAP_CONTENT); popupWindow.setContentView(contentView); // 设置弹出窗体可点击 popupWindow.setFocusable(focusable); // 设置弹出窗体的背景 popupWindow.setBackgroundDrawable(new ColorDrawable(bgColor)); if (onDismissListener != null) &#123; popupWindow.setOnDismissListener(onDismissListener); &#125; //设置弹出窗体显示时的动画，从底部向上弹出 popupWindow.setAnimationStyle(R.style.ZzAnimationDialog); popupWindow.showAtLocation(parent, Gravity.BOTTOM | Gravity.CENTER_HORIZONTAL, 0, 0);&#125;/** * 隐藏自定义底部弹出PopupWindow */public void hideBottomDialog() &#123; if (popupWindow != null) &#123; popupWindow.dismiss(); popupWindow = null; &#125;&#125;","text":"关键代码1234567891011121314151617181920212223242526272829303132333435/** * 显示自定义底部弹出PopupWindow * * @param parent 传根布局就好了 * @param contentView PopupWindow内容 * @param bgColor 背景颜色(窗体变暗效果) * @param focusable 是否点击空白区域取消(非全屏时可以)和返回键关闭 * @param fullScreen 是否全屏 * @param onDismissListener 取消监听 */public void showBottomPopupWindow(View parent, View contentView, int bgColor, boolean focusable, boolean fullScreen, PopupWindow.OnDismissListener onDismissListener) &#123; hideBottomDialog(); AutoUtils.auto(contentView); popupWindow = new PopupWindow(ViewGroup.LayoutParams.MATCH_PARENT, fullScreen ? ViewGroup.LayoutParams.MATCH_PARENT : ViewGroup.LayoutParams.WRAP_CONTENT); popupWindow.setContentView(contentView); // 设置弹出窗体可点击 popupWindow.setFocusable(focusable); // 设置弹出窗体的背景 popupWindow.setBackgroundDrawable(new ColorDrawable(bgColor)); if (onDismissListener != null) &#123; popupWindow.setOnDismissListener(onDismissListener); &#125; //设置弹出窗体显示时的动画，从底部向上弹出 popupWindow.setAnimationStyle(R.style.ZzAnimationDialog); popupWindow.showAtLocation(parent, Gravity.BOTTOM | Gravity.CENTER_HORIZONTAL, 0, 0);&#125;/** * 隐藏自定义底部弹出PopupWindow */public void hideBottomDialog() &#123; if (popupWindow != null) &#123; popupWindow.dismiss(); popupWindow = null; &#125;&#125; 动画文件 bottom_dialog_enter.xml 123456789101112&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:interpolator=&quot;@android:anim/decelerate_interpolator&quot;&gt; &lt;translate android:duration=&quot;400&quot; android:fromYDelta=&quot;100%p&quot; android:toYDelta=&quot;0&quot; /&gt; &lt;alpha android:duration=&quot;400&quot; android:fromAlpha=&quot;0.0&quot; android:toAlpha=&quot;1.0&quot; /&gt;&lt;/set&gt; bottom_dialog_exit.xml 123456789101112&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:interpolator=&quot;@android:anim/accelerate_interpolator&quot;&gt; &lt;translate android:duration=&quot;300&quot; android:fromYDelta=&quot;0&quot; android:toYDelta=&quot;100%p&quot; /&gt; &lt;alpha android:duration=&quot;300&quot; android:fromAlpha=&quot;1.0&quot; android:toAlpha=&quot;0.0&quot; /&gt;&lt;/set&gt; 样式文件1234&lt;style name=&quot;ZzAnimationDialog&quot;&gt; &lt;item name=&quot;android:windowEnterAnimation&quot;&gt;@anim/bottom_dialog_enter&lt;/item&gt; &lt;item name=&quot;android:windowExitAnimation&quot;&gt;@anim/bottom_dialog_exit&lt;/item&gt;&lt;/style&gt; 使用示例1234567891011121314View root = LayoutInflater.from(mContext).inflate(R.layout.dialog_login_more, null);ImageView ivClose = (ImageView) root.findViewById(R.id.iv_close);ivClose.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; hideBottomDialog(); &#125;&#125;);showBottomPopupWindow(findViewById(R.id.root), root, Color.TRANSPARENT, true, false, new PopupWindow.OnDismissListener() &#123; @Override public void onDismiss() &#123; &#125;&#125;);","categories":[{"name":"Android常用代码","slug":"Android常用代码","permalink":"http://zhouzhuo810.github.io/categories/Android%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"iOS-Github常用控件收藏","slug":"iOS-Github常用控件收藏","date":"2018-01-26T13:34:43.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"2018/01/26/iOS-Github常用控件收藏/","permalink":"http://zhouzhuo810.github.io/2018/01/26/iOS-Github%E5%B8%B8%E7%94%A8%E6%8E%A7%E4%BB%B6%E6%94%B6%E8%97%8F/","excerpt":"不求多，但求精。 一、特殊需求多层列表https://github.com/Augustyniak/RATreeView","text":"不求多，但求精。 一、特殊需求多层列表https://github.com/Augustyniak/RATreeView 二、UI控件下拉刷新https://github.com/CoderMJLee/MJRefresh https://github.com/samvermette/SVPullToRefresh 菜单https://github.com/romaonthego/RESideMenu 角标https://github.com/cwRichardKim/RKNotificationHub https://github.com/JaviSoto/JSBadgeView 顶部弹窗https://github.com/cruffenach/CRToast 顶部菜单https://github.com/xmartlabs/XLPagerTabStrip 底部菜单(Tab)https://github.com/Ramotion/animated-tab-bar 轮播控件https://github.com/gsdios/SDCycleScrollView 图表控件https://github.com/danielgindi/Charts 日历控件https://github.com/jonathantribouharet/JTCalendar https://github.com/WenchaoD/FSCalendar https://github.com/patchthecode/JTAppleCalendar 一套控件https://github.com/Grouper/FlatUIKit 消息视图https://github.com/jessesquires/JSQMessagesViewController 进度提示https://github.com/jdg/MBProgressHUD https://github.com/danielamitay/DACircularProgress 星级评定条https://github.com/erndev/EDStarRating 侧滑菜单https://github.com/ViewDeck/ViewDeck 分段控件(Segment)https://github.com/samvermette/SVSegmentedControl https://github.com/u10int/URBSegmentedControl https://github.com/HeshamMegid/HMSegmentedControl 开关https://github.com/twotoasters/TTSwitch 三、网络相关图片缓存及加载https://github.com/rs/SDWebImage HTTP网络框架https://github.com/AFNetworking/AFNetworking JSON解析(第三方)https://github.com/johnezang/JSONKit 字典与模型转换https://github.com/CoderMJLee/MJExtension 四、数据库https://github.com/ccgus/fmdb 五、动画效果波动效果https://github.com/inFullMobile/WobbleView 跑马灯https://github.com/cbpowell/MarqueeLabel 六、图片、视频处理https://github.com/BradLarson/GPUImage 七、二维码相关二维码生成和解析https://github.com/TheLevelUp/ZXingObjC","categories":[{"name":"iOS","slug":"iOS","permalink":"http://zhouzhuo810.github.io/categories/iOS/"}],"tags":[{"name":"iOS","slug":"iOS","permalink":"http://zhouzhuo810.github.io/tags/iOS/"}]},{"title":"PhotoShop-图片太宽或太高切除中间部分","slug":"PhotoShop-图片太宽或太高切除中间部分","date":"2018-01-26T01:20:11.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"2018/01/26/PhotoShop-图片太宽或太高切除中间部分/","permalink":"http://zhouzhuo810.github.io/2018/01/26/PhotoShop-%E5%9B%BE%E7%89%87%E5%A4%AA%E5%AE%BD%E6%88%96%E5%A4%AA%E9%AB%98%E5%88%87%E9%99%A4%E4%B8%AD%E9%97%B4%E9%83%A8%E5%88%86/","excerpt":"","text":"操作步骤 矩形选框，选中头部，ctrl+j 矩形选框，选中尾部，ctrl+j 移动尾部(用键盘移动，按shift可以加速)，拼接到头部。 合并头部和尾部(ctrl+e)。","categories":[{"name":"PhotoShop","slug":"PhotoShop","permalink":"http://zhouzhuo810.github.io/categories/PhotoShop/"}],"tags":[{"name":"PhotoShop","slug":"PhotoShop","permalink":"http://zhouzhuo810.github.io/tags/PhotoShop/"}]},{"title":"前端-JQuery学习笔记","slug":"前端-JQuery学习笔记","date":"2018-01-25T07:18:49.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"2018/01/25/前端-JQuery学习笔记/","permalink":"http://zhouzhuo810.github.io/2018/01/25/%E5%89%8D%E7%AB%AF-JQuery%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","excerpt":"常见问题checkbox类型的input的取值、赋值和监听插件推荐：https://github.com/flatlogic/awesome-bootstrap-checkbox 1234567//全选逻辑 $(&quot;#checkbox-all&quot;).change(function () &#123; //是否选中 var isCheck = $(this).is(&#x27;:checked&#x27;); //jquery1.6之后使用.prop而不是.attr来选中或取消选中 $(&quot;.checkbox-child&quot;).prop(&quot;checked&quot;, isCheck); &#125;);","text":"常见问题checkbox类型的input的取值、赋值和监听插件推荐：https://github.com/flatlogic/awesome-bootstrap-checkbox 1234567//全选逻辑 $(&quot;#checkbox-all&quot;).change(function () &#123; //是否选中 var isCheck = $(this).is(&#x27;:checked&#x27;); //jquery1.6之后使用.prop而不是.attr来选中或取消选中 $(&quot;.checkbox-child&quot;).prop(&quot;checked&quot;, isCheck); &#125;); 表格添加id隐藏列1class=&quot;checkbox-child data-id hide&quot; 表格获取选中行的id1234567891011121314151617181920212223242526272829303132/*获取选中的行数*/function getChooseRowsCount() &#123; var count = 0; var trs = $(&quot;#project-list&quot;).find(&quot;tr&quot;); for (var i = 0; i &lt; trs.length; i++) &#123; var row = trs.eq(i); var cb = row.find(&quot;:checkbox&quot;); var isCheck = cb.is(&#x27;:checked&#x27;); if (isCheck) &#123; count++; &#125; &#125; return count;&#125;/*获取选中行的数据库id，多个用逗号隔开*/function getChooseRowsDbIds() &#123; var ids = &quot;&quot;; var trs = $(&quot;#project-list&quot;).find(&quot;tr&quot;); for (var i = 0; i &lt; trs.length; i++) &#123; var row = trs.eq(i); var cb = row.find(&quot;:checkbox&quot;); var isCheck = cb.is(&#x27;:checked&#x27;); if (isCheck) &#123; var colDbId = row.find(&quot;td.data-id&quot;); ids += colDbId.text(); if (i &lt; getChooseRowsCount() - 1) &#123; ids += &quot;,&quot;; &#125; &#125; &#125; return ids;&#125; twbsPagination页码不刷新问题相关插件：https://github.com/esimakin/twbs-pagination 123456789101112131415//先销毁，保证总页码动态$(&quot;#page-indicator&quot;).twbsPagination(&quot;destroy&quot;);//分页绑定$(&#x27;#page-indicator&#x27;).twbsPagination(&#123; totalPages: data.totalPage, visiblePages: 10, onPageClick: function (event, page) &#123; //全选取消 $(&quot;#checkbox-all&quot;).prop(&quot;checked&quot;, false); //重载数据 var mid = localStorage.getItem(&quot;userId&quot;); //回调里面不要再调用销毁和绑定方法，否则死循环。 justUpdateList(mid, page); &#125;&#125;);","categories":[{"name":"网页前端","slug":"网页前端","permalink":"http://zhouzhuo810.github.io/categories/%E7%BD%91%E9%A1%B5%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"网页前端","slug":"网页前端","permalink":"http://zhouzhuo810.github.io/tags/%E7%BD%91%E9%A1%B5%E5%89%8D%E7%AB%AF/"}]},{"title":"小常识-火车票抢票技巧","slug":"小常识-火车票抢票技巧","date":"2018-01-25T07:17:51.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"2018/01/25/小常识-火车票抢票技巧/","permalink":"http://zhouzhuo810.github.io/2018/01/25/%E5%B0%8F%E5%B8%B8%E8%AF%86-%E7%81%AB%E8%BD%A6%E7%A5%A8%E6%8A%A2%E7%A5%A8%E6%8A%80%E5%B7%A7/","excerpt":"工具 Windows 7&#x2F;8&#x2F;10 12306ByPass http://www.12306bypass.com/ 操作步骤 如果不是VIP，先花20块成为VIP； 选好出发日期； 选好起始地和终点(别选反了) 选好乘客、座次。 选两个最中意的车次(不要多选，否则拖慢抢票速度)。 选择定时抢票(提前1分钟) 修改间隔时间(200ms) 选择QQ通知(登录qq小号，打开qq大号聊天窗口) 选择qq版本，勾选qq电话，点击获取聊天窗口。 点击开始抢票。","text":"工具 Windows 7&#x2F;8&#x2F;10 12306ByPass http://www.12306bypass.com/ 操作步骤 如果不是VIP，先花20块成为VIP； 选好出发日期； 选好起始地和终点(别选反了) 选好乘客、座次。 选两个最中意的车次(不要多选，否则拖慢抢票速度)。 选择定时抢票(提前1分钟) 修改间隔时间(200ms) 选择QQ通知(登录qq小号，打开qq大号聊天窗口) 选择qq版本，勾选qq电话，点击获取聊天窗口。 点击开始抢票。 捡漏 一般情况下黄牛手中有大量的票，如果卖不出就会退掉。 一定范围内一般越临近发车，捡漏成功率越高； 如果发现一辆车商务座和一等座开始多了，说明二等座也不远了，如果觉得该趟车勉强能接受，直接抢该趟车。","categories":[{"name":"常识","slug":"常识","permalink":"http://zhouzhuo810.github.io/categories/%E5%B8%B8%E8%AF%86/"}],"tags":[{"name":"常识","slug":"常识","permalink":"http://zhouzhuo810.github.io/tags/%E5%B8%B8%E8%AF%86/"}]},{"title":"InteliJ IDEA插件开发-StringKiller","slug":"InteliJ-IDEA插件开发-StringKiller","date":"2018-01-23T06:09:18.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"2018/01/23/InteliJ-IDEA插件开发-StringKiller/","permalink":"http://zhouzhuo810.github.io/2018/01/23/InteliJ-IDEA%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91-StringKiller/","excerpt":"Github传送门 StringKiller一个简洁的Android Studio插件。用于一键将layout文件夹中的text字符串资源提取到strings.xml中。 插件下载地址：点这里","text":"Github传送门 StringKiller一个简洁的Android Studio插件。用于一键将layout文件夹中的text字符串资源提取到strings.xml中。 插件下载地址：点这里 应用场景安卓开发过程中，大部分开发者为了偷懒，直接将字符串资源写在布局文件中，这种方式主要有如下缺点： 导入工程中文容易出现乱码； 国际化不利于统一翻译； 修改字符串内容时不能快速定位; 因此，为了解决这一系列问题，本人开发了这个插件。 功能特性 目前支持android:text和android:hint两个属性提取字符串。 支持智能跳过@string&#x2F;xxx. 资源采用【”布局文件名称”+”text”&#x2F;“hint_text”+序号】的命名方式，如【@string&#x2F;activity_main_text_0】代表activity_main.xml文件中第1个android:text字符串资源。 如果strings.xml文件中有内容，新提取的字符串会自动追加在后面，不会覆盖。 默认快捷键：【Alt+3】 示例图片 邮箱12如果有小伙伴对命名方式或功能有什么更好的想法，欢迎提建议。下面是我的邮箱： &#97;&#x64;&#x6d;&#x69;&#x6e;&#64;&#122;&#104;&#x6f;&#117;&#122;&#x68;&#117;&#x6f;&#x38;&#x31;&#48;&#x2e;&#109;&#101; License12345678910111213Copyright © zhouzhuo810 Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);you may not use this file except in compliance with the License.You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, softwaredistributed under the License is distributed on an &quot;AS IS&quot; BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.See the License for the specific language governing permissions andlimitations under the License.","categories":[{"name":"InteliJ IDEA","slug":"InteliJ-IDEA","permalink":"http://zhouzhuo810.github.io/categories/InteliJ-IDEA/"}],"tags":[{"name":"InteliJ IDEA","slug":"InteliJ-IDEA","permalink":"http://zhouzhuo810.github.io/tags/InteliJ-IDEA/"}]},{"title":"小常识-JDK环境变量配置","slug":"小常识-JDK环境变量配置","date":"2018-01-22T01:09:47.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"2018/01/22/小常识-JDK环境变量配置/","permalink":"http://zhouzhuo810.github.io/2018/01/22/%E5%B0%8F%E5%B8%B8%E8%AF%86-JDK%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/","excerpt":"","text":"操作步骤 我的电脑 属性 高级系统设置 环境变量 系统环境变量 新建 1234JAVA_HOME //jdk绝对路径C:\\Program Files\\Java\\jdk1.8.0_60 - 新建 123CLASSPATH .;%JAVA_HOME%\\lib;%JAVA_HOME%\\lib\\tools.jar; - 找到Path环境变量,追加如下内容 1;%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;","categories":[{"name":"常识","slug":"常识","permalink":"http://zhouzhuo810.github.io/categories/%E5%B8%B8%E8%AF%86/"}],"tags":[{"name":"常识","slug":"常识","permalink":"http://zhouzhuo810.github.io/tags/%E5%B8%B8%E8%AF%86/"}]},{"title":"小常识-Android SDK环境变量配置","slug":"小常识-Android-SDK环境变量配置","date":"2018-01-22T01:09:06.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"2018/01/22/小常识-Android-SDK环境变量配置/","permalink":"http://zhouzhuo810.github.io/2018/01/22/%E5%B0%8F%E5%B8%B8%E8%AF%86-Android-SDK%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/","excerpt":"","text":"操作步骤 我的电脑 属性 高级系统设置 环境变量 系统环境变量 新建 1234ANDROID_HOME //sdk绝对路径E:\\Android\\SDK - 找到Path环境变量,追加如下内容 1;%ANDROID_HOME%\\tools;%ANDROID_HOME%\\platform-tools;","categories":[{"name":"常识","slug":"常识","permalink":"http://zhouzhuo810.github.io/categories/%E5%B8%B8%E8%AF%86/"}],"tags":[{"name":"常识","slug":"常识","permalink":"http://zhouzhuo810.github.io/tags/%E5%B8%B8%E8%AF%86/"}]},{"title":"小常识-Android Studio上传library到jitpack并带有中文文档注释","slug":"小常识-Android-Studio上传library到jitpack并带有中文文档注释","date":"2018-01-19T04:23:23.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"2018/01/19/小常识-Android-Studio上传library到jitpack并带有中文文档注释/","permalink":"http://zhouzhuo810.github.io/2018/01/19/%E5%B0%8F%E5%B8%B8%E8%AF%86-Android-Studio%E4%B8%8A%E4%BC%A0library%E5%88%B0jitpack%E5%B9%B6%E5%B8%A6%E6%9C%89%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3%E6%B3%A8%E9%87%8A/","excerpt":"工程的build.gradle中添加1234567891011121314buildscript &#123; repositories &#123; jcenter() &#125; dependencies &#123; classpath &#x27;com.android.tools.build:gradle:2.3.1&#x27; //gradle 2.2+ 使用1.4.1 classpath &#x27;com.github.dcendents:android-maven-gradle-plugin:1.4.1&#x27; // NOTE: Do not place your application dependencies here; they belong // in the individual module build.gradle files &#125;&#125;","text":"工程的build.gradle中添加1234567891011121314buildscript &#123; repositories &#123; jcenter() &#125; dependencies &#123; classpath &#x27;com.android.tools.build:gradle:2.3.1&#x27; //gradle 2.2+ 使用1.4.1 classpath &#x27;com.github.dcendents:android-maven-gradle-plugin:1.4.1&#x27; // NOTE: Do not place your application dependencies here; they belong // in the individual module build.gradle files &#125;&#125; library的build.gradle中添加 顶部添加123apply plugin: &#x27;com.github.dcendents.android-maven&#x27; // 添加这个 group=&#x27;com.github.zhouzhuo810&#x27; // 指定group，com.github.&lt;用户名&gt; 底部添加12345678910111213141516171819202122232425262728// 指定编码tasks.withType(JavaCompile) &#123; options.encoding = &quot;UTF-8&quot;&#125; // 打包源码task sourcesJar(type: Jar) &#123; from android.sourceSets.main.java.srcDirs classifier = &#x27;sources&#x27;&#125; task javadoc(type: Javadoc) &#123; failOnError false source = android.sourceSets.main.java.sourceFiles classpath += project.files(android.getBootClasspath().join(File.pathSeparator)) classpath += configurations.compile&#125; // 制作文档(Javadoc)task javadocJar(type: Jar, dependsOn: javadoc) &#123; classifier = &#x27;javadoc&#x27; from javadoc.destinationDir&#125; artifacts &#123; archives sourcesJar archives javadocJar&#125; 测试一下 打开Android Studio 的Terminal 输入.&#x2F;gradlew install 如果成功就没问题了。 最后分享到githubrelease一个版本即可前往jitpack查看 访问jitpack官网https://jitpack.io 输入github仓库地址搜索 使用方法该页面有说明","categories":[{"name":"常识","slug":"常识","permalink":"http://zhouzhuo810.github.io/categories/%E5%B8%B8%E8%AF%86/"}],"tags":[{"name":"常识","slug":"常识","permalink":"http://zhouzhuo810.github.io/tags/%E5%B8%B8%E8%AF%86/"}]},{"title":"Python-修改hosts文件","slug":"Python-修改hosts文件","date":"2018-01-18T09:32:53.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"2018/01/18/Python-修改hosts文件/","permalink":"http://zhouzhuo810.github.io/2018/01/18/Python-%E4%BF%AE%E6%94%B9hosts%E6%96%87%E4%BB%B6/","excerpt":"准备 Window 7&#x2F;8&#x2F;10 Node.js环境 Python环境 requests插件1pip install requests beautifulsoup4插件1pip install beautifulsoup4","text":"准备 Window 7&#x2F;8&#x2F;10 Node.js环境 Python环境 requests插件1pip install requests beautifulsoup4插件1pip install beautifulsoup4 主要代码12345678910111213141516171819202122232425262728293031323334s = &quot;&quot;&quot;github.comassets-cdn.github.comavatars0.githubusercontent.comavatars1.githubusercontent.comgithub-cloud.s3.amazonaws.comdocumentcloud.github.com help.github.comnodeload.github.comraw.github.comstatus.github.comtraining.github.comgithub.io&quot;&quot;&quot;import requestsfrom bs4 import BeautifulSoup ans = []for i in s.split(): url = &quot;http://ip.chinaz.com/&quot; + i.strip() resp = requests.get(url) soup = BeautifulSoup(resp.text) x = soup.find(class_=&quot;IcpMain02&quot;) x = x.find_all(&quot;span&quot;, class_=&quot;Whwtdhalf&quot;) x = &quot;%s %s&quot; % (x[5].string.strip(), i.strip()) print(x) ans.append(x) hosts = r&quot;C:\\Windows\\System32\\drivers\\etc\\hosts&quot;with open(hosts, &quot;r&quot;) as f: content = [i for i in f.readlines() if i.startswith(&quot;#&quot;)] content.extend(ans)with open(hosts, &quot;w&quot;) as f: f.write(&quot;\\n&quot;.join(content)) 刷新DNS缓存1ipconfig /flushdns","categories":[{"name":"Python","slug":"Python","permalink":"http://zhouzhuo810.github.io/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://zhouzhuo810.github.io/tags/Python/"}]},{"title":"小常识-让服务器通过公网IP连接远程桌面","slug":"小常识-让服务器通过公网IP连接远程桌面","date":"2018-01-12T09:24:45.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"2018/01/12/小常识-让服务器通过公网IP连接远程桌面/","permalink":"http://zhouzhuo810.github.io/2018/01/12/%E5%B0%8F%E5%B8%B8%E8%AF%86-%E8%AE%A9%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%80%9A%E8%BF%87%E5%85%AC%E7%BD%91IP%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2/","excerpt":"","text":"操作步骤 路由器添加端口映射3389 windows用户设置登陆密码 设置自动登陆参考这个 我的电脑-&gt;属性-&gt;远程设置 配置如下：","categories":[{"name":"常识","slug":"常识","permalink":"http://zhouzhuo810.github.io/categories/%E5%B8%B8%E8%AF%86/"}],"tags":[{"name":"常识","slug":"常识","permalink":"http://zhouzhuo810.github.io/tags/%E5%B8%B8%E8%AF%86/"}]},{"title":"小常识-Mac OS修改Conmand和Control互换","slug":"小常识-Mac-OS修改Conmand和Control互换","date":"2018-01-12T05:32:26.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"2018/01/12/小常识-Mac-OS修改Conmand和Control互换/","permalink":"http://zhouzhuo810.github.io/2018/01/12/%E5%B0%8F%E5%B8%B8%E8%AF%86-Mac-OS%E4%BF%AE%E6%94%B9Conmand%E5%92%8CControl%E4%BA%92%E6%8D%A2/","excerpt":"","text":"操作步骤 打开【系统偏好设置】 选择【键盘】，点击【修饰键】 Control键改为Command Conmand键改为Control 点击【好】 好处 Windows操作习惯了，Command使用起来别扭。 复制，粘贴，撤销，剪切，保存等操作更顺手。","categories":[{"name":"常识","slug":"常识","permalink":"http://zhouzhuo810.github.io/categories/%E5%B8%B8%E8%AF%86/"}],"tags":[{"name":"常识","slug":"常识","permalink":"http://zhouzhuo810.github.io/tags/%E5%B8%B8%E8%AF%86/"}]},{"title":"AndroidStudio技巧-多文件替换字符串","slug":"AndroidStudio技巧-多文件替换字符串","date":"2018-01-12T01:30:14.000Z","updated":"2024-06-13T11:58:36.750Z","comments":true,"path":"2018/01/12/AndroidStudio技巧-多文件替换字符串/","permalink":"http://zhouzhuo810.github.io/2018/01/12/AndroidStudio%E6%8A%80%E5%B7%A7-%E5%A4%9A%E6%96%87%E4%BB%B6%E6%9B%BF%E6%8D%A2%E5%AD%97%E7%AC%A6%E4%B8%B2/","excerpt":"","text":"操作 鼠标右键文件夹 选择Replace In Path… 输入Text To Find 输入Replace With 勾选Case sensitive(区分大小写字母) 点击Find，替换完成。 应用场景 复制一个library中的代码到自己包下，一键修改import中的包名；","categories":[{"name":"Android开发工具","slug":"Android开发工具","permalink":"http://zhouzhuo810.github.io/categories/Android%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"Android疑难杂症-从相册扫二维码","slug":"Android疑难杂症-从相册扫二维码","date":"2018-01-08T00:54:21.000Z","updated":"2024-06-13T11:58:36.766Z","comments":true,"path":"2018/01/08/Android疑难杂症-从相册扫二维码/","permalink":"http://zhouzhuo810.github.io/2018/01/08/Android%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87-%E4%BB%8E%E7%9B%B8%E5%86%8C%E6%89%AB%E4%BA%8C%E7%BB%B4%E7%A0%81/","excerpt":"导入zxing包12//zxingcompile &#x27;com.google.zxing:core:3.2.1&#x27;","text":"导入zxing包12//zxingcompile &#x27;com.google.zxing:core:3.2.1&#x27; 核心代码12345678910111213141516171819202122232425262728293031323334353637383940414243private String scanAlbum(String path) &#123; if (TextUtils.isEmpty(path)) &#123; return null; &#125; // DecodeHintType 和EncodeHintType Hashtable&lt;DecodeHintType, String&gt; hints = new Hashtable&lt;&gt;(); hints.put(DecodeHintType.CHARACTER_SET, &quot;utf-8&quot;); // 设置二维码内容的编码 BitmapFactory.Options options = new BitmapFactory.Options(); options.inJustDecodeBounds = false; // 获取新的大小 int sampleSize = (int) (options.outHeight / (float) 200); if (sampleSize &lt;= 0) sampleSize = 1; options.inSampleSize = sampleSize; Bitmap scanBitmap = BitmapFactory.decodeFile(path, options); int[] intArray = new int[scanBitmap.getWidth() * scanBitmap.getHeight()]; scanBitmap.getPixels(intArray, 0, scanBitmap.getWidth(), 0, 0, scanBitmap.getWidth(), scanBitmap.getHeight()); RGBLuminanceSource source = new RGBLuminanceSource(scanBitmap.getWidth(), scanBitmap.getHeight(), intArray); BinaryBitmap bitmap1 = new BinaryBitmap(new HybridBinarizer(source)); QRCodeReader reader = new QRCodeReader(); try &#123; Result decode = reader.decode(bitmap1, hints); return recode(decode.toString()); &#125; catch (NotFoundException | com.google.zxing.FormatException | ChecksumException e) &#123; e.printStackTrace(); &#125; return null;&#125;private String recode(String str) &#123; String formart = &quot;&quot;; try &#123; boolean ISO = Charset.forName(&quot;ISO-8859-1&quot;).newEncoder().canEncode(str); if (ISO) &#123; formart = new String(str.getBytes(&quot;ISO-8859-1&quot;), &quot;GB2312&quot;); &#125; else &#123; formart = str; &#125; &#125; catch (UnsupportedEncodingException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; return formart;&#125; 调用123456789101112131415161718192021222324showPd(getString(R.string.scaning_text), false);Observable.just(filePath) .map(new Func1&lt;String, String&gt;() &#123; @Override public String call(String s) &#123; return scanAlbum(s); &#125; &#125;) .compose(RxHelper.&lt;String&gt;io_main()) .subscribe(new Action1&lt;String&gt;() &#123; @Override public void call(String s) &#123; hidePd(); if (s != null) &#123; ToastUtils.showCustomBgToast(s); &#125; &#125; &#125;, new Action1&lt;Throwable&gt;() &#123; @Override public void call(Throwable throwable) &#123; throwable.printStackTrace(); hidePd(); &#125; &#125;);","categories":[{"name":"Android疑难杂症","slug":"Android疑难杂症","permalink":"http://zhouzhuo810.github.io/categories/Android%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"前端-Bootstrap学习笔记","slug":"前端-Bootstrap学习笔记","date":"2018-01-06T12:38:17.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"2018/01/06/前端-Bootstrap学习笔记/","permalink":"http://zhouzhuo810.github.io/2018/01/06/%E5%89%8D%E7%AB%AF-Bootstrap%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","excerpt":"作者 Twitter 功能 一个Web开发框架 下载 getbootstrap bootcss bootcnd","text":"作者 Twitter 功能 一个Web开发框架 下载 getbootstrap bootcss bootcnd 用法 官网下载预编译好的压缩包，解压即可； 依赖于JQuery，所以必须先引入JQuery； 引入css文件和js文件。 最简单模版12345678910111213141516171819202122232425262728&lt;!DOCTYPE html&gt;&lt;html lang=&quot;zh-CN&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt; &lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt; &lt;title&gt;Bootstrap 101 Template&lt;/title&gt; &lt;!-- Bootstrap --&gt; &lt;link href=&quot;css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt; &lt;!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries --&gt; &lt;!-- WARNING: Respond.js doesn&#x27;t work if you view the page via file:// --&gt; &lt;!--[if lt IE 9]&gt; &lt;script src=&quot;https://cdn.bootcss.com/html5shiv/3.7.3/html5shiv.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://cdn.bootcss.com/respond.js/1.4.2/respond.min.js&quot;&gt;&lt;/script&gt; &lt;![endif]--&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;你好，世界！&lt;/h1&gt; &lt;!-- jQuery (necessary for Bootstrap&#x27;s JavaScript plugins) --&gt; &lt;script src=&quot;https://cdn.bootcss.com/jquery/1.12.4/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;!-- Include all compiled plugins (below), or include individual files as needed --&gt; &lt;script src=&quot;js/bootstrap.min.js&quot;&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 栅格系统 .container 类用于固定宽度并支持响应式布局的容器。 12345678910111213141516&lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-md-1&quot;&gt;.col-md-1&lt;/div&gt; &lt;div class=&quot;col-md-1&quot;&gt;.col-md-1&lt;/div&gt; &lt;div class=&quot;col-md-1&quot;&gt;.col-md-1&lt;/div&gt; &lt;div class=&quot;col-md-1&quot;&gt;.col-md-1&lt;/div&gt; &lt;div class=&quot;col-md-1&quot;&gt;.col-md-1&lt;/div&gt; &lt;div class=&quot;col-md-1&quot;&gt;.col-md-1&lt;/div&gt; &lt;div class=&quot;col-md-1&quot;&gt;.col-md-1&lt;/div&gt; &lt;div class=&quot;col-md-1&quot;&gt;.col-md-1&lt;/div&gt; &lt;div class=&quot;col-md-1&quot;&gt;.col-md-1&lt;/div&gt; &lt;div class=&quot;col-md-1&quot;&gt;.col-md-1&lt;/div&gt; &lt;div class=&quot;col-md-1&quot;&gt;.col-md-1&lt;/div&gt; &lt;div class=&quot;col-md-1&quot;&gt;.col-md-1&lt;/div&gt; &lt;/div&gt;&lt;/div&gt; .container-fluid 类用于 100% 宽度，占据全部视口（viewport）的容器。 12345678910111213141516&lt;div class=&quot;container-fluid&quot;&gt; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-md-1&quot;&gt;.col-md-1&lt;/div&gt; &lt;div class=&quot;col-md-1&quot;&gt;.col-md-1&lt;/div&gt; &lt;div class=&quot;col-md-1&quot;&gt;.col-md-1&lt;/div&gt; &lt;div class=&quot;col-md-1&quot;&gt;.col-md-1&lt;/div&gt; &lt;div class=&quot;col-md-1&quot;&gt;.col-md-1&lt;/div&gt; &lt;div class=&quot;col-md-1&quot;&gt;.col-md-1&lt;/div&gt; &lt;div class=&quot;col-md-1&quot;&gt;.col-md-1&lt;/div&gt; &lt;div class=&quot;col-md-1&quot;&gt;.col-md-1&lt;/div&gt; &lt;div class=&quot;col-md-1&quot;&gt;.col-md-1&lt;/div&gt; &lt;div class=&quot;col-md-1&quot;&gt;.col-md-1&lt;/div&gt; &lt;div class=&quot;col-md-1&quot;&gt;.col-md-1&lt;/div&gt; &lt;div class=&quot;col-md-1&quot;&gt;.col-md-1&lt;/div&gt; &lt;/div&gt;&lt;/div&gt; 详见https://v3.bootcss.com/css/#grid-options 自定义样式访问如下网址定制： https://v3.bootcss.com/customize/ 常用样式 访问如下网址查找 https://v3.bootcss.com/css/ 常用组件 访问如下网址查找 https://v3.bootcss.com/components/ 常用插件 访问如下网址查找 https://v3.bootcss.com/javascript/ 练习题导航栏练习 题目 实现代码 12345678910111213141516171819202122232425262728293031323334353637383940&lt;nav class=&quot;navbar navbar-default&quot;&gt; &lt;div class=&quot;container-fluid&quot;&gt; &lt;!-- Brand and toggle get grouped for better mobile display --&gt; &lt;div class=&quot;navbar-header&quot;&gt; &lt;button type=&quot;button&quot; class=&quot;navbar-toggle collapsed&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#bs-example-navbar-collapse-1&quot; aria-expanded=&quot;false&quot;&gt; &lt;span class=&quot;sr-only&quot;&gt;Toggle navigation&lt;/span&gt; &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt; &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt; &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt; &lt;/button&gt; &lt;a class=&quot;navbar-brand&quot; href=&quot;#&quot;&gt;某管理系统&lt;/a&gt; &lt;/div&gt; &lt;!-- Collect the nav links, forms, and other content for toggling --&gt; &lt;div class=&quot;collapse navbar-collapse&quot; id=&quot;bs-example-navbar-collapse-1&quot;&gt; &lt;ul class=&quot;nav navbar-nav&quot;&gt; &lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;#&quot;&gt;首页&lt;span class=&quot;sr-only&quot;&gt;(current)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;dropdown&quot;&gt; &lt;a href=&quot;#&quot; class=&quot;dropdown-toggle&quot; data-toggle=&quot;dropdown&quot; role=&quot;button&quot; aria-haspopup=&quot;true&quot; aria-expanded=&quot;false&quot;&gt;功能&lt;span class=&quot;caret&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;ul class=&quot;dropdown-menu&quot;&gt; &lt;li class=&quot;dropdown-header&quot;&gt;业务功能&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;信息建立&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;信息查询&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;信息管理&lt;/a&gt;&lt;/li&gt; &lt;li role=&quot;separator&quot; class=&quot;divider&quot;&gt;&lt;/li&gt; &lt;li class=&quot;dropdown-header&quot;&gt;系统功能&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;设置&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;帮助&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;form class=&quot;navbar-form navbar-right&quot;&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;用户名...&quot;&gt; &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;密码...&quot;&gt; &lt;/div&gt; &lt;button type=&quot;submit&quot; class=&quot;btn btn-default&quot;&gt;登录&lt;/button&gt; &lt;/form&gt; &lt;/div&gt;&lt;!-- /.navbar-collapse --&gt; &lt;/div&gt;&lt;!-- /.container-fluid --&gt;&lt;/nav&gt; 轮播图练习 题目 实现代码 123456789101112131415161718192021222324252627282930313233343536373839&lt;div id=&quot;carousel-example-generic&quot; class=&quot;carousel slide&quot; data-ride=&quot;carousel&quot;&gt; &lt;!-- Indicators --&gt; &lt;ol class=&quot;carousel-indicators&quot;&gt; &lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;0&quot; class=&quot;active&quot;&gt;&lt;/li&gt; &lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;1&quot;&gt;&lt;/li&gt; &lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;2&quot;&gt;&lt;/li&gt; &lt;/ol&gt; &lt;!-- Wrapper for slides --&gt; &lt;div class=&quot;carousel-inner&quot; role=&quot;listbox&quot;&gt; &lt;div class=&quot;item active&quot;&gt; &lt;img src=&quot;http://img.mukewang.com/5412ad400001e52014280484.jpg&quot; alt=&quot;...&quot;&gt; &lt;div class=&quot;carousel-caption&quot;&gt; &lt;p&gt;11 英寸 MacBook Air 充电一次可运行长达 9 小时，而 13 英寸机型则可运行长达 12 小时。&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;item&quot;&gt; &lt;img src=&quot;http://img.mukewang.com/5412ad7c0001d2eb10880541.jpg&quot; alt=&quot;...&quot;&gt; &lt;div class=&quot;carousel-caption&quot;&gt; &lt;p&gt;无论是什么任务，配备 Intel HD Graphics 5000 图形处理器的第四代 Intel Core 处理器都能应对自如。&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;item&quot;&gt; &lt;img src=&quot;http://img.mukewang.com/5412ae5c0001653b12800644.jpg&quot; alt=&quot;...&quot;&gt; &lt;div class=&quot;carousel-caption&quot;&gt; &lt;p&gt;有了新一代 802.11ac 技术，MacBook Air 令 Wi-Fi 速度超越极限。&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- Controls --&gt; &lt;a class=&quot;left carousel-control&quot; href=&quot;#carousel-example-generic&quot; role=&quot;button&quot; data-slide=&quot;prev&quot;&gt; &lt;span class=&quot;glyphicon glyphicon-chevron-left&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt; &lt;span class=&quot;sr-only&quot;&gt;Previous&lt;/span&gt; &lt;/a&gt; &lt;a class=&quot;right carousel-control&quot; href=&quot;#carousel-example-generic&quot; role=&quot;button&quot; data-slide=&quot;next&quot;&gt; &lt;span class=&quot;glyphicon glyphicon-chevron-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt; &lt;span class=&quot;sr-only&quot;&gt;Next&lt;/span&gt; &lt;/a&gt;&lt;/div&gt; 栅格系统练习 题目 桌面显示器： 平板电脑或手机： 1234567891011任务1. 搭建基础的bootstrap页面2. 根据课程所学或官方文档搭建基础的栅格结构3. 注意使用 .col-md-offset-* 类可以将列向右侧偏移。这些类实际是通过使用 * 选择器为当前元素增加了左侧的边距（margin）。例如，.col-md-offset-4 类将 .col-md-4 元素向右侧偏移了4个列（column）的宽度。使用什么样的类前缀，此例子应该使用 .col-md-*给p添加样式，加边框和padding4. 文字：慕课网是一家从事互联网免费教学的网络教育公司。秉承&quot;开拓、创新、公平、分享&quot;的精神，将互联网特性全面的应用在教育领域，致力于为教育机构及求学者打造一站式互动在线教育品牌。 代码实现 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455&lt;!DOCTYPE html&gt;&lt;html lang=&quot;zh-cn&quot;&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;&lt;title&gt;Hello World&lt;/title&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;&gt;&lt;style&gt;p &#123; border: solid 1px #eeeeee; padding: 5px;&#125;&lt;/style&gt;&lt;/head&gt; &lt;body&gt;&lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-md-4&quot;&gt; &lt;p&gt;慕课网是一家从事互联网免费教学的网络教育公司。秉承&quot;开拓、创新、公平、分享&quot;的精神，将互联网特性全面的应用在教育领域，致力于为教育机构及求学者打造一站式互动在线教育品牌。&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;col-md-4&quot;&gt; &lt;p&gt;慕课网是一家从事互联网免费教学的网络教育公司。秉承&quot;开拓、创新、公平、分享&quot;的精神，将互联网特性全面的应用在教育领域，致力于为教育机构及求学者打造一站式互动在线教育品牌。&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;col-md-4&quot;&gt; &lt;p&gt;慕课网是一家从事互联网免费教学的网络教育公司。秉承&quot;开拓、创新、公平、分享&quot;的精神，将互联网特性全面的应用在教育领域，致力于为教育机构及求学者打造一站式互动在线教育品牌。&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-md-4&quot;&gt; &lt;p&gt;慕课网是一家从事互联网免费教学的网络教育公司。秉承&quot;开拓、创新、公平、分享&quot;的精神，将互联网特性全面的应用在教育领域，致力于为教育机构及求学者打造一站式互动在线教育品牌。&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;col-md-4 col-md-offset-4&quot;&gt; &lt;p&gt;慕课网是一家从事互联网免费教学的网络教育公司。秉承&quot;开拓、创新、公平、分享&quot;的精神，将互联网特性全面的应用在教育领域，致力于为教育机构及求学者打造一站式互动在线教育品牌。&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-md-3 col-md-offset-3&quot;&gt; &lt;p&gt;慕课网是一家从事互联网免费教学的网络教育公司。秉承&quot;开拓、创新、公平、分享&quot;的精神，将互联网特性全面的应用在教育领域，致力于为教育机构及求学者打造一站式互动在线教育品牌。&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;col-md-3 col-md-offset-3&quot;&gt; &lt;p&gt;慕课网是一家从事互联网免费教学的网络教育公司。秉承&quot;开拓、创新、公平、分享&quot;的精神，将互联网特性全面的应用在教育领域，致力于为教育机构及求学者打造一站式互动在线教育品牌。&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-md-6 col-md-offset-3&quot;&gt; &lt;p&gt;慕课网是一家从事互联网免费教学的网络教育公司。秉承&quot;开拓、创新、公平、分享&quot;的精神，将互联网特性全面的应用在教育领域，致力于为教育机构及求学者打造一站式互动在线教育品牌。&lt;/p&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;script src=&quot;http://cdn.bootcss.com/jquery/1.11.1/jquery.min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 标签页练习 题目 12345基于Bootstrap实现下图所示效果的页面，一个标签页，页面载入完毕后，默认打开第二个标签：任务1. 搭建基础的bootstrap页面2. 根据课程所学或官方文档搭建基础的标签页结构3. 注意页面载入完毕后，调用标签页的js api，打开第二个标签。 代码实现 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354&lt;!DOCTYPE html&gt;&lt;html lang=&quot;zh-cn&quot;&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;&lt;title&gt;Hello World&lt;/title&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;&gt;&lt;/head&gt; &lt;body&gt;&lt;div&gt; &lt;!-- Nav tabs --&gt; &lt;ul class=&quot;nav nav-tabs&quot; role=&quot;tablist&quot; id=&quot;feature-tab&quot;&gt; &lt;li role=&quot;presentation&quot;&gt;&lt;a href=&quot;#first&quot; aria-controls=&quot;first&quot; role=&quot;tab&quot; data-toggle=&quot;tab&quot;&gt;第一项&lt;/a&gt; &lt;/li&gt; &lt;li role=&quot;presentation&quot;&gt;&lt;a href=&quot;#second&quot; aria-controls=&quot;second&quot; role=&quot;tab&quot; data-toggle=&quot;tab&quot;&gt;第二项&lt;/a&gt; &lt;/li&gt; &lt;li role=&quot;presentation&quot;&gt;&lt;a href=&quot;#third&quot; aria-controls=&quot;third&quot; role=&quot;tab&quot; data-toggle=&quot;tab&quot;&gt;第三项&lt;/a&gt; &lt;/li&gt; &lt;li role=&quot;presentation&quot;&gt;&lt;a href=&quot;#forth&quot; aria-controls=&quot;forth&quot; role=&quot;tab&quot; data-toggle=&quot;tab&quot;&gt;第四项&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;!-- Tab panes --&gt; &lt;div class=&quot;tab-content&quot;&gt; &lt;div role=&quot;tabpanel&quot; class=&quot;tab-pane active&quot; id=&quot;first&quot;&gt; &lt;p&gt;慕课网是做什么的？&lt;/p&gt; &lt;p&gt;互联网技能教育，免费的哦&lt;/p&gt; &lt;/div&gt; &lt;div role=&quot;tabpanel&quot; class=&quot;tab-pane&quot; id=&quot;second&quot;&gt; &lt;p&gt;慕课网是做什么的？&lt;/p&gt; &lt;p&gt;互联网技能教育，免费的哦&lt;/p&gt; &lt;/div&gt; &lt;div role=&quot;tabpanel&quot; class=&quot;tab-pane&quot; id=&quot;third&quot;&gt; &lt;p&gt;慕课网是做什么的？&lt;/p&gt; &lt;p&gt;互联网技能教育，免费的哦&lt;/p&gt; &lt;/div&gt; &lt;div role=&quot;tabpanel&quot; class=&quot;tab-pane&quot; id=&quot;forth&quot;&gt; &lt;p&gt;慕课网是做什么的？&lt;/p&gt; &lt;p&gt;互联网技能教育，免费的哦&lt;/p&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;script src=&quot;http://cdn.bootcss.com/jquery/1.11.1/jquery.min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;&lt;script&gt; $(function()&#123; $(&#x27;#feature-tab a[href=#second]&#x27;).tab(&#x27;show&#x27;); &#125;);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 实战演练 题目 123456基于Bootstrap实现下图所示效果的页面，一个管理系统的首页，包含：1.导航栏（带登录和下拉菜单，黑色背景）； 2.左侧导航栏（可参考栅格布局，并添加样式）； 3.右侧管理面板：栅格布局，包含标题、按钮、面板、警告框、表格、徽章、进度条等多个组件 代码实现lt;!DOCTYPE html&gt;&lt;html lang=&quot;zh-cn&quot;&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;&lt;title&gt;某管理系统&lt;/title&gt;&lt;link href=&quot;css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt; &lt;!--[if lt IE 9]&gt;&lt;script src=&quot;js/html5shiv.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;js/respond.min.js&quot;&gt;&lt;/script&gt;&lt;![endif]--&gt;&lt;style&gt;#left-container &#123; background-color: #dddddd; height: 900px; padding-left: 0px; padding-right: 0px;&#125;#left-container p &#123; margin-left: 0px; margin-right: 0px; padding: 10px 10px 10px 15px;&#125;#right-container &#123; background-color: #ffffff;&#125;#setting &#123; margin-top: 20px;&#125;.left-table &#123; padding-left: 0px;&#125;#btn-box &#123; margin-bottom: 20px;&#125;.pro-title &#123; padding-top: 5px; padding-bottom: 5px;&#125;.progress &#123; margin-top: 10px;&#125;.badge &#123; float: right;&#125;&lt;/style&gt;&lt;/head&gt; &lt;body&gt;&lt;nav class=&quot;navbar navbar-inverse&quot;&gt; &lt;div class=&quot;container-fluid&quot;&gt; &lt;!-- Brand and toggle get grouped for better mobile display --&gt; &lt;div class=&quot;navbar-header&quot;&gt; &lt;button type=&quot;button&quot; class=&quot;navbar-toggle collapsed&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#bs-example-navbar-collapse-1&quot; aria-expanded=&quot;false&quot;&gt; &lt;span class=&quot;sr-only&quot;&gt;Toggle navigation&lt;/span&gt; &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt; &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt; &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt; &lt;/button&gt; &lt;a class=&quot;navbar-brand&quot; href=&quot;#&quot;&gt;某管理系统&lt;/a&gt; &lt;/div&gt; &lt;!-- Collect the nav links, forms, and other content for toggling --&gt; &lt;div class=&quot;collapse navbar-collapse&quot; id=&quot;bs-example-navbar-collapse-1&quot;&gt; &lt;ul class=&quot;nav navbar-nav&quot;&gt; &lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;#&quot;&gt;首页&lt;span class=&quot;sr-only&quot;&gt;(current)&lt;/span&gt;&lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;dropdown&quot;&gt; &lt;a href=&quot;#&quot; class=&quot;dropdown-toggle&quot; data-toggle=&quot;dropdown&quot; role=&quot;button&quot; aria-haspopup=&quot;true&quot; aria-expanded=&quot;false&quot;&gt;功能&lt;span class=&quot;caret&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;ul class=&quot;dropdown-menu&quot;&gt; &lt;li class=&quot;dropdown-header&quot;&gt;业务功能&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;信息建立&lt;/a&gt; &lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;信息查询&lt;/a&gt; &lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;信息管理&lt;/a&gt; &lt;/li&gt; &lt;li role=&quot;separator&quot; class=&quot;divider&quot;&gt;&lt;/li&gt; &lt;li class=&quot;dropdown-header&quot;&gt;系统功能&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;设置&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;帮助&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;form class=&quot;navbar-form navbar-right&quot;&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;用户名...&quot;&gt; &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;密码...&quot;&gt; &lt;/div&gt; &lt;button type=&quot;submit&quot; class=&quot;btn btn-default&quot;&gt;登录&lt;/button&gt; &lt;/form&gt; &lt;/div&gt; &lt;!-- /.navbar-collapse --&gt; &lt;/div&gt; &lt;!-- /.container-fluid --&gt;&lt;/nav&gt;&lt;div class=&quot;container-fluid&quot;&gt; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-md-2&quot; id=&quot;left-container&quot;&gt; &lt;p class=&quot;bg-primary&quot;&gt;首页&lt;/p&gt; &lt;ul class=&quot;nav nav-pills nav-stacked&quot;&gt; &lt;li role=&quot;presentation&quot;&gt;&lt;a href=&quot;#&quot;&gt;信息建立&lt;/a&gt; &lt;/li&gt; &lt;li role=&quot;presentation&quot;&gt;&lt;a href=&quot;#&quot;&gt;信息管理&lt;/a&gt; &lt;/li&gt; &lt;li role=&quot;presentation&quot;&gt;&lt;a href=&quot;#&quot;&gt;信息查询&lt;/a&gt; &lt;/li&gt; &lt;li role=&quot;presentation&quot; id=&quot;setting&quot;&gt;&lt;a href=&quot;#&quot;&gt;设置&lt;/a&gt; &lt;/li&gt; &lt;li role=&quot;presentation&quot;&gt;&lt;a href=&quot;#&quot;&gt;帮助&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;col-md-10&quot; id=&quot;right-container&quot;&gt; &lt;h2&gt;管理控制台&lt;/h2&gt; &lt;hr/&gt; &lt;div id=&quot;btn-box&quot;&gt; &lt;!-- Standard button --&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-lg&quot;&gt;操作1&lt;/button&gt; &lt;!-- Provides extra visual weight and identifies the primary action in a set of buttons --&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-primary btn-lg&quot;&gt;操作2&lt;/button&gt; &lt;!-- Indicates a successful or positive action --&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-success btn-lg&quot;&gt;操作3&lt;/button&gt; &lt;!-- Contextual button for informational alert messages --&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-info btn-lg&quot;&gt;操作4&lt;/button&gt; &lt;!-- Indicates caution should be taken with this action --&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-warning btn-lg&quot;&gt;操作5&lt;/button&gt; &lt;!-- Indicates a dangerous or potentially negative action --&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-danger btn-lg&quot;&gt;操作6&lt;/button&gt; &lt;/div&gt; &lt;div class=&quot;col-md-6 left-table&quot; &gt; &lt;div class=&quot;panel panel-primary&quot;&gt; &lt;div class=&quot;panel-heading&quot;&gt; &lt;h3 class=&quot;panel-title&quot;&gt;最新提醒&lt;/h3&gt; &lt;/div&gt; &lt;div class=&quot;panel-body&quot;&gt; &lt;div class=&quot;alert alert-info&quot; role=&quot;alert&quot;&gt; &lt;strong&gt;提示 &lt;/strong&gt;您的订单（2014001）已被审核通过！ &lt;/div&gt; &lt;div class=&quot;alert alert-warning&quot; role=&quot;alert&quot;&gt; &lt;strong&gt;提示 &lt;/strong&gt;您的订单（2014002）已被打回！ &lt;/div&gt; &lt;div class=&quot;alert alert-danger&quot; role=&quot;alert&quot;&gt; &lt;strong&gt;提示 &lt;/strong&gt;您的订单（2013001）客户付款延时！ &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;col-md-6&quot;&gt; &lt;div class=&quot;panel panel-primary&quot;&gt; &lt;div class=&quot;panel-heading&quot;&gt; &lt;h3 class=&quot;panel-title&quot;&gt;我的任务&lt;/h3&gt; &lt;/div&gt; &lt;div class=&quot;panel-body&quot;&gt; &lt;div class=&quot;alert alert-info&quot; role=&quot;alert&quot;&gt; 订单审批&lt;span class=&quot;badge&quot;&gt;42&lt;/span&gt; &lt;/div&gt; &lt;div class=&quot;alert alert-info&quot; role=&quot;alert&quot;&gt; 收款确认&lt;span class=&quot;badge&quot;&gt;20&lt;/span&gt; &lt;/div&gt; &lt;div class=&quot;alert alert-info&quot; role=&quot;alert&quot;&gt; 付款确认&lt;span class=&quot;badge&quot;&gt;10&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;col-md-6 left-table&quot; &gt; &lt;div class=&quot;panel panel-primary&quot;&gt; &lt;div class=&quot;panel-heading&quot;&gt; &lt;h3 class=&quot;panel-title&quot;&gt;最新订单&lt;/h3&gt; &lt;/div&gt; &lt;div class=&quot;panel-body&quot;&gt; &lt;table class=&quot;table table-striped&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;#&lt;/th&gt; &lt;th&gt;产品&lt;/th&gt; &lt;th&gt;数量&lt;/th&gt; &lt;th&gt;金额&lt;/th&gt; &lt;th&gt;业务员&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;Apple Macbook air&lt;/td&gt; &lt;td&gt;10&lt;/td&gt; &lt;td&gt;80000&lt;/td&gt; &lt;td&gt;王小贱&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;2&lt;/td&gt; &lt;td&gt;Apple iPad air&lt;/td&gt; &lt;td&gt;20&lt;/td&gt; &lt;td&gt;65000&lt;/td&gt; &lt;td&gt;尹开花&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;3&lt;/td&gt; &lt;td&gt;Apple Macbook pro&lt;/td&gt; &lt;td&gt;5&lt;/td&gt; &lt;td&gt;50000&lt;/td&gt; &lt;td&gt;刘老根&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;!-- Provides extra visual weight and identifies the primary action in a set of buttons --&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot;&gt;查看详情&gt;&gt;&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;col-md-6&quot;&gt; &lt;div class=&quot;panel panel-primary&quot;&gt; &lt;div class=&quot;panel-heading&quot;&gt; &lt;h3 class=&quot;panel-title&quot;&gt;工程进度&lt;/h3&gt; &lt;/div&gt; &lt;div class=&quot;panel-body&quot;&gt; &lt;span class=&quot;label label-primary pro-title&quot;&gt;水井挖掘工程&lt;/span&gt; &lt;div class=&quot;progress&quot;&gt; &lt;div class=&quot;progress-bar&quot; role=&quot;progressbar&quot; aria-valuenow=&quot;60&quot; aria-valuemin=&quot;0&quot; aria-valuemax=&quot;100&quot; style=&quot;width: 60%;&quot;&gt; &lt;span class=&quot;sr-only&quot;&gt;60% Complete&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;span class=&quot;label label-danger pro-title&quot;&gt;基建工程&lt;/span&gt; &lt;div class=&quot;progress&quot;&gt; &lt;div class=&quot;progress-bar progress-bar-danger&quot; role=&quot;progressbar&quot; aria-valuenow=&quot;80&quot; aria-valuemin=&quot;0&quot; aria-valuemax=&quot;100&quot; style=&quot;width: 80%&quot;&gt; &lt;span class=&quot;sr-only&quot;&gt;80% Complete (danger)&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;script src=&quot;http://cdn.bootcss.com/jquery/1.11.1/jquery.min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 插件拓展 复选框(css)https://github.com/flatlogic/awesome-bootstrap-checkbox 123456&lt;div class=&quot;checkbox&quot;&gt; &lt;input type=&quot;checkbox&quot; id=&quot;checkbox1&quot; class=&quot;styled&quot;&gt; &lt;label for=&quot;checkbox1&quot;&gt; 全选 &lt;/label&gt;&lt;/div&gt; 分页绑定(js)twbs-pagination 12345678$(&quot;#page-indicator&quot;).twbsPagination(&quot;destroy&quot;);$(&#x27;#page-indicator&#x27;).twbsPagination(&#123; totalPages: data.totalPage, visiblePages: 10, onPageClick: function (event, page) &#123; getProjectList(userId, page); &#125;&#125;); 下拉选框(js和css)bootstrap-select12345&lt;select class=&quot;selectpicker&quot;&gt; &lt;option&gt;Mustard&lt;/option&gt; &lt;option&gt;Ketchup&lt;/option&gt; &lt;option&gt;Barbecue&lt;/option&gt;&lt;/select&gt;","categories":[{"name":"网页前端","slug":"网页前端","permalink":"http://zhouzhuo810.github.io/categories/%E7%BD%91%E9%A1%B5%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"网页前端","slug":"网页前端","permalink":"http://zhouzhuo810.github.io/tags/%E7%BD%91%E9%A1%B5%E5%89%8D%E7%AB%AF/"}]},{"title":"Android常用代码-一个TextView显示黑色标题和灰色内容","slug":"Android常用代码-一个TextView显示黑色标题和灰色内容","date":"2018-01-05T05:54:09.000Z","updated":"2024-06-13T11:58:36.766Z","comments":true,"path":"2018/01/05/Android常用代码-一个TextView显示黑色标题和灰色内容/","permalink":"http://zhouzhuo810.github.io/2018/01/05/Android%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81-%E4%B8%80%E4%B8%AATextView%E6%98%BE%E7%A4%BA%E9%BB%91%E8%89%B2%E6%A0%87%E9%A2%98%E5%92%8C%E7%81%B0%E8%89%B2%E5%86%85%E5%AE%B9/","excerpt":"需求 标题黑色，内容灰色； 标题后紧跟内容； 内容换行后和标题对齐； 分析 两个TextView不能实现； 可行方案 方案1：一个TextView，使用SpannableString 方案2：一个TextView，使用Html标签控制样式","text":"需求 标题黑色，内容灰色； 标题后紧跟内容； 内容换行后和标题对齐； 分析 两个TextView不能实现； 可行方案 方案1：一个TextView，使用SpannableString 方案2：一个TextView，使用Html标签控制样式 方法12345678910private SpannableStringBuilder generateTitleContent(String title, String content) &#123; SpannableStringBuilder sb = new SpannableStringBuilder(title + content); sb.setSpan(new StyleSpan(Typeface.BOLD), 0, title.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE); sb.setSpan(new ForegroundColorSpan(Color.BLACK), 0, title.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE); sb.setSpan(new ForegroundColorSpan(Color.parseColor(&quot;#5f656e&quot;)), title.length(), title.length() + content.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE); return sb;&#125; 使用1mTextView.setText(generateTitleContent(title, content));","categories":[{"name":"Android常用代码","slug":"Android常用代码","permalink":"http://zhouzhuo810.github.io/categories/Android%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"小常识-Android桌面Logo尺寸要求","slug":"小常识-Android桌面Logo尺寸要求","date":"2018-01-04T06:00:53.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"2018/01/04/小常识-Android桌面Logo尺寸要求/","permalink":"http://zhouzhuo810.github.io/2018/01/04/%E5%B0%8F%E5%B8%B8%E8%AF%86-Android%E6%A1%8C%E9%9D%A2Logo%E5%B0%BA%E5%AF%B8%E8%A6%81%E6%B1%82/","excerpt":"","text":"Android Icon Size and Location for Apps123456789DENSITY SIZE LOCATION RATIO SCREEN MARGINXXXHDPI 192×192 drawable-xxxhdpi 4 640 DPI 12 to 16 pixelsXXHDPI 144×144 drawable-xxhdpi 3 480 DPI 8 to 12 pixelsXHDPI 96×96 drawable-xhdpi 2 320 DPI 6 to 8 pixelsHDPI 72×72 drawable-hdpi 1.5 240 DPI 4 to 6 pixelsMDPI 48×48 drawable-mdpi 1 160 DPI 3 to 4 pixelsMDPI 48×48 drawable (Cupcake) 1 160 DPI 3 to 4 pixelsLDPI 36×36 drawable-ldpi 0.75 120 DPI 2 to 3 pixelsNA 512×512 Google Play NA NA As required","categories":[{"name":"常识","slug":"常识","permalink":"http://zhouzhuo810.github.io/categories/%E5%B8%B8%E8%AF%86/"}],"tags":[{"name":"常识","slug":"常识","permalink":"http://zhouzhuo810.github.io/tags/%E5%B8%B8%E8%AF%86/"}]},{"title":"Android自定义控件-SlidingValidationView","slug":"Android自定义控件-SlidingValidationView","date":"2017-12-28T05:34:03.000Z","updated":"2024-06-13T11:58:36.766Z","comments":true,"path":"2017/12/28/Android自定义控件-SlidingValidationView/","permalink":"http://zhouzhuo810.github.io/2017/12/28/Android%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6-SlidingValidationView/","excerpt":"效果图 代码属性123456789&lt;declare-styleable name=&quot;SlidingValidationView&quot;&gt; &lt;attr name=&quot;sv_drag_view_color&quot; format=&quot;color|reference&quot; /&gt; &lt;attr name=&quot;sv_line_color&quot; format=&quot;color|reference&quot; /&gt; &lt;attr name=&quot;sv_final_point_color&quot; format=&quot;color|reference&quot; /&gt; &lt;attr name=&quot;sv_sliding_progress&quot; format=&quot;integer&quot; /&gt; &lt;attr name=&quot;sv_draw_radius&quot; format=&quot;dimension|reference&quot; /&gt; &lt;attr name=&quot;sv_final_point_radius&quot; format=&quot;dimension|reference&quot; /&gt; &lt;attr name=&quot;sv_line_point_radius&quot; format=&quot;dimension|reference&quot; /&gt;&lt;/declare-styleable&gt;","text":"效果图 代码属性123456789&lt;declare-styleable name=&quot;SlidingValidationView&quot;&gt; &lt;attr name=&quot;sv_drag_view_color&quot; format=&quot;color|reference&quot; /&gt; &lt;attr name=&quot;sv_line_color&quot; format=&quot;color|reference&quot; /&gt; &lt;attr name=&quot;sv_final_point_color&quot; format=&quot;color|reference&quot; /&gt; &lt;attr name=&quot;sv_sliding_progress&quot; format=&quot;integer&quot; /&gt; &lt;attr name=&quot;sv_draw_radius&quot; format=&quot;dimension|reference&quot; /&gt; &lt;attr name=&quot;sv_final_point_radius&quot; format=&quot;dimension|reference&quot; /&gt; &lt;attr name=&quot;sv_line_point_radius&quot; format=&quot;dimension|reference&quot; /&gt;&lt;/declare-styleable&gt; java代码import android.annotation.TargetApi;import android.content.Context;import android.content.res.TypedArray;import android.graphics.Canvas;import android.graphics.Paint;import android.support.annotation.Nullable;import android.util.AttributeSet;import android.view.MotionEvent;import android.view.View; import com.zhy.autolayout.utils.AutoUtils; /** * 滑动验证 * Created by zhouzhuo810 on 2017/12/27. */public class SlidingValidationView extends View &#123; private int dragViewColor; private int lineColor; private int finalPointColor; private int progress; private boolean showDragViewShadow; private float slidingX; private int dragRadius; private int finalPointRadius; private int linePointRadius; private Paint dragViewPaint; private Paint leftLinePaint; private Paint rightLinePaint; private Paint finalPointPaint; private boolean isDragging; private boolean dragEnable; private OnSlidingListener slidingListener; private float downX; public interface OnSlidingListener &#123; void onSlidingProgress(int progress); void onOk(); void onCancel(); &#125; public void setSlidingListener(OnSlidingListener slidingListener) &#123; this.slidingListener = slidingListener; &#125; public SlidingValidationView(Context context) &#123; super(context); init(context, null); &#125; public SlidingValidationView(Context context, @Nullable AttributeSet attrs) &#123; super(context, attrs); init(context, attrs); &#125; public SlidingValidationView(Context context, @Nullable AttributeSet attrs, int defStyleAttr) &#123; super(context, attrs, defStyleAttr); init(context, attrs); &#125; @TargetApi(android.os.Build.VERSION_CODES.LOLLIPOP) public SlidingValidationView(Context context, @Nullable AttributeSet attrs, int defStyleAttr, int defStyleRes) &#123; super(context, attrs, defStyleAttr, defStyleRes); init(context, attrs); &#125; private void init(Context context, AttributeSet attrs) &#123; if (attrs != null) &#123; TypedArray t = context.obtainStyledAttributes(attrs, R.styleable.SlidingValidationView); dragViewColor = t.getColor(R.styleable.SlidingValidationView_sv_drag_view_color, 0xff35559b); lineColor = t.getColor(R.styleable.SlidingValidationView_sv_line_color, 0xff45c1f9); finalPointColor = t.getColor(R.styleable.SlidingValidationView_sv_final_point_color, 0xff7ed321); progress = t.getInteger(R.styleable.SlidingValidationView_sv_sliding_progress, 0); dragRadius = t.getInteger(R.styleable.SlidingValidationView_sv_draw_radius, 60); finalPointRadius = t.getInteger(R.styleable.SlidingValidationView_sv_final_point_radius, 18); linePointRadius = t.getInteger(R.styleable.SlidingValidationView_sv_line_point_radius, 6); t.recycle(); &#125; else &#123; dragViewColor = 0xff35559b; lineColor = 0xff45c1f9; finalPointColor = 0xff7ed321; progress = 0; dragRadius = 60; finalPointRadius = 18; linePointRadius = 6; &#125; dragRadius = AutoUtils.getPercentWidthSize(dragRadius); finalPointRadius = AutoUtils.getPercentWidthSize(finalPointRadius); linePointRadius = AutoUtils.getPercentWidthSize(linePointRadius); dragEnable = true; initPaint(); &#125; private void initPaint() &#123; dragViewPaint = new Paint(); dragViewPaint.setColor(dragViewColor); dragViewPaint.setStyle(Paint.Style.STROKE); dragViewPaint.setStrokeWidth(6f); dragViewPaint.setAntiAlias(true); leftLinePaint = new Paint(); leftLinePaint.setColor(finalPointColor); leftLinePaint.setStyle(Paint.Style.FILL); leftLinePaint.setStrokeWidth(2f); leftLinePaint.setAntiAlias(true); rightLinePaint = new Paint(); rightLinePaint.setColor(lineColor); rightLinePaint.setStyle(Paint.Style.FILL); rightLinePaint.setStrokeWidth(2f); rightLinePaint.setAntiAlias(true); finalPointPaint = new Paint(); finalPointPaint.setColor(finalPointColor); finalPointPaint.setStyle(Paint.Style.FILL); finalPointPaint.setAntiAlias(true); &#125; @Override protected void onDraw(Canvas canvas) &#123; super.onDraw(canvas); drawFinalPoint(canvas); drawLeftLine(canvas); drawRightLine(canvas); drawDragView(canvas); &#125; private void drawFinalPoint(Canvas canvas) &#123; int centerX = getWidth() - dragRadius - 10; int centerY = dragRadius + 10; finalPointPaint.setStyle(Paint.Style.FILL); finalPointPaint.setColor(finalPointColor); canvas.drawCircle(centerX, centerY, finalPointRadius / 2, finalPointPaint); finalPointPaint.setStyle(Paint.Style.STROKE); finalPointPaint.setStrokeWidth(1f); finalPointPaint.setColor(0xff3a559b); canvas.drawCircle(centerX, centerY, finalPointRadius, finalPointPaint); &#125; private void drawLeftLine(Canvas canvas) &#123; int endX = getWidth() - dragRadius - 10; int startX = dragRadius + 10; int centerX = dragRadius + 10; int centerY = dragRadius + 10; int pointStartX = dragRadius + 10; int pointEndX = (int) ((progress * 1.0f / 100) * (endX - startX)); int dx = pointEndX - pointStartX; int count = dx / (linePointRadius * 5); for (int i = 0; i &lt; count; i++) &#123; int x = pointStartX + i * dx / count; canvas.drawCircle(x, centerY, linePointRadius, leftLinePaint); &#125; &#125; private void drawRightLine(Canvas canvas) &#123; int endX = getWidth() - dragRadius - 10; int startX = dragRadius + 10; int centerX = dragRadius + 10; int centerY = dragRadius + 10; int pointStartX = centerX * 2 + 20 + (int) ((progress * 1.0f / 100) * (endX - startX)); int pointEndX = getWidth() - dragRadius - 10 - finalPointRadius; int dx = pointEndX - pointStartX; int count = dx / (linePointRadius * 5); for (int i = 0; i &lt; count; i++) &#123; int x = pointStartX + i * dx / count; canvas.drawCircle(x, centerY, linePointRadius, rightLinePaint); &#125; &#125; private void drawDragView(Canvas canvas) &#123; int endX = getWidth() - dragRadius - 10; int startX = dragRadius + 10; int centerX = dragRadius + 10 + (int) ((progress * 1.0f / 100) * (endX - startX)); int centerY = dragRadius + 10; //画圆 dragViewPaint.setStyle(Paint.Style.STROKE); dragViewPaint.setAlpha((int) (255 * 0.8)); if (progress &lt; 90) &#123; dragViewPaint.setColor(dragViewColor); canvas.drawCircle(centerX, centerY, dragRadius, dragViewPaint); &#125; else &#123; dragViewPaint.setColor(finalPointColor); canvas.drawCircle(centerX, centerY, dragRadius, dragViewPaint); &#125; dragViewPaint.setColor(dragViewColor); dragViewPaint.setAlpha(255); if (progress &lt; 90) &#123; //画点 dragViewPaint.setStyle(Paint.Style.FILL); int pointStartX = centerX - dragRadius / 2; int pointEndX = centerX + dragRadius / 5; int dx = pointEndX - pointStartX; for (int i = 1; i &lt;= 4; i++) &#123; int x = pointStartX + i * dx / 4; canvas.drawCircle(x, centerY, 3, dragViewPaint); &#125; //画箭头 int arrayStartX = pointEndX + dx / 2; int arrayEntTopY = centerY - dx / 2; int arrayEndBottomY = centerY + dx / 2; canvas.drawCircle(arrayStartX, centerY, 2, dragViewPaint); canvas.drawLine(arrayStartX, centerY, pointEndX, arrayEntTopY, dragViewPaint); canvas.drawLine(arrayStartX, centerY, pointEndX, arrayEndBottomY, dragViewPaint); &#125; &#125; /** * 还原 */ public void reset() &#123; dragEnable = true; setProgress(0); &#125; @Override public boolean onTouchEvent(MotionEvent event) &#123; if (dragEnable) &#123; switch (event.getAction()) &#123; case MotionEvent.ACTION_DOWN: int centerX = dragRadius + 10; int centerY = dragRadius + 10; float x = event.getX(); float y = event.getY(); double r = Math.sqrt(Math.pow((centerX - x), 2) + Math.pow((centerY - y), 2)); if (r &lt; dragRadius) &#123; downX = event.getX(); isDragging = true; &#125; break; case MotionEvent.ACTION_MOVE: if (isDragging) &#123; float rawX = event.getX(); float dx = rawX - downX; int endX = getWidth() - dragRadius - 10; int startX = dragRadius + 10; progress = (int) (dx * 100.0f / (endX - startX) + 0.5f); if (progress &lt; 0) &#123; progress = 0; &#125; if (progress &gt; 100) &#123; progress = 100; &#125; if (slidingListener != null) &#123; slidingListener.onSlidingProgress(progress); &#125; invalidate(); &#125; break; case MotionEvent.ACTION_UP: isDragging = false; if (progress &gt; 90) &#123; progress = 100; dragEnable = false; if (slidingListener != null) &#123; slidingListener.onOk(); &#125; &#125; else &#123; if (slidingListener != null) &#123; slidingListener.onCancel(); &#125; progress = 0; &#125; invalidate(); break; &#125; &#125; return true; &#125; public boolean isDragging() &#123; return isDragging; &#125; public boolean isDragEnable() &#123; return dragEnable; &#125; /** * 设置拖动开关 * @param dragEnable 开／关 */ public void setDragEnable(boolean dragEnable) &#123; this.dragEnable = dragEnable; invalidate(); &#125; public int getDragViewColor() &#123; return dragViewColor; &#125; public void setDragViewColor(int dragViewColor) &#123; this.dragViewColor = dragViewColor; invalidate(); &#125; public int getLineColor() &#123; return lineColor; &#125; public void setLineColor(int lineColor) &#123; this.lineColor = lineColor; invalidate(); &#125; public int getFinalPointColor() &#123; return finalPointColor; &#125; public void setFinalPointColor(int finalPointColor) &#123; this.finalPointColor = finalPointColor; invalidate(); &#125; public boolean isShowDragViewShadow() &#123; return showDragViewShadow; &#125; public void setShowDragViewShadow(boolean showDragViewShadow) &#123; this.showDragViewShadow = showDragViewShadow; invalidate(); &#125; public float getSlidingX() &#123; return slidingX; &#125; public void setSlidingX(float slidingX) &#123; this.slidingX = slidingX; invalidate(); &#125; public int getProgress() &#123; return progress; &#125; public void setProgress(int progress) &#123; this.progress = progress; invalidate(); &#125; public int getDragRadius() &#123; return dragRadius; &#125; public void setDragRadius(int dragRadius) &#123; this.dragRadius = dragRadius; invalidate(); &#125; public int getFinalPointRadius() &#123; return finalPointRadius; &#125; public void setFinalPointRadius(int finalPointRadius) &#123; this.finalPointRadius = finalPointRadius; invalidate(); &#125; public int getLinePointRadius() &#123; return linePointRadius; &#125; public void setLinePointRadius(int linePointRadius) &#123; this.linePointRadius = linePointRadius; invalidate(); &#125; @Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123; int width = MeasureSpec.getSize(widthMeasureSpec); int height = dragRadius * 2 + 20; setMeasuredDimension(width, height); &#125;&#125; 使用1234567&lt;!--注意包名改成自己的--&gt;&lt;com.example.slidingverificationtest.ui.widget.SlidingValidationView android:id=&quot;@+id/sv&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginLeft=&quot;40px&quot; android:layout_marginRight=&quot;40px&quot; /&gt; 1234567891011121314151617SlidingValidationView sv = (SlidingValidationView) findViewById(R.id.sv);sv.setOnSlidingListener(new SlidingValidationView.OnSlidingListener() &#123; @Override public void onSlidingProgress(int progress) &#123; &#125; @Override public void onOk() &#123; &#125; @Override public void onCancel() &#123; &#125;&#125;);","categories":[{"name":"Android自定义控件","slug":"Android自定义控件","permalink":"http://zhouzhuo810.github.io/categories/Android%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"Android自定义控件-RatioColorBar","slug":"Android自定义控件-RatioColorBar","date":"2017-12-28T05:17:35.000Z","updated":"2024-06-13T11:58:36.766Z","comments":true,"path":"2017/12/28/Android自定义控件-RatioColorBar/","permalink":"http://zhouzhuo810.github.io/2017/12/28/Android%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6-RatioColorBar/","excerpt":"效果图 代码属性1234567&lt;declare-styleable name=&quot;RatioColorBar&quot;&gt; &lt;attr name=&quot;rcb_show_border&quot; format=&quot;boolean&quot; /&gt; &lt;attr name=&quot;rcb_show_padding&quot; format=&quot;boolean&quot; /&gt; &lt;attr name=&quot;rcb_border_width&quot; format=&quot;dimension|reference&quot; /&gt; &lt;attr name=&quot;rcb_border_padding&quot; format=&quot;dimension|reference&quot; /&gt; &lt;attr name=&quot;rcb_border_color&quot; format=&quot;color|reference&quot; /&gt;&lt;/declare-styleable&gt;","text":"效果图 代码属性1234567&lt;declare-styleable name=&quot;RatioColorBar&quot;&gt; &lt;attr name=&quot;rcb_show_border&quot; format=&quot;boolean&quot; /&gt; &lt;attr name=&quot;rcb_show_padding&quot; format=&quot;boolean&quot; /&gt; &lt;attr name=&quot;rcb_border_width&quot; format=&quot;dimension|reference&quot; /&gt; &lt;attr name=&quot;rcb_border_padding&quot; format=&quot;dimension|reference&quot; /&gt; &lt;attr name=&quot;rcb_border_color&quot; format=&quot;color|reference&quot; /&gt;&lt;/declare-styleable&gt; java代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164import android.annotation.TargetApi;import android.content.Context;import android.content.res.TypedArray;import android.graphics.Canvas;import android.graphics.Paint;import android.os.Build;import android.support.annotation.Nullable;import android.util.AttributeSet;import android.util.Log;import android.view.View; import com.zhy.autolayout.utils.AutoUtils; import java.util.List; /** * 彩虹条 * Created by zhouzhuo810 on 2017/12/28. */public class RatioColorBar extends View &#123; private boolean showBorder; private boolean showPadding; private int borderWidth; private int borderColor; private int padding; private List&lt;RatioBarData&gt; colorBars; private Paint borderPaint; private Paint barPaint; public RatioColorBar(Context context) &#123; super(context); init(context, null); &#125; public RatioColorBar(Context context, @Nullable AttributeSet attrs) &#123; super(context, attrs); init(context, attrs); &#125; public RatioColorBar(Context context, @Nullable AttributeSet attrs, int defStyleAttr) &#123; super(context, attrs, defStyleAttr); init(context, attrs); &#125; @TargetApi(Build.VERSION_CODES.LOLLIPOP) public RatioColorBar(Context context, @Nullable AttributeSet attrs, int defStyleAttr, int defStyleRes) &#123; super(context, attrs, defStyleAttr, defStyleRes); init(context, attrs); &#125; private void init(Context context, AttributeSet attrs) &#123; if (attrs != null) &#123; TypedArray t = context.obtainStyledAttributes(attrs, R.styleable.RatioColorBar); showBorder = t.getBoolean(R.styleable.RatioColorBar_rcb_show_border, false); showPadding = t.getBoolean(R.styleable.RatioColorBar_rcb_show_padding, false); borderColor = t.getColor(R.styleable.RatioColorBar_rcb_border_color, 0xffeeeeee); borderWidth = t.getDimensionPixelSize(R.styleable.RatioColorBar_rcb_border_width, 1); padding = t.getDimensionPixelSize(R.styleable.RatioColorBar_rcb_border_padding, 1); t.recycle(); &#125; else &#123; showBorder = false; showPadding = false; borderColor = 0xffeeeeee; borderWidth = 1; padding = 1; &#125; borderWidth = AutoUtils.getPercentWidthSize(borderWidth); padding = AutoUtils.getPercentWidthSize(padding); initPaints(); &#125; private void initPaints() &#123; borderPaint = new Paint(); borderPaint.setAntiAlias(true); borderPaint.setColor(borderColor); borderPaint.setStyle(Paint.Style.STROKE); borderPaint.setStrokeWidth(borderWidth); barPaint = new Paint(); barPaint.setAntiAlias(true); barPaint.setStyle(Paint.Style.FILL); &#125; @Override protected void onDraw(Canvas canvas) &#123; super.onDraw(canvas); if (colorBars != null) &#123; int startX = 0; int endX = getWidth(); int startY = 0; int endY = getHeight(); if (showBorder) &#123; startX += borderWidth; endX -= borderWidth; startY += borderWidth; endY -= borderWidth; canvas.drawRect(startX, startY, endX, endY, borderPaint); &#125; if (showPadding) &#123; startX += padding; endX -= padding; startY += padding; endY -= padding; &#125; Log.e(&quot;RRR&quot;, &quot;sx=&quot; + startX + &quot;,ex=&quot; + endX + &quot;,sy=&quot; + startY + &quot;,ey=&quot; + endY); int dx = endX - startX; Log.e(&quot;RRR&quot;, &quot;dx=&quot; + dx); long sum = 0; for (RatioBarData colorBar : colorBars) &#123; sum += colorBar.getValue(); &#125; Log.e(&quot;RRR&quot;, &quot;sum=&quot; + sum); if (sum != 0) &#123; int realStartX = startX; for (RatioBarData colorBar : colorBars) &#123; int color = colorBar.getColor(); int ratioWidth = (int) ((dx * (colorBar.getValue() * 1.0 / sum)) + 0.5f); Log.e(&quot;RRR&quot;, &quot;ratioWidth=&quot; + ratioWidth); barPaint.setColor(color); Log.e(&quot;RRR&quot;, &quot;realStartX=&quot; + realStartX); canvas.drawRect(realStartX, startY, realStartX + ratioWidth, endY, barPaint); realStartX += ratioWidth; &#125; &#125; &#125; &#125; public void setColorBars(List&lt;RatioBarData&gt; colorBars) &#123; this.colorBars = colorBars; invalidate(); &#125; public static class RatioBarData &#123; private long value; private int color; public RatioBarData() &#123; &#125; public RatioBarData(long value, int color) &#123; this.value = value; this.color = color; &#125; public long getValue() &#123; return value; &#125; public void setValue(long value) &#123; this.value = value; &#125; public int getColor() &#123; return color; &#125; public void setColor(int color) &#123; this.color = color; &#125; &#125;&#125; 用法12345678910&lt;!--注意包名改成自己的--&gt;&lt;com.example.slidingverificationtest.ui.widget.RatioColorBar android:id=&quot;@+id/rcb&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;75px&quot; app:rcb_border_color=&quot;#eee&quot; app:rcb_border_padding=&quot;3px&quot; app:rcb_border_width=&quot;3px&quot; app:rcb_show_border=&quot;true&quot; app:rcb_show_padding=&quot;true&quot; /&gt; 123456789101112131415RatioColorBar bar = (RatioColorBar) findViewById(R.id.rcb);List&lt;RatioColorBar.RatioBarData&gt; list = new ArrayList&lt;&gt;();list.add(new RatioColorBar.RatioBarData(200, 0xffd8d8d8));list.add(new RatioColorBar.RatioBarData(200, 0xff7ed321));list.add(new RatioColorBar.RatioBarData(50, 0xffd0021b));list.add(new RatioColorBar.RatioBarData(200, 0xff7ed321));list.add(new RatioColorBar.RatioBarData(10, 0xffd0021b));list.add(new RatioColorBar.RatioBarData(20, 0xff7ed321));list.add(new RatioColorBar.RatioBarData(10, 0xffd0021b));list.add(new RatioColorBar.RatioBarData(300, 0xfff5a623));list.add(new RatioColorBar.RatioBarData(200, 0xff7ed321));list.add(new RatioColorBar.RatioBarData(60, 0xffd8d8d8));list.add(new RatioColorBar.RatioBarData(100, 0xfff5a623));list.add(new RatioColorBar.RatioBarData(600, 0xff7ed321));bar.setColorBars(list);","categories":[{"name":"Android自定义控件","slug":"Android自定义控件","permalink":"http://zhouzhuo810.github.io/categories/Android%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"小常识-Foxmail配置网易企业邮箱","slug":"小常识-Foxmail配置网易企业邮箱","date":"2017-12-26T06:20:02.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"2017/12/26/小常识-Foxmail配置网易企业邮箱/","permalink":"http://zhouzhuo810.github.io/2017/12/26/%E5%B0%8F%E5%B8%B8%E8%AF%86-Foxmail%E9%85%8D%E7%BD%AE%E7%BD%91%E6%98%93%E4%BC%81%E4%B8%9A%E9%82%AE%E7%AE%B1/","excerpt":"","text":"Foxmail邮件配置网易企业邮箱123POP3pop.ym.163.com SSL 995smtp.ym.163.com SSL 465","categories":[{"name":"常识","slug":"常识","permalink":"http://zhouzhuo810.github.io/categories/%E5%B8%B8%E8%AF%86/"}],"tags":[{"name":"常识","slug":"常识","permalink":"http://zhouzhuo810.github.io/tags/%E5%B8%B8%E8%AF%86/"}]},{"title":"Android疑难杂症-控件任意拖动+点击监听","slug":"Android疑难杂症-控件任意拖动-点击监听","date":"2017-12-22T02:04:54.000Z","updated":"2024-06-13T11:58:36.766Z","comments":true,"path":"2017/12/22/Android疑难杂症-控件任意拖动-点击监听/","permalink":"http://zhouzhuo810.github.io/2017/12/22/Android%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87-%E6%8E%A7%E4%BB%B6%E4%BB%BB%E6%84%8F%E6%8B%96%E5%8A%A8-%E7%82%B9%E5%87%BB%E7%9B%91%E5%90%AC/","excerpt":"","text":"实现代码(ImageView为例)123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118package com.keqiang.highcloud.ui.widget; import android.annotation.SuppressLint;import android.content.Context;import android.util.AttributeSet;import android.util.Log;import android.view.MotionEvent;import android.view.ViewGroup;import android.widget.ImageView; /** * Created by KID on 2017/11/14. * 随意拖动的view */@SuppressLint(&quot;AppCompatCustomView&quot;)public class DragView extends ImageView &#123; private int width; private int height; private int screenWidth; private int screenHeight; private Context context; private boolean dragEnable = true; //是否拖动 private boolean isDrag = false; public boolean isDrag() &#123; return isDrag; &#125; public boolean isDragEnable() &#123; return dragEnable; &#125; public void setDragEnable(boolean dragEnable) &#123; this.dragEnable = dragEnable; &#125; public DragView(Context context, AttributeSet attrs) &#123; super(context, attrs); dragEnable = true; this.context = context; &#125; @Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123; super.onMeasure(widthMeasureSpec, heightMeasureSpec); width = getMeasuredWidth(); height = getMeasuredHeight(); &#125; private float downX; private float downY; @Override public boolean onTouchEvent(MotionEvent event) &#123; super.onTouchEvent(event); if (this.isEnabled()) &#123; switch (event.getAction()) &#123; case MotionEvent.ACTION_DOWN: isDrag = false; ViewGroup mViewGroup = (ViewGroup) getParent(); if (null != mViewGroup) &#123; screenWidth = mViewGroup.getWidth(); screenHeight = mViewGroup.getHeight(); &#125; downX = event.getX(); downY = event.getY(); break; case MotionEvent.ACTION_MOVE: Log.e(&quot;kid&quot;, &quot;ACTION_MOVE&quot;); if (dragEnable) &#123; final float xDistance = event.getX() - downX; final float yDistance = event.getY() - downY; int l, r, t, b; //当水平或者垂直滑动距离大于10,才算拖动事件 if (Math.abs(xDistance) &gt; 10 || Math.abs(yDistance) &gt; 10) &#123; Log.e(&quot;kid&quot;, &quot;Drag&quot;); isDrag = true; l = (int) (getLeft() + xDistance); r = l + width; t = (int) (getTop() + yDistance); b = t + height; //不划出边界判断,此处应按照项目实际情况,因为本项目需求移动的位置是手机全屏, // 所以才能这么写,如果是固定区域,要得到父控件的宽高位置后再做处理 if (l &lt; 0) &#123; l = 0; r = l + width; &#125; else if (r &gt; screenWidth) &#123; r = screenWidth; l = r - width; &#125; if (t &lt; 0) &#123; t = 0; b = t + height; &#125; else if (b &gt; screenHeight) &#123; b = screenHeight; t = b - height; &#125; this.layout(l, t, r, b); &#125; &#125; break; case MotionEvent.ACTION_UP: setPressed(false); break; case MotionEvent.ACTION_CANCEL: setPressed(false); break; &#125; return true; &#125; return false; &#125;&#125;","categories":[{"name":"Android疑难杂症","slug":"Android疑难杂症","permalink":"http://zhouzhuo810.github.io/categories/Android%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"Android自定义控件-DieJiaIndicator","slug":"Android自定义控件-DieJiaIndicator","date":"2017-12-21T02:23:38.000Z","updated":"2024-06-13T11:58:36.766Z","comments":true,"path":"2017/12/21/Android自定义控件-DieJiaIndicator/","permalink":"http://zhouzhuo810.github.io/2017/12/21/Android%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6-DieJiaIndicator/","excerpt":"固定数量效果图 动态数量效果图","text":"固定数量效果图 动态数量效果图 固定数量代码实现 layout关键代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117&lt;FrameLayout android:id=&quot;@+id/fl_top_tabs&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginTop=&quot;10px&quot;&gt; &lt;FrameLayout android:id=&quot;@+id/fl_top_tabs_childs&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot;&gt; &lt;ImageView android:id=&quot;@+id/iv_error&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;85px&quot; android:scaleType=&quot;fitXY&quot; android:src=&quot;@drawable/machinestate_error_selected&quot; app:layout_auto_baseheight=&quot;width&quot; /&gt; &lt;ImageView android:id=&quot;@+id/iv_working&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;85px&quot; android:scaleType=&quot;fitXY&quot; android:src=&quot;@drawable/machinestate_working_selected&quot; app:layout_auto_baseheight=&quot;width&quot; /&gt; &lt;ImageView android:id=&quot;@+id/iv_free&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;85px&quot; android:scaleType=&quot;fitXY&quot; android:src=&quot;@drawable/machinestate_free_selected&quot; app:layout_auto_baseheight=&quot;width&quot; /&gt; &lt;ImageView android:id=&quot;@+id/iv_disconnect&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;85px&quot; android:scaleType=&quot;fitXY&quot; android:src=&quot;@drawable/machinestate_disconnect_selected&quot; app:layout_auto_baseheight=&quot;width&quot; /&gt; &lt;ImageView android:id=&quot;@+id/iv_all&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;85px&quot; android:scaleType=&quot;fitXY&quot; android:src=&quot;@drawable/machinestate_all_selected&quot; app:layout_auto_baseheight=&quot;width&quot; /&gt; &lt;/FrameLayout&gt; &lt;LinearLayout android:id=&quot;@+id/ll_top_tabs_tv&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:orientation=&quot;horizontal&quot;&gt; &lt;TextView android:layout_width=&quot;0dp&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginLeft=&quot;40px&quot; android:layout_weight=&quot;1&quot; android:gravity=&quot;center&quot; android:paddingBottom=&quot;15px&quot; android:paddingTop=&quot;20px&quot; android:text=&quot;所有 80&quot; android:textColor=&quot;@color/colorWhite&quot; android:textSize=&quot;31px&quot; /&gt; &lt;TextView android:layout_width=&quot;0dp&quot; android:layout_height=&quot;wrap_content&quot; android:layout_weight=&quot;1&quot; android:gravity=&quot;center&quot; android:paddingBottom=&quot;15px&quot; android:paddingTop=&quot;20px&quot; android:text=&quot;失联 20&quot; android:textColor=&quot;@color/colorWhite&quot; android:textSize=&quot;31px&quot; /&gt; &lt;TextView android:layout_width=&quot;0dp&quot; android:layout_height=&quot;wrap_content&quot; android:layout_weight=&quot;1&quot; android:gravity=&quot;center&quot; android:paddingBottom=&quot;15px&quot; android:paddingTop=&quot;20px&quot; android:text=&quot;空闲 20&quot; android:textColor=&quot;@color/colorWhite&quot; android:textSize=&quot;31px&quot; /&gt; &lt;TextView android:layout_width=&quot;0dp&quot; android:layout_height=&quot;wrap_content&quot; android:layout_weight=&quot;1&quot; android:gravity=&quot;center&quot; android:paddingBottom=&quot;15px&quot; android:paddingTop=&quot;20px&quot; android:text=&quot;工作 20&quot; android:textColor=&quot;@color/colorWhite&quot; android:textSize=&quot;31px&quot; /&gt; &lt;TextView android:layout_width=&quot;0dp&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginRight=&quot;40px&quot; android:layout_weight=&quot;1&quot; android:gravity=&quot;center&quot; android:paddingBottom=&quot;15px&quot; android:paddingTop=&quot;20px&quot; android:text=&quot;故障 20&quot; android:textColor=&quot;@color/colorWhite&quot; android:textSize=&quot;31px&quot; /&gt; &lt;/LinearLayout&gt;&lt;/FrameLayout&gt; java关键代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950 for (int i = 0; i &lt; llTopTabsTv.getChildCount(); i++) &#123; View childAt = llTopTabsTv.getChildAt(i); final int finalI = i; childAt.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; setTopTabSelection(finalI); &#125; &#125;); &#125; private void setTopTabSelection(int finalI) &#123; switch (finalI) &#123; case 0: flTopTabsChilds.bringChildToFront(ivError); flTopTabsChilds.bringChildToFront(ivWorking); flTopTabsChilds.bringChildToFront(ivFree); flTopTabsChilds.bringChildToFront(ivDisconnect); flTopTabsChilds.bringChildToFront(ivAll); break; case 1: flTopTabsChilds.bringChildToFront(ivError); flTopTabsChilds.bringChildToFront(ivWorking); flTopTabsChilds.bringChildToFront(ivFree); flTopTabsChilds.bringChildToFront(ivAll); flTopTabsChilds.bringChildToFront(ivDisconnect); break; case 2: flTopTabsChilds.bringChildToFront(ivError); flTopTabsChilds.bringChildToFront(ivWorking); flTopTabsChilds.bringChildToFront(ivAll); flTopTabsChilds.bringChildToFront(ivDisconnect); flTopTabsChilds.bringChildToFront(ivFree); break; case 3: flTopTabsChilds.bringChildToFront(ivError); flTopTabsChilds.bringChildToFront(ivAll); flTopTabsChilds.bringChildToFront(ivDisconnect); flTopTabsChilds.bringChildToFront(ivFree); flTopTabsChilds.bringChildToFront(ivWorking); break; case 4: flTopTabsChilds.bringChildToFront(ivAll); flTopTabsChilds.bringChildToFront(ivDisconnect); flTopTabsChilds.bringChildToFront(ivFree); flTopTabsChilds.bringChildToFront(ivWorking); flTopTabsChilds.bringChildToFront(ivError); break; &#125;&#125; 动态数量代码实现代码import android.annotation.TargetApi;import android.content.Context;import android.graphics.Color;import android.os.Build;import android.os.Parcel;import android.os.Parcelable;import android.util.AttributeSet;import android.util.Log;import android.util.TypedValue;import android.view.Gravity;import android.view.View;import android.widget.FrameLayout;import android.widget.HorizontalScrollView;import android.widget.ImageView;import android.widget.RelativeLayout;import android.widget.TextView; import com.zhy.autolayout.utils.AutoUtils; import java.util.ArrayList;import java.util.List; /** * 叠加的Tab * Created by admin on 2017/12/20. */public class DieJiaIndicator extends HorizontalScrollView &#123; private int normalDrawableId; private int selectDrawableId; private List&lt;String&gt; items; private FrameLayout flBg; private FrameLayout flTv; private int position = 0; private List&lt;ImageView&gt; imgs; private OnItemClickListener onItemClickListener; public interface OnItemClickListener &#123; void onItemClick(int position, boolean changed); &#125; public void setOnItemClickListener(OnItemClickListener onItemClickListener) &#123; this.onItemClickListener = onItemClickListener; &#125; public DieJiaIndicator(Context context) &#123; super(context); init(context, null); &#125; public DieJiaIndicator(Context context, AttributeSet attrs) &#123; super(context, attrs); init(context, attrs); &#125; public DieJiaIndicator(Context context, AttributeSet attrs, int defStyleAttr) &#123; super(context, attrs, defStyleAttr); init(context, attrs); &#125; @TargetApi(Build.VERSION_CODES.LOLLIPOP) public DieJiaIndicator(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) &#123; super(context, attrs, defStyleAttr, defStyleRes); init(context, attrs); &#125; private void init(Context context, AttributeSet attrs) &#123; setHorizontalScrollBarEnabled(false); imgs = new ArrayList&lt;&gt;(); RelativeLayout rlRoot = new RelativeLayout(context, attrs); flBg = new FrameLayout(context, attrs); flTv = new FrameLayout(context, attrs); rlRoot.addView(flBg); rlRoot.addView(flTv); addView(rlRoot); &#125; public void setItems(int normalDrawableId, int selectDrawableId, List&lt;String&gt; items) &#123; this.normalDrawableId = normalDrawableId; this.selectDrawableId = selectDrawableId; this.items = items; initChildren(); &#125; private void initChildren() &#123; if (items != null &amp;&amp; items.size() &gt; 0) &#123; flBg.removeAllViews(); flTv.removeAllViews(); imgs.clear(); for (String item : items) &#123; addTab(item); &#125; setSelection(0); initEvent(); &#125; &#125; private void initEvent() &#123; for (int i = 0; i &lt; flTv.getChildCount(); i++) &#123; final TextView childAt = (TextView) flTv.getChildAt(i); final int finalI = i; childAt.setOnClickListener(new OnClickListener() &#123; @Override public void onClick(View view) &#123; setSelection(finalI); &#125; &#125;); &#125; &#125; private void addTab(String msg) &#123; final int position = imgs.size(); ImageView ivBg = new ImageView(getContext()); int width = AutoUtils.getPercentWidthSize(206); int height = AutoUtils.getPercentHeightSize(78); int leftMargin = AutoUtils.getPercentWidthSize(170); int leftPadding = AutoUtils.getPercentWidthSize(50); int bottomPadding = AutoUtils.getPercentHeightSize(10); LayoutParams lpImg = new LayoutParams(width, height); lpImg.leftMargin = leftMargin * position; ivBg.setLayoutParams(lpImg); ivBg.setScaleType(ImageView.ScaleType.FIT_XY); TextView tvMsg = new TextView(getContext()); tvMsg.setLayoutParams(lpImg); tvMsg.setGravity(Gravity.BOTTOM); tvMsg.setTextColor(Color.WHITE); tvMsg.setPadding(leftPadding, 0, 0, bottomPadding); tvMsg.setText(msg); ivBg.setImageResource(normalDrawableId); flBg.addView(ivBg); flTv.addView(tvMsg); imgs.add(ivBg); &#125; public void setSelection(int position) &#123; int normalTextSize = AutoUtils.getPercentWidthSize(31); int largetTextSize = AutoUtils.getPercentWidthSize(36); for (int i = 0; i &lt; flTv.getChildCount(); i++) &#123; TextView childAt = (TextView) flTv.getChildAt(i); childAt.setTextSize(TypedValue.COMPLEX_UNIT_PX, normalTextSize); &#125; TextView childAt = (TextView) flTv.getChildAt(position); childAt.setTextSize(TypedValue.COMPLEX_UNIT_PX, largetTextSize); for (int i1 = 0; i1 &lt; imgs.size(); i1++) &#123; ImageView childAt1 = imgs.get(i1); childAt1.setImageResource(position == i1 ? selectDrawableId : normalDrawableId); &#125; for (int j = 0; j &lt; position; j++) &#123; flBg.bringChildToFront(imgs.get(j)); &#125; for (int j = imgs.size() - 1; j &gt; position; j--) &#123; flBg.bringChildToFront(imgs.get(j)); &#125; flBg.bringChildToFront(imgs.get(position)); if (onItemClickListener != null) &#123; onItemClickListener.onItemClick(position, DieJiaIndicator.this.position != position); &#125; this.position = position; &#125; @Override protected Parcelable onSaveInstanceState() &#123; Parcelable superState = super.onSaveInstanceState(); SaveState saveState = new SaveState(superState); saveState.position = this.position; return saveState; &#125; @Override protected void onRestoreInstanceState(Parcelable state) &#123; SaveState savedState = (SaveState) state; super.onRestoreInstanceState(savedState.getSuperState()); this.position = savedState.position; setSelection(position); &#125; public int getSelection() &#123; return position; &#125; static class SaveState extends BaseSavedState &#123; int position; public static final Creator&lt;SaveState&gt; CREATOR = new Creator&lt;SaveState&gt;() &#123; public SaveState createFromParcel(Parcel source) &#123; return new SaveState(source); &#125; public SaveState[] newArray(int size) &#123; return new SaveState[size]; &#125; &#125;; public int describeContents() &#123; return 0; &#125; public void writeToParcel(Parcel dest, int flags) &#123; super.writeToParcel(dest, flags); dest.writeInt(this.position); &#125; public SaveState(Parcelable superState) &#123; super(superState); &#125; protected SaveState(Parcel in) &#123; super(in); this.position = in.readInt(); &#125; &#125;&#125; 使用方式12indicator.setItems(R.drawable.detailinfotabtitle, R.drawable.detailinfotabtitlecheckedfull, items); 12345678910111213141516mViewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() &#123; @Override public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) &#123; &#125; @Override public void onPageSelected(int position) &#123; indicator.setSelection(position); &#125; @Override public void onPageScrollStateChanged(int state) &#123; &#125;&#125;); 12345678indicator.setOnItemClickListener(new DieJiaIndicator.OnItemClickListener() &#123; @Override public void onItemClick(int position, boolean changed) &#123; if (changed) &#123; mViewPager.setCurrentItem(position); &#125; &#125;&#125;);","categories":[{"name":"Android自定义控件","slug":"Android自定义控件","permalink":"http://zhouzhuo810.github.io/categories/Android%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"Android疑难杂症-onRestoreInstanceState类型强转报错","slug":"Android疑难杂症-onRestoreInstanceState类型强转报错","date":"2017-12-21T02:06:56.000Z","updated":"2024-06-13T11:58:36.766Z","comments":true,"path":"2017/12/21/Android疑难杂症-onRestoreInstanceState类型强转报错/","permalink":"http://zhouzhuo810.github.io/2017/12/21/Android%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87-onRestoreInstanceState%E7%B1%BB%E5%9E%8B%E5%BC%BA%E8%BD%AC%E6%8A%A5%E9%94%99/","excerpt":"问题重现层级关系 ViewPager+Indicator -&gt;Fragment -&gt;ViewPager+Indicator -&gt;Fragment","text":"问题重现层级关系 ViewPager+Indicator -&gt;Fragment -&gt;ViewPager+Indicator -&gt;Fragment 错误信息12345678910111213141516171819202122232425262728293031323334java.lang.ClassCastException: android.view.AbsSavedState$1 cannot be cast to com.keqiang.highcloud.ui.widget.DieJiaIndicator$SaveState at android.view.View.dispatchRestoreInstanceState(View.java:12799) at android.view.ViewGroup.dispatchRestoreInstanceState(ViewGroup.java:2637) at android.view.ViewGroup.dispatchRestoreInstanceState(ViewGroup.java:2643) at android.view.ViewGroup.dispatchRestoreInstanceState(ViewGroup.java:2643) at android.view.ViewGroup.dispatchRestoreInstanceState(ViewGroup.java:2643) at android.view.View.restoreHierarchyState(View.java:12777) at android.support.v4.app.Fragment.restoreViewState(Fragment.java:475) at android.support.v4.app.FragmentManagerImpl.moveToState(FragmentManager.java:1329) at android.support.v4.app.FragmentManagerImpl.moveFragmentToExpectedState(FragmentManager.java:1528) at android.support.v4.app.BackStackRecord.executeOps(BackStackRecord.java:753) at android.support.v4.app.FragmentManagerImpl.executeOps(FragmentManager.java:2363) at android.support.v4.app.FragmentManagerImpl.executeOpsTogether(FragmentManager.java:2149) at android.support.v4.app.FragmentManagerImpl.optimizeAndExecuteOps(FragmentManager.java:2103) at android.support.v4.app.FragmentManagerImpl.execSingleAction(FragmentManager.java:1984) at android.support.v4.app.BackStackRecord.commitNowAllowingStateLoss(BackStackRecord.java:626) at android.support.v4.app.FragmentPagerAdapter.finishUpdate(FragmentPagerAdapter.java:143) at android.support.v4.view.ViewPager.populate(ViewPager.java:1268) at android.support.v4.view.ViewPager.setCurrentItemInternal(ViewPager.java:668) at android.support.v4.view.ViewPager.setCurrentItemInternal(ViewPager.java:630) at android.support.v4.view.ViewPager.setCurrentItem(ViewPager.java:622) at zhouzhuo810.me.zzandframe.ui.widget.zzpagerindicator.ZzPagerIndicator.setCurrentItem(ZzPagerIndicator.java:248) at zhouzhuo810.me.zzandframe.ui.widget.zzpagerindicator.ZzPagerIndicator$3.onClick(ZzPagerIndicator.java:360) at android.view.View.performClick(View.java:4438) at android.view.View$PerformClick.run(View.java:18422) at android.os.Handler.handleCallback(Handler.java:733) at android.os.Handler.dispatchMessage(Handler.java:95) at android.os.Looper.loop(Looper.java:136) at android.app.ActivityThread.main(ActivityThread.java:5045) at java.lang.reflect.Method.invokeNative(Native Method) at java.lang.reflect.Method.invoke(Method.java:515) at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:779) at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:595) at dalvik.system.NativeStart.main(Native Method) 问题分析 上层ViewPager重新创建Fragment时下层ViewPager中的Fragment恢复状态时类型强转报错。 解决方案 方案1：避免重新创建 12 //如果页数固定，直接设置页数；如果动态，尽可能设置到大于页数。viewPager.setOffscreenPageLimit(一个较大值); 方案2：寻找强转类型报错的原因(暂未找到，有人说是Id重复使用问题)","categories":[{"name":"Android疑难杂症","slug":"Android疑难杂症","permalink":"http://zhouzhuo810.github.io/categories/Android%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"RxJava-无限重复定时任务","slug":"RxJava-无限重复定时任务","date":"2017-12-12T02:57:15.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"2017/12/12/RxJava-无限重复定时任务/","permalink":"http://zhouzhuo810.github.io/2017/12/12/RxJava-%E6%97%A0%E9%99%90%E9%87%8D%E5%A4%8D%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/","excerpt":"开启任务123456789101112131415161718192021222324252627282930313233343536373839private void getAllDatas(final long delay) &#123; //解除上次订阅 if (subscribe != null) &#123; subscribe.unsubscribe(); subscribe = null; &#125; subscribe = Observable.timer(delay, TimeUnit.MILLISECONDS) .flatMap(new Func1&lt;Long, Observable&lt;GetSomeThingResult&gt;&gt;() &#123; @Override public Observable&lt;GetSomeThingResult&gt; call(Long aLong) &#123; //接口调用 return Api.getDefaultApi().getSomeThing(); &#125; &#125;) .observeOn(AndroidSchedulers.mainThread()) .subscribeOn(Schedulers.io()) .subscribe(new Subscriber&lt;GetSomeThingResult&gt;() &#123; @Override public void onCompleted() &#123; &#125; @Override public void onError(Throwable e) &#123; ToastUtils.showCustomBgToast(getString(R.string.no_net_text) + e.toString()); getAllDatas(Constants.AUTO_REFRESH_DURATION); &#125; @Override public void onNext(GetSomeThingResult result) &#123; //... do some thing with data getAllDatas(Constants.AUTO_REFRESH_DURATION); &#125; &#125;); &#125;","text":"开启任务123456789101112131415161718192021222324252627282930313233343536373839private void getAllDatas(final long delay) &#123; //解除上次订阅 if (subscribe != null) &#123; subscribe.unsubscribe(); subscribe = null; &#125; subscribe = Observable.timer(delay, TimeUnit.MILLISECONDS) .flatMap(new Func1&lt;Long, Observable&lt;GetSomeThingResult&gt;&gt;() &#123; @Override public Observable&lt;GetSomeThingResult&gt; call(Long aLong) &#123; //接口调用 return Api.getDefaultApi().getSomeThing(); &#125; &#125;) .observeOn(AndroidSchedulers.mainThread()) .subscribeOn(Schedulers.io()) .subscribe(new Subscriber&lt;GetSomeThingResult&gt;() &#123; @Override public void onCompleted() &#123; &#125; @Override public void onError(Throwable e) &#123; ToastUtils.showCustomBgToast(getString(R.string.no_net_text) + e.toString()); getAllDatas(Constants.AUTO_REFRESH_DURATION); &#125; @Override public void onNext(GetSomeThingResult result) &#123; //... do some thing with data getAllDatas(Constants.AUTO_REFRESH_DURATION); &#125; &#125;); &#125; 取消任务1234567891011@Overrideprotected void onDestroy() &#123; super.onDestroy(); try &#123; if (subscribe != null &amp;&amp; !subscribe.isUnsubscribed()) &#123; subscribe.unsubscribe(); &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125;&#125;","categories":[{"name":"RxJava","slug":"RxJava","permalink":"http://zhouzhuo810.github.io/categories/RxJava/"}],"tags":[{"name":"RxJava","slug":"RxJava","permalink":"http://zhouzhuo810.github.io/tags/RxJava/"}]},{"title":"RxJava-模拟进度","slug":"RxJava-模拟进度","date":"2017-12-11T14:35:43.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"2017/12/11/RxJava-模拟进度/","permalink":"http://zhouzhuo810.github.io/2017/12/11/RxJava-%E6%A8%A1%E6%8B%9F%E8%BF%9B%E5%BA%A6/","excerpt":"","text":"12345678910111213141516171819202122232425//0-100 每隔20ms +1Observable.just(100) .flatMap(new Func1&lt;Integer, Observable&lt;Long&gt;&gt;() &#123; @Override public Observable&lt;Long&gt; call(Integer integer) &#123; return Observable.timer(20, TimeUnit.MILLISECONDS); &#125; &#125;) .compose(RxHelper.&lt;Long&gt;io_main()) .subscribe(new Subscriber&lt;Long&gt;() &#123; @Override public void onCompleted() &#123; &#125; @Override public void onError(Throwable e) &#123; &#125; @Override public void onNext(Long aLong) &#123; pb.setProgress(aLong.intValue()); &#125; &#125;); 应用场景 计时器 进度模拟 定时任务","categories":[{"name":"RxJava","slug":"RxJava","permalink":"http://zhouzhuo810.github.io/categories/RxJava/"}],"tags":[{"name":"RxJava","slug":"RxJava","permalink":"http://zhouzhuo810.github.io/tags/RxJava/"}]},{"title":"Android常用代码-bugly集成","slug":"Android常用代码-bugly集成","date":"2017-12-07T06:05:40.000Z","updated":"2024-06-13T11:58:36.766Z","comments":true,"path":"2017/12/07/Android常用代码-bugly集成/","permalink":"http://zhouzhuo810.github.io/2017/12/07/Android%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81-bugly%E9%9B%86%E6%88%90/","excerpt":"","text":"集成bugly12//buglycompile &#x27;com.tencent.bugly:crashreport:latest.release&#x27; 添加权限123&lt;!-- bugly start--&gt;&lt;uses-permission android:name=&quot;android.permission.READ_LOGS&quot; /&gt;&lt;!--bugly end--&gt; Application的onCreate方法中初始化不带X5内核12345try &#123; CrashReport.initCrashReport(this, &quot;你的appID&quot;, false);&#125; catch (Exception e) &#123; e.printStackTrace();&#125; 带X5内核123456789101112131415161718192021222324/*bugly+x5内核*/try &#123; CrashReport.UserStrategy strategy = new CrashReport.UserStrategy(this); strategy.setCrashHandleCallback(new CrashReport.CrashHandleCallback() &#123; public Map onCrashHandleStart(int crashType, String errorType, String errorMessage, String errorStack) &#123; LinkedHashMap map = new LinkedHashMap(); String x5CrashInfo = com.tencent.smtt.sdk.WebView.getCrashExtraMessage(GFApplication.this); map.put(&quot;x5crashInfo&quot;, x5CrashInfo); return map; &#125; @Override public byte[] onCrashHandleStart2GetExtraDatas(int crashType, String errorType, String errorMessage, String errorStack) &#123; try &#123; return &quot;Extra data.&quot;.getBytes(&quot;UTF-8&quot;); &#125; catch (Exception e) &#123; return null; &#125; &#125; &#125;); CrashReport.initCrashReport(this, &quot;你的appID&quot;, false, strategy);&#125; catch (Exception e) &#123; e.printStackTrace();&#125;","categories":[{"name":"Android常用代码","slug":"Android常用代码","permalink":"http://zhouzhuo810.github.io/categories/Android%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"Android签名打包-多渠道打包","slug":"Android签名打包-多渠道打包","date":"2017-12-07T05:59:28.000Z","updated":"2024-06-13T11:58:36.766Z","comments":true,"path":"2017/12/07/Android签名打包-多渠道打包/","permalink":"http://zhouzhuo810.github.io/2017/12/07/Android%E7%AD%BE%E5%90%8D%E6%89%93%E5%8C%85-%E5%A4%9A%E6%B8%A0%E9%81%93%E6%89%93%E5%8C%85/","excerpt":"","text":"复制libs common analytics 集成友盟+ App统计功能在Application的onCreate方法中调用 123456789101112/** * 初始化common库 * 参数1:上下文，不能为空 * 参数2:设备类型，UMConfigure.DEVICE_TYPE_PHONE为手机、UMConfigure.DEVICE_TYPE_BOX为盒子，默认为手机 * 参数3:Push推送业务的secret */try &#123; UMConfigure.init(this, UMConfigure.DEVICE_TYPE_PHONE, &quot;你的appID&quot;);&#125; catch (Exception e) &#123; e.printStackTrace();&#125; 添加相应权限123456789101112&lt;!-- 必须的权限 --&gt;&lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;&lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot; /&gt;&lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot; /&gt;&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt; &lt;!-- 推荐的权限 --&gt;&lt;!-- 添加如下权限，以便使用更多的第三方SDK和更精准的统计数据 --&gt;&lt;uses-permission android:name=&quot;android.permission.ACCESS_COARSE_LOCATION&quot; /&gt;&lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot; /&gt;&lt;uses-permission android:name=&quot;android.permission.CHANGE_WIFI_STATE&quot; /&gt;&lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt; 配置渠道123456789&lt;manifest&gt; &lt;application ……&gt; …… &lt;!--umeng start--&gt; &lt;meta-data android:value=&quot;你的AppID&quot; android:name=&quot;UMENG_APPKEY&quot;/&gt; &lt;meta-data android:value=&quot;$&#123;UMENG_CHANNEL_VALUE&#125;&quot; android:name=&quot;UMENG_CHANNEL&quot;/&gt; &lt;!--umeng end--&gt; &lt;/application&gt; &lt;/manifest&gt; 代码混淆1keep class com.umeng.commonsdk.** &#123;*;&#125; 多渠道配置123456789101112131415161718192021222324252627android &#123; productFlavors &#123; wandoujia &#123;&#125; yingyongbao &#123;&#125; c360 &#123;&#125; kq &#123;&#125; productFlavors.all &#123; flavor -&gt; flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name] &#125; &#125; applicationVariants.all &#123; variant -&gt; variant.outputs.each &#123; output -&gt; def outputFile = output.outputFile def fileName def flavor = productFlavors.name; if (outputFile != null &amp;&amp; outputFile.name.endsWith(&#x27;.apk&#x27;)) &#123; if (variant.buildType.name.equals(&#x27;release&#x27;)) &#123; fileName = &quot;名字_$&#123;defaultConfig.versionName&#125;_$&#123;flavor&#125;.apk&quot; &#125; else if (variant.buildType.name.equals(&#x27;debug&#x27;)) &#123; fileName = &quot;名字_$&#123;defaultConfig.versionName&#125;_debug_$&#123;flavor&#125;.apk&quot; &#125; output.outputFile = new File(outputFile.parent, fileName) &#125; &#125; &#125;&#125;","categories":[{"name":"Android签名打包","slug":"Android签名打包","permalink":"http://zhouzhuo810.github.io/categories/Android%E7%AD%BE%E5%90%8D%E6%89%93%E5%8C%85/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"AndroidStudio技巧-Terminal权限问题","slug":"AndroidStudio技巧-Terminal权限问题","date":"2017-11-21T06:07:07.000Z","updated":"2024-06-13T11:58:36.750Z","comments":true,"path":"2017/11/21/AndroidStudio技巧-Terminal权限问题/","permalink":"http://zhouzhuo810.github.io/2017/11/21/AndroidStudio%E6%8A%80%E5%B7%A7-Terminal%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98/","excerpt":"","text":"系统macOs Sierra 10.12.6系统 工具Android Studio 2.3.1 Terminal 问题描述执行.&#x2F;gradlew install命令时提示gradlew: Permission Denied 解决方案1chmod +x gradlew 再操作即可。","categories":[{"name":"Android开发工具","slug":"Android开发工具","permalink":"http://zhouzhuo810.github.io/categories/Android%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"Android疑难杂症-ViewPager+分组列表+指示器悬停","slug":"Android疑难杂症-ViewPager-分组列表-指示器悬停","date":"2017-11-15T09:17:04.000Z","updated":"2024-06-13T11:58:36.766Z","comments":true,"path":"2017/11/15/Android疑难杂症-ViewPager-分组列表-指示器悬停/","permalink":"http://zhouzhuo810.github.io/2017/11/15/Android%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87-ViewPager-%E5%88%86%E7%BB%84%E5%88%97%E8%A1%A8-%E6%8C%87%E7%A4%BA%E5%99%A8%E6%82%AC%E5%81%9C/","excerpt":"系统自带方案12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;android.support.design.widget.CoordinatorLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; &gt; &lt;android.support.design.widget.AppBarLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:theme=&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;&gt; &lt;android.support.design.widget.CollapsingToolbarLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; app:expandedTitleMarginEnd=&quot;64dp&quot; app:expandedTitleMarginStart=&quot;48dp&quot; app:layout_scrollFlags=&quot;scroll|exitUntilCollapsed&quot;&gt; &lt;ImageView android:id=&quot;@+id/main.backdrop&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;300dp&quot; android:scaleType=&quot;centerCrop&quot; android:src=&quot;@drawable/material_img&quot; app:layout_collapseMode=&quot;parallax&quot; /&gt; &lt;android.support.v7.widget.Toolbar android:id=&quot;@+id/toolbar&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;?android:attr/actionBarSize&quot; app:layout_collapseMode=&quot;pin&quot; /&gt; &lt;/android.support.design.widget.CollapsingToolbarLayout&gt; &lt;/android.support.design.widget.AppBarLayout&gt; &lt;android.support.v4.widget.NestedScrollView android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:paddingTop=&quot;50dp&quot; app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;&gt; &lt;TextView android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;@string/my_txt&quot; android:textSize=&quot;20sp&quot; /&gt; &lt;/android.support.v4.widget.NestedScrollView&gt; &lt;/android.support.design.widget.CoordinatorLayout&gt; 此方案不利于屏幕适配，故不采用。","text":"系统自带方案12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;android.support.design.widget.CoordinatorLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; &gt; &lt;android.support.design.widget.AppBarLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:theme=&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;&gt; &lt;android.support.design.widget.CollapsingToolbarLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; app:expandedTitleMarginEnd=&quot;64dp&quot; app:expandedTitleMarginStart=&quot;48dp&quot; app:layout_scrollFlags=&quot;scroll|exitUntilCollapsed&quot;&gt; &lt;ImageView android:id=&quot;@+id/main.backdrop&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;300dp&quot; android:scaleType=&quot;centerCrop&quot; android:src=&quot;@drawable/material_img&quot; app:layout_collapseMode=&quot;parallax&quot; /&gt; &lt;android.support.v7.widget.Toolbar android:id=&quot;@+id/toolbar&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;?android:attr/actionBarSize&quot; app:layout_collapseMode=&quot;pin&quot; /&gt; &lt;/android.support.design.widget.CollapsingToolbarLayout&gt; &lt;/android.support.design.widget.AppBarLayout&gt; &lt;android.support.v4.widget.NestedScrollView android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:paddingTop=&quot;50dp&quot; app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;&gt; &lt;TextView android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;@string/my_txt&quot; android:textSize=&quot;20sp&quot; /&gt; &lt;/android.support.v4.widget.NestedScrollView&gt; &lt;/android.support.design.widget.CoordinatorLayout&gt; 此方案不利于屏幕适配，故不采用。 指示器悬停参考的张鸿洋大神的Demo。张鸿洋大神的Demo 新建values&#x2F;ids_sticky_nav_layout.xml.xml1234567&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;resources&gt; &lt;item name=&quot;id_stickynavlayout_topview&quot; type=&quot;id&quot;/&gt; &lt;item name=&quot;id_stickynavlayout_viewpager&quot; type=&quot;id&quot;/&gt; &lt;item name=&quot;id_stickynavlayout_indicator&quot; type=&quot;id&quot;/&gt; &lt;item name=&quot;id_stickynavlayout_innerscrollview&quot; type=&quot;id&quot;/&gt;&lt;/resources&gt; 新建StickyNavLayoutpackage com.example.demo.view.widget.stickynavlayout; import android.animation.ValueAnimator;import android.content.Context;import android.support.v4.view.NestedScrollingParent;import android.support.v4.view.ViewCompat;import android.support.v4.view.ViewPager;import android.support.v4.widget.SwipeRefreshLayout;import android.support.v7.widget.RecyclerView;import android.util.AttributeSet;import android.util.Log;import android.view.VelocityTracker;import android.view.View;import android.view.ViewConfiguration;import android.view.ViewGroup;import android.view.animation.Interpolator;import android.widget.LinearLayout;import android.widget.OverScroller; import com.example.demo.R; public class StickyNavLayout extends LinearLayout implements NestedScrollingParent &#123; private static final String TAG = &quot;StickyNavLayout&quot;; @Override public boolean onStartNestedScroll(View child, View target, int nestedScrollAxes) &#123; Log.e(TAG, &quot;onStartNestedScroll&quot;); return true; &#125; @Override public void onNestedScrollAccepted(View child, View target, int nestedScrollAxes) &#123; Log.e(TAG, &quot;onNestedScrollAccepted&quot;); &#125; @Override public void onStopNestedScroll(View target) &#123; Log.e(TAG, &quot;onStopNestedScroll&quot;); &#125; @Override public void onNestedScroll(View target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed) &#123; Log.e(TAG, &quot;onNestedScroll&quot;); &#125; @Override public void onNestedPreScroll(View target, int dx, int dy, int[] consumed) &#123; Log.e(TAG, &quot;onNestedPreScroll&quot;); boolean hiddenTop = dy &gt; 0 &amp;&amp; getScrollY() &lt; mTopViewHeight; boolean showTop = dy &lt; 0 &amp;&amp; getScrollY() &gt;= 0 &amp;&amp; !ViewCompat.canScrollVertically(target, -1); if (hiddenTop || showTop) &#123; scrollBy(0, dy); consumed[1] = dy; &#125; &#125; private int TOP_CHILD_FLING_THRESHOLD = 3; @Override public boolean onNestedFling(View target, float velocityX, float velocityY, boolean consumed) &#123; //如果是recyclerView 根据判断第一个元素是哪个位置可以判断是否消耗 //这里判断如果第一个元素的位置是大于TOP_CHILD_FLING_THRESHOLD的 //认为已经被消耗，在animateScroll里不会对velocityY&lt;0时做处理 if ((target instanceof RecyclerView) &amp;&amp; velocityY &lt; 0) &#123; final RecyclerView recyclerView = (RecyclerView) target; final View firstChild = recyclerView.getChildAt(0); final int childAdapterPosition = recyclerView.getChildAdapterPosition(firstChild); consumed = childAdapterPosition &gt; TOP_CHILD_FLING_THRESHOLD; &#125; if (!consumed) &#123; animateScroll(velocityY, computeDuration(0), consumed); &#125; else &#123; animateScroll(velocityY, computeDuration(velocityY), consumed); &#125; return true; &#125; @Override public boolean onNestedPreFling(View target, float velocityX, float velocityY) &#123; //不做拦截 可以传递给子View return false; &#125; @Override public int getNestedScrollAxes() &#123; Log.e(TAG, &quot;getNestedScrollAxes&quot;); return 0; &#125; /** * 根据速度计算滚动动画持续时间 * * @param velocityY * @return */ private int computeDuration(float velocityY) &#123; final int distance; if (velocityY &gt; 0) &#123; distance = Math.abs(mTop.getHeight() - getScrollY()); &#125; else &#123; distance = Math.abs(mTop.getHeight() - (mTop.getHeight() - getScrollY())); &#125; final int duration; velocityY = Math.abs(velocityY); if (velocityY &gt; 0) &#123; duration = 3 * Math.round(1000 * (distance / velocityY)); &#125; else &#123; final float distanceRatio = (float) distance / getHeight(); duration = (int) ((distanceRatio + 1) * 150); &#125; return duration; &#125; private void animateScroll(float velocityY, final int duration, boolean consumed) &#123; final int currentOffset = getScrollY(); final int topHeight = mTop.getHeight(); if (mOffsetAnimator == null) &#123; mOffsetAnimator = new ValueAnimator(); mOffsetAnimator.setInterpolator(mInterpolator); mOffsetAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123; @Override public void onAnimationUpdate(ValueAnimator animation) &#123; if (animation.getAnimatedValue() instanceof Integer) &#123; scrollTo(0, (Integer) animation.getAnimatedValue()); &#125; &#125; &#125;); &#125; else &#123; mOffsetAnimator.cancel(); &#125; mOffsetAnimator.setDuration(Math.min(duration, 600)); if (velocityY &gt;= 0) &#123; mOffsetAnimator.setIntValues(currentOffset, topHeight); mOffsetAnimator.start(); &#125; else &#123; //如果子View没有消耗down事件 那么就让自身滑倒0位置 if (!consumed) &#123; mOffsetAnimator.setIntValues(currentOffset, 0); mOffsetAnimator.start(); &#125; &#125; &#125; private View mTop; private View mNav; private ViewPager mViewPager; private int mTopViewHeight; private OverScroller mScroller; private VelocityTracker mVelocityTracker; private ValueAnimator mOffsetAnimator; private Interpolator mInterpolator; private int mTouchSlop; private int mMaximumVelocity, mMinimumVelocity; private float mLastY; private boolean mDragging; public StickyNavLayout(Context context, AttributeSet attrs) &#123; super(context, attrs); setOrientation(LinearLayout.VERTICAL); mScroller = new OverScroller(context); mTouchSlop = ViewConfiguration.get(context).getScaledTouchSlop(); mMaximumVelocity = ViewConfiguration.get(context) .getScaledMaximumFlingVelocity(); mMinimumVelocity = ViewConfiguration.get(context) .getScaledMinimumFlingVelocity(); &#125; private void initVelocityTrackerIfNotExists() &#123; if (mVelocityTracker == null) &#123; mVelocityTracker = VelocityTracker.obtain(); &#125; &#125; private void recycleVelocityTracker() &#123; if (mVelocityTracker != null) &#123; mVelocityTracker.recycle(); mVelocityTracker = null; &#125; &#125; // @Override// public boolean onTouchEvent(MotionEvent event)// &#123;// initVelocityTrackerIfNotExists();// mVelocityTracker.addMovement(event);// int action = event.getAction();// float y = event.getY();//// switch (action)// &#123;// case MotionEvent.ACTION_DOWN:// if (!mScroller.isFinished())// mScroller.abortAnimation();// mLastY = y;// return true;// case MotionEvent.ACTION_MOVE:// float dy = y - mLastY;//// if (!mDragging &amp;&amp; Math.abs(dy) &gt; mTouchSlop)// &#123;// mDragging = true;// &#125;// if (mDragging)// &#123;// scrollBy(0, (int) -dy);// &#125;//// mLastY = y;// break;// case MotionEvent.ACTION_CANCEL:// mDragging = false;// recycleVelocityTracker();// if (!mScroller.isFinished())// &#123;// mScroller.abortAnimation();// &#125;// break;// case MotionEvent.ACTION_UP:// mDragging = false;// mVelocityTracker.computeCurrentVelocity(1000, mMaximumVelocity);// int velocityY = (int) mVelocityTracker.getYVelocity();// if (Math.abs(velocityY) &gt; mMinimumVelocity)// &#123;// fling(-velocityY);// &#125;// recycleVelocityTracker();// break;// &#125;//// return super.onTouchEvent(event);// &#125; @Override protected void onFinishInflate() &#123; super.onFinishInflate(); mTop = findViewById(R.id.id_stickynavlayout_topview); mNav = findViewById(R.id.id_stickynavlayout_indicator); View view = findViewById(R.id.id_stickynavlayout_viewpager); if (!(view instanceof ViewPager)) &#123; throw new RuntimeException( &quot;id_stickynavlayout_viewpager show used by ViewPager !&quot;); &#125; mViewPager = (ViewPager) view; &#125; @Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123; //不限制顶部的高度 super.onMeasure(widthMeasureSpec, heightMeasureSpec); getChildAt(0).measure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED)); ViewGroup.LayoutParams params = mViewPager.getLayoutParams(); params.height = getMeasuredHeight() - mNav.getMeasuredHeight(); setMeasuredDimension(getMeasuredWidth(), mTop.getMeasuredHeight() + mNav.getMeasuredHeight() + mViewPager.getMeasuredHeight()); &#125; @Override protected void onSizeChanged(int w, int h, int oldw, int oldh) &#123; super.onSizeChanged(w, h, oldw, oldh); mTopViewHeight = mTop.getMeasuredHeight(); Log.e(&quot;TTT&quot;, &quot;height=&quot; + mTopViewHeight); &#125; public void fling(int velocityY) &#123; mScroller.fling(0, getScrollY(), 0, velocityY, 0, 0, 0, mTopViewHeight); invalidate(); &#125; @Override public void scrollTo(int x, int y) &#123; if (y &lt; 0) &#123; y = 0; &#125; if (y &gt; mTopViewHeight) &#123; y = mTopViewHeight; &#125; if (y != getScrollY()) &#123; super.scrollTo(x, y); &#125; &#125; @Override public void computeScroll() &#123; if (mScroller.computeScrollOffset()) &#123; scrollTo(0, mScroller.getCurrY()); invalidate(); &#125; &#125; &#125; 布局结构123456789101112131415161718192021222324252627282930313233343536373839404142 &lt;com.example.demo.view.widget.stickynavlayout.StickyNavLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot;&gt; &lt;!-- top view --&gt; &lt;RelativeLayout android:id=&quot;@id/id_stickynavlayout_topview&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:background=&quot;#4400ff00&quot;&gt; &lt;com.youth.banner.Banner android:id=&quot;@+id/banner&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;400px&quot; /&gt; &lt;/RelativeLayout&gt; &lt;!-- 指示器 --&gt; &lt;com.example.demo.view.widget.PagerSlidingTabStrip android:id=&quot;@id/id_stickynavlayout_indicator&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;@dimen/activity_title_height&quot; android:background=&quot;@color/white&quot; zz:pstsDividerColor=&quot;@android:color/transparent&quot; zz:pstsIndicatorColor=&quot;@color/colorMain&quot; zz:pstsIndicatorHeight=&quot;3px&quot; zz:pstsShouldExpand=&quot;false&quot; zz:pstsUnderlineColor=&quot;@android:color/transparent&quot; zz:pstsUnderlineHeight=&quot;6px&quot; zz:zmsSelectedTabTextColor=&quot;@color/colorMain&quot; zz:zmsSelectedTabTextSize=&quot;34px&quot; zz:zmsTabTextColor=&quot;@android:color/black&quot; zz:zmsTabTextSize=&quot;34px&quot; /&gt; &lt;!-- ViewPager --&gt; &lt;android.support.v4.view.ViewPager android:id=&quot;@id/id_stickynavlayout_viewpager&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; /&gt;&lt;/com.example.demo.view.widget.stickynavlayout.StickyNavLayout&gt; 分组列表本来考虑使用ExpandableListView，但是和StickyNavLayout不兼容。 于是找了另一个解决方案： BaseRecyclerViewAdapterHelper 添加依赖123456allprojects &#123; repositories &#123; ... maven &#123; url &quot;https://jitpack.io&quot; &#125; &#125;&#125; 123dependencies &#123; compile &#x27;com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.30&#x27;&#125; 定义分组适配器123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899package com.keqiang.highcloud.view.adapter; import android.view.View;import android.view.ViewGroup; import com.chad.library.adapter.base.BaseMultiItemQuickAdapter;import com.chad.library.adapter.base.BaseViewHolder;import com.chad.library.adapter.base.entity.MultiItemEntity;import com.keqiang.highcloud.R;import com.keqiang.highcloud.model.http.entity.test.MachineDetailsTabEntity;import com.keqiang.highcloud.utils.display.ViewUtil; import java.util.List; /** * Created by user999 on 2016/6/7. */public class MachineDetailTabAdapter extends BaseMultiItemQuickAdapter&lt;MultiItemEntity, BaseViewHolder&gt; &#123; public static final int TYPE_GROUP = 1; public static final int TYPE_CHILD = 2; /** * Same as QuickAdapter#QuickAdapter(Context,int) but with * some initialization data. * * @param data A new list is created out of this one to avoid mutable list */ public MachineDetailTabAdapter(List&lt;MultiItemEntity&gt; data) &#123; super(data); addItemType(TYPE_GROUP, R.layout.list_expand_group_item); addItemType(TYPE_CHILD, R.layout.list_expand_child_item); &#125; @Override protected BaseViewHolder createBaseViewHolder(ViewGroup parent, int layoutResId) &#123; BaseViewHolder root = super.createBaseViewHolder(parent, layoutResId); ViewUtil.scaleContentView((ViewGroup) root.itemView); return root; &#125; @Override protected void convert(final BaseViewHolder helper, final MultiItemEntity item) &#123; switch (helper.getItemViewType()) &#123; case TYPE_GROUP: final MachineDetailsTabEntity.DataBean.TasksBean.DetailInfoBean entity = (MachineDetailsTabEntity.DataBean.TasksBean.DetailInfoBean) item; switch (entity.getIndex()) &#123; case 0: helper.setImageResource(R.id.list_group_pic, R.drawable.mac_detail_one); helper.setTextColor(R.id.list_group_title, mContext.getResources().getColor(R.color.color_mac_one)); break; case 1: helper.setImageResource(R.id.list_group_pic, R.drawable.mac_detail_two); helper.setTextColor(R.id.list_group_title, mContext.getResources().getColor(R.color.color_mac_two)); break; case 2: helper.setImageResource(R.id.list_group_pic, R.drawable.mac_detail_three); helper.setTextColor(R.id.list_group_title, mContext.getResources().getColor(R.color.color_mac_three)); break; default: helper.setImageResource(R.id.list_group_pic, R.drawable.mac_detail_last); helper.setTextColor(R.id.list_group_title, mContext.getResources().getColor(R.color.color_mac_other)); break; &#125; helper.setText(R.id.list_group_title, entity.getMainTitle()); helper.itemView.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; int pos = helper.getAdapterPosition(); if (entity.isExpanded()) &#123; collapse(pos); &#125; else &#123; expand(pos); &#125; &#125; &#125;); break; case TYPE_CHILD: final MachineDetailsTabEntity.DataBean.TasksBean.DetailInfoBean.InfoBean entity1 = (MachineDetailsTabEntity.DataBean.TasksBean.DetailInfoBean.InfoBean) item; helper.setText(R.id.list_item_machine_detail_tv_device_title, entity1.getTitle()); helper.setText(R.id.list_item_machine_detail_tv_device_value, entity1.getValue()); switch (entity1.getIndex()) &#123; case 0: helper.setImageResource(R.id.list_item_machine_detail_iv_device_point, R.drawable.mac_one_shape); break; case 1: helper.setImageResource(R.id.list_item_machine_detail_iv_device_point, R.drawable.mac_two_shape); break; case 2: helper.setImageResource(R.id.list_item_machine_detail_iv_device_point, R.drawable.mac_three_shape); break; default: helper.setImageResource(R.id.list_item_machine_detail_iv_device_point, R.drawable.mac_other_shape); break; &#125; break; &#125; &#125;&#125; 实体类添加分组功能 分组对应实体类必须继承AbstractExpandableItem&lt;组员实体类&gt; 和实现接口MultiItemEntity； 组员对应实体类必须实现接口MultiItemEntity。 123456789101112131415161718192021222324252627282930313233343536373839404142434445public static class DetailInfoBean extends AbstractExpandableItem&lt;DetailInfoBean.InfoBean&gt; implements MultiItemEntity&#123; private int index = 0; public int getIndex() &#123; return index; &#125; public void setIndex(int index) &#123; this.index = index; &#125; @Override public int getLevel() &#123; return 0; &#125; @Override public int getItemType() &#123; return MachineDetailTabAdapter.TYPE_GROUP; &#125; public static class InfoBean implements MultiItemEntity &#123; private int index = 0; public int getIndex() &#123; return index; &#125; public void setIndex(int index) &#123; this.index = index; &#125; @Override public int getLevel() &#123; return 0; &#125; @Override public int getItemType() &#123; return MachineDetailTabAdapter.TYPE_GROUP; &#125;&#125; Activity数据填充1234567891011121314151617181920212223242526272829303132final List&lt;String&gt; tabNames = new ArrayList&lt;&gt;(); for (int i = 0; i &lt; data.getTasks().size(); i++) &#123; tabNames.add(&quot;任务&quot; + (i + 1));&#125; final List&lt;MachineDetailFragment&gt; fragments = new ArrayList&lt;&gt;();for (int i = 0; i &lt; tabNames.size(); i++) &#123; fragments.add(MachineDetailFragment.newInstance(macId, tabNames.get(i), data.getTasks().get(i)));&#125; mAdapter = new FragmentPagerAdapter(getSupportFragmentManager()) &#123; @Override public int getCount() &#123; return fragments.size(); &#125; @Override public Fragment getItem(int position) &#123; return fragments.get(position); &#125; @Override public CharSequence getPageTitle(int position) &#123; return tabNames.get(position); &#125;&#125;; mViewPager.setAdapter(mAdapter);mViewPager.setCurrentItem(0);mIndicator.setViewPager(mViewPager);mIndicator.updatePosition(0); Fragment填数据123456789101112131415161718192021222324252627List&lt;MultiItemEntity&gt; list = new ArrayList&lt;&gt;();List&lt;MachineDetailsTabEntity.DataBean.TasksBean.DetailInfoBean&gt; detailInfo = data.getDetailInfo();for (int i = 0; i &lt; detailInfo.size(); i++) &#123; MachineDetailsTabEntity.DataBean.TasksBean.DetailInfoBean entity = detailInfo.get(i); //设置GroupPosition entity.setIndex(i); //这个必须加！！！，不然刷新数据会重复添加。 if (entity.getSubItems() != null) &#123; entity.getSubItems().clear(); &#125; if (entity.getInfo() != null) &#123; for (MachineDetailsTabEntity.DataBean.TasksBean.DetailInfoBean.InfoBean infoEntity : entity.getInfo()) &#123; //设置GroupPosition infoEntity.setIndex(i); entity.addSubItem(infoEntity); &#125; &#125; list.add(entity);&#125;adapter.setNewData(list);//为了保证能展示出来，先收起来。for (int i = 0; i &lt; detailInfo.size(); i++) &#123; //注意！！！，这里如果adapter添加了n个header则i+n。 adapter.collapse(i+1);&#125;//全部展开adapter.expandAll(); 效果图 潜在解决方案Android-ObservableScrollView 由于时间有限，还没来得及尝试此方案，后续再研究一下。","categories":[{"name":"Android疑难杂症","slug":"Android疑难杂症","permalink":"http://zhouzhuo810.github.io/categories/Android%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"Androidd开源控件-Glide","slug":"Android开源控件-Glide","date":"2017-11-14T06:44:24.000Z","updated":"2024-06-13T11:58:36.766Z","comments":true,"path":"2017/11/14/Android开源控件-Glide/","permalink":"http://zhouzhuo810.github.io/2017/11/14/Android%E5%BC%80%E6%BA%90%E6%8E%A7%E4%BB%B6-Glide/","excerpt":"Glide 4.3.1 (4.x用起来更麻烦了)集成123456789repositories &#123; mavenCentral() maven &#123; url &#x27;https://maven.google.com&#x27; &#125;&#125;dependencies &#123; compile &#x27;com.github.bumptech.glide:glide:4.3.1&#x27; annotationProcessor &#x27;com.github.bumptech.glide:compiler:4.3.1&#x27;&#125;","text":"Glide 4.3.1 (4.x用起来更麻烦了)集成123456789repositories &#123; mavenCentral() maven &#123; url &#x27;https://maven.google.com&#x27; &#125;&#125;dependencies &#123; compile &#x27;com.github.bumptech.glide:glide:4.3.1&#x27; annotationProcessor &#x27;com.github.bumptech.glide:compiler:4.3.1&#x27;&#125; 清理缓存12345678910111213Glide.get(getActivity()).clearMemory();new Thread(new Runnable() &#123; @Override public void run() &#123; Glide.get(getActivity()).clearDiskCache(); getActivity().runOnUiThread(new Runnable() &#123; @Override public void run() &#123; ToastUtils.showCustomBgToast(&quot;清理成功！&quot;); &#125; &#125;); &#125;&#125;).start(); 圆形图片1234Glide.with(mContext).load(url).apply(new RequestOptions() .circleCrop()).into(ivPhoto); 默认和错误图片12345Glide.with(mContext).load(url).apply(new RequestOptions() .error(R.drawable.photo_me) .placeholder(R.drawable.photo_me)).into(ivPhoto); 加载动画123Glide.with(mContext).load(url).transition(new DrawableTransitionOptions().crossFade(300)).into(ivPhoto); Glide 3.8.012345678repositories &#123; mavenCentral() maven &#123; url &#x27;https://maven.google.com&#x27; &#125;&#125; dependencies &#123; compile &#x27;com.github.bumptech.glide:glide:3.8.0&#x27;&#125; 使用1234567891011121314151617Glide.with(this).load(url).placeholder(R.drawable.ic_default).error(R.drawable.ic_default).crossFade().listener(new RequestListener&lt;String, GlideDrawable&gt;() &#123; @Override public boolean onException(Exception e, String model, Target&lt;GlideDrawable&gt; target, boolean isFirstResource) &#123; return false; &#125; @Override public boolean onResourceReady(GlideDrawable resource, String model, Target&lt;GlideDrawable&gt; target, boolean isFromMemoryCache, boolean isFirstResource) &#123; return false; &#125; &#125;).into(iv);","categories":[{"name":"Android开源控件","slug":"Android开源控件","permalink":"http://zhouzhuo810.github.io/categories/Android%E5%BC%80%E6%BA%90%E6%8E%A7%E4%BB%B6/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"Android常用代码-App更新","slug":"Android常用代码-App更新","date":"2017-11-10T08:52:50.000Z","updated":"2024-06-13T11:58:36.766Z","comments":true,"path":"2017/11/10/Android常用代码-App更新/","permalink":"http://zhouzhuo810.github.io/2017/11/10/Android%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81-App%E6%9B%B4%E6%96%B0/","excerpt":"","text":"APP更新逻辑12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879private void checkUpdate() &#123; String key = SpUtil.getKey(); Api.getApi0() .CheckUpdate(key, SystemUtil.getPackageInfo(this).versionCode) .compose(RxHelper.&lt;CheckUpdateResult&gt;io_main()) .subscribe(new Subscriber&lt;CheckUpdateResult&gt;() &#123; @Override public void onCompleted() &#123; &#125; @Override public void onError(Throwable e) &#123; &#125; @Override public void onNext(CheckUpdateResult checkUpdateResult) &#123; if (checkUpdateResult.getCode() == 1) &#123; CheckUpdateResult.DataEntity data = checkUpdateResult.getData(); showUpdate(data); &#125; &#125; &#125;);&#125; private void showUpdate(final CheckUpdateResult.DataEntity data) &#123; if (data != null) &#123; showTwoBtnDialog(&quot;更新&quot;, &quot;v&quot; + data.getVersionName() + &quot;\\n&quot; + data.getUpdateInfo(), false, new IBaseActivity.OnTwoBtnClick() &#123; @Override public void onOk() &#123; final TextView[] tv = new TextView[1]; final ProgressBar[] pb = new ProgressBar[1]; showUpdateDialog(&quot;更新&quot;, &quot;即将开始下载...&quot;, false, new IBaseActivity.OnOneBtnClickListener() &#123; @Override public void onProgress(TextView textView, ProgressBar progressBar) &#123; tv[0] = textView; pb[0] = progressBar; &#125; @Override public void onOK() &#123; &#125; &#125;); String url = Constants.API + File.separator + data.getUrl(); final String name = &quot;HighNetFix_&quot; + data.getVersionName() + &quot;_&quot; + data.getVersionCode() + &quot;.apk&quot;; OkGo.&lt;File&gt;get(url) .tag(this) .execute(new FileCallback(Constants.APK_DOWNLOAD_PATH, name) &#123; @Override public void onSuccess(Response&lt;File&gt; response) &#123; hideUpdateDialog(); ApkUtils.installApk(HomePageActivity.this, BuildConfig.APPLICATION_ID, Constants.APK_DOWNLOAD_PATH, name); &#125; @Override public void onError(Response&lt;File&gt; response) &#123; hideUpdateDialog(); ToastUtils.showCustomBgToast(&quot;下载失败，请检查您的网络设置。&quot;); &#125; @Override public void downloadProgress(Progress progress) &#123; long currentSize = progress.currentSize; long totalSize = progress.totalSize; int pro = (int) (currentSize * 100.0 / totalSize + 0.5f); tv[0].setText(&quot;已下载：&quot; + pro + &quot;%&quot;); pb[0].setProgress(pro); &#125; &#125;); &#125; @Override public void onCancel() &#123; &#125; &#125;); &#125;&#125;","categories":[{"name":"Android常用代码","slug":"Android常用代码","permalink":"http://zhouzhuo810.github.io/categories/Android%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"Android疑难杂症-Mac系统升级导致svn失效问题","slug":"Android疑难杂症-Mac系统升级导致svn失效问题","date":"2017-11-08T05:20:04.000Z","updated":"2024-06-13T11:58:36.766Z","comments":true,"path":"2017/11/08/Android疑难杂症-Mac系统升级导致svn失效问题/","permalink":"http://zhouzhuo810.github.io/2017/11/08/Android%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87-Mac%E7%B3%BB%E7%BB%9F%E5%8D%87%E7%BA%A7%E5%AF%BC%E8%87%B4svn%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/","excerpt":"问题描述Mac系统升级或Xcode系统升级后，打开Android Studio的老项目，svn没法使用了。 且打开终端，输入svn upgrade会出现如下问题。 1Agreeing to the Xcode/iOS license requires admin privileges, please re-run as root via sudo.","text":"问题描述Mac系统升级或Xcode系统升级后，打开Android Studio的老项目，svn没法使用了。 且打开终端，输入svn upgrade会出现如下问题。 1Agreeing to the Xcode/iOS license requires admin privileges, please re-run as root via sudo. 解决方案升级之后权限问题方式1（推荐）打开XCode，同意协议。 方式21、打开终端，输入 1sudo xcodebuild -license 2、终端提示敲回车键（enter）打开许可协议，照做 3、终端提示 按下 “space” 键阅读许可协议，按“q” 不阅读 4、最终，终端会出现三个选项，agree 、print、cancel，不用想，能不是agree 吗！输入agree，然后enter 还原svn1、终端，切换到项目根目录 2、输入 1svn upgrade 3、问题解决。","categories":[{"name":"Android疑难杂症","slug":"Android疑难杂症","permalink":"http://zhouzhuo810.github.io/categories/Android%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"AndroidStudio技巧-mac上导入导出SVN项目","slug":"AndroidStudio技巧-mac导入SVN项目","date":"2017-11-07T09:20:43.000Z","updated":"2024-06-13T11:58:36.750Z","comments":true,"path":"2017/11/07/AndroidStudio技巧-mac导入SVN项目/","permalink":"http://zhouzhuo810.github.io/2017/11/07/AndroidStudio%E6%8A%80%E5%B7%A7-mac%E5%AF%BC%E5%85%A5SVN%E9%A1%B9%E7%9B%AE/","excerpt":"","text":"Android Studio -&gt; SVN 1.打开项目 2.Preferences -&gt; Version Control -&gt; Ignored Files（1）app&#x2F;build（2）build（3）*.iml 3.VCS -&gt; import into version control -&gt; import into subversion 4.Submit SVN -&gt; Android Studio 1.Check out project from version control 2.选择Subversion 3.选中项目文件夹根目录 4.选择保存路径(非中文路径，新建一个项目文件夹) 5.等待完成(如果打开会报错,大多是找不到gradle,别急)。 6.复制其他项目的local.properties文件到项目文件夹。 7.open a new Android Studio project打开项目","categories":[{"name":"Android开发工具","slug":"Android开发工具","permalink":"http://zhouzhuo810.github.io/categories/Android%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"Android疑难杂症-ViewPager禁止左右滑动","slug":"Android疑难杂症-ViewPager禁止左右滑动","date":"2017-10-31T05:03:00.000Z","updated":"2024-06-13T11:58:36.766Z","comments":true,"path":"2017/10/31/Android疑难杂症-ViewPager禁止左右滑动/","permalink":"http://zhouzhuo810.github.io/2017/10/31/Android%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87-ViewPager%E7%A6%81%E6%AD%A2%E5%B7%A6%E5%8F%B3%E6%BB%91%E5%8A%A8/","excerpt":"","text":"123456789101112131415161718192021222324252627import android.content.Context;import android.support.v4.view.ViewPager;import android.util.AttributeSet;import android.view.MotionEvent; /** * Created by zhouzhuo810 on 2017/10/31. */public class NoScrollViewPager extends ViewPager &#123; public NoScrollViewPager(Context context) &#123; super(context); &#125; public NoScrollViewPager(Context context, AttributeSet attrs) &#123; super(context, attrs); &#125; @Override public boolean onInterceptTouchEvent(MotionEvent ev) &#123; return false; &#125; @Override public boolean onTouchEvent(MotionEvent ev) &#123; return true; &#125;&#125;","categories":[{"name":"Android疑难杂症","slug":"Android疑难杂症","permalink":"http://zhouzhuo810.github.io/categories/Android%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"Java工具类-二维码生成和解析","slug":"JavaEE-二维码生成和解析","date":"2017-10-20T07:36:31.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"2017/10/20/JavaEE-二维码生成和解析/","permalink":"http://zhouzhuo810.github.io/2017/10/20/JavaEE-%E4%BA%8C%E7%BB%B4%E7%A0%81%E7%94%9F%E6%88%90%E5%92%8C%E8%A7%A3%E6%9E%90/","excerpt":"zxing生成和解析二维码pom.xml123456789101112&lt;!-- https://mvnrepository.com/artifact/com.google.zxing/core --&gt;&lt;dependency&gt; &lt;groupId&gt;com.google.zxing&lt;/groupId&gt; &lt;artifactId&gt;core&lt;/artifactId&gt; &lt;version&gt;3.3.0&lt;/version&gt;&lt;/dependency&gt;&lt;!-- https://mvnrepository.com/artifact/com.google.zxing/javase --&gt;&lt;dependency&gt; &lt;groupId&gt;com.google.zxing&lt;/groupId&gt; &lt;artifactId&gt;javase&lt;/artifactId&gt; &lt;version&gt;3.3.0&lt;/version&gt;&lt;/dependency&gt;","text":"zxing生成和解析二维码pom.xml123456789101112&lt;!-- https://mvnrepository.com/artifact/com.google.zxing/core --&gt;&lt;dependency&gt; &lt;groupId&gt;com.google.zxing&lt;/groupId&gt; &lt;artifactId&gt;core&lt;/artifactId&gt; &lt;version&gt;3.3.0&lt;/version&gt;&lt;/dependency&gt;&lt;!-- https://mvnrepository.com/artifact/com.google.zxing/javase --&gt;&lt;dependency&gt; &lt;groupId&gt;com.google.zxing&lt;/groupId&gt; &lt;artifactId&gt;javase&lt;/artifactId&gt; &lt;version&gt;3.3.0&lt;/version&gt;&lt;/dependency&gt; 工具类12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879import com.google.zxing.*;import com.google.zxing.client.j2se.BufferedImageLuminanceSource;import com.google.zxing.client.j2se.MatrixToImageWriter;import com.google.zxing.common.BitMatrix;import com.google.zxing.common.HybridBinarizer;import com.google.zxing.qrcode.QRCodeWriter;import com.google.zxing.qrcode.decoder.ErrorCorrectionLevel; import javax.imageio.ImageIO;import java.awt.image.BufferedImage;import java.io.File;import java.io.IOException;import java.nio.file.Path;import java.util.HashMap;import java.util.Map; /** * 二维码解析工具类 * Created by zz on 2017/10/20. */public class QrCodeUtils &#123; /** * 生成二维码Bitmap * * @param widthPix 宽 * @param heightPix 高 * @param content 二维码内容 * @param fileSavePath 保存路径 * @return 是否成功 */ public static boolean encodeQrCode(int widthPix, int heightPix, String content, String fileSavePath) &#123; try &#123; if (content == null || &quot;&quot;.equals(content)) &#123; return false; &#125; //配置参数 Map&lt;EncodeHintType, Object&gt; hints = new HashMap&lt;&gt;(); hints.put(EncodeHintType.CHARACTER_SET, &quot;utf-8&quot;); //容错级别 hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H); //设置空白边距的宽度 hints.put(EncodeHintType.MARGIN, 6); //default is 4 // 图像数据转换，使用了矩阵转换 BitMatrix bitMatrix = new QRCodeWriter().encode(content, BarcodeFormat.QR_CODE, widthPix, heightPix, hints); Path file = new File(fileSavePath).toPath(); MatrixToImageWriter.writeToPath(bitMatrix, &quot;png&quot;, file); return true; //必须使用compress方法将bitmap保存到文件中再进行读取。直接返回的bitmap是没有任何压缩的，内存消耗巨大！ &#125; catch (WriterException | IOException e) &#123; e.printStackTrace(); &#125; return false; &#125; /** * 解析二维码 * * @param filePath 二维码路径 * @return 二维码内容 */ public static String decodeQrCode(String filePath) &#123; BufferedImage image; try &#123; image = ImageIO.read(new File(filePath)); LuminanceSource source = new BufferedImageLuminanceSource(image); Binarizer binarizer = new HybridBinarizer(source); BinaryBitmap binaryBitmap = new BinaryBitmap(binarizer); Map&lt;DecodeHintType, Object&gt; hints = new HashMap&lt;DecodeHintType, Object&gt;(); hints.put(DecodeHintType.CHARACTER_SET, &quot;UTF-8&quot;); Result result = new MultiFormatReader().decode(binaryBitmap, hints);// 对图像进行解码 return result.getText(); &#125; catch (IOException | NotFoundException e) &#123; e.printStackTrace(); &#125; return null; &#125;&#125;","categories":[{"name":"JavaEE","slug":"JavaEE","permalink":"http://zhouzhuo810.github.io/categories/JavaEE/"},{"name":"Java工具类","slug":"Java工具类","permalink":"http://zhouzhuo810.github.io/categories/Java%E5%B7%A5%E5%85%B7%E7%B1%BB/"}],"tags":[{"name":"JavaEE","slug":"JavaEE","permalink":"http://zhouzhuo810.github.io/tags/JavaEE/"}]},{"title":"Android常用代码-XML解析","slug":"Android常用代码-XML解析","date":"2017-10-18T09:06:52.000Z","updated":"2024-06-13T11:58:36.766Z","comments":true,"path":"2017/10/18/Android常用代码-XML解析/","permalink":"http://zhouzhuo810.github.io/2017/10/18/Android%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81-XML%E8%A7%A3%E6%9E%90/","excerpt":"常见XML解析方法 SAX DOM PULL Dom4j 推荐Dom4j下载地址 jar百度云下载地址 https://pan.baidu.com/s/1i3hduPf 用法简介3个概念：元素，属性，值。","text":"常见XML解析方法 SAX DOM PULL Dom4j 推荐Dom4j下载地址 jar百度云下载地址 https://pan.baidu.com/s/1i3hduPf 用法简介3个概念：元素，属性，值。 初始化1234SAXReader saxReader = new SAXReader();Document document = saxReader.read(file);//获取根节点Element root = document.getRootElement(); 元素 获取所有子元素 1List&lt;Element&gt; elements = root.elements(); 获取某一个名为username子元素 1Element element = root.element(&quot;username&quot;); 属性 获取元素的某个属性的值 1String firstName = root.attributeValue(&quot;firstName&quot;); 值12//获取username元素的值 String username = root.elementText(&quot;username&quot;); 也可以这么写： 1String username = root.element(&quot;username&quot;).getText(); 总结Dom4j性能非常好，灵活性高，易使用.","categories":[{"name":"Android常用代码","slug":"Android常用代码","permalink":"http://zhouzhuo810.github.io/categories/Android%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"Android常用代码-微信QQ分享文件","slug":"Android常用代码-微信QQ分享文件和文字","date":"2017-10-17T07:15:30.000Z","updated":"2024-06-13T11:58:36.766Z","comments":true,"path":"2017/10/17/Android常用代码-微信QQ分享文件和文字/","permalink":"http://zhouzhuo810.github.io/2017/10/17/Android%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81-%E5%BE%AE%E4%BF%A1QQ%E5%88%86%E4%BA%AB%E6%96%87%E4%BB%B6%E5%92%8C%E6%96%87%E5%AD%97/","excerpt":"不使用SDK实现QQ和微信文件与文字的分享。 QQ分享文件12345678910111213141516private void shareFileToQQ(File file) throws Exception&#123; Intent share = new Intent(Intent.ACTION_SEND); ComponentName component = new ComponentName(&quot;com.tencent.mobileqq&quot;, &quot;com.tencent.mobileqq.activity.JumpActivity&quot;); share.setComponent(component); Uri uri = null; if (Build.VERSION.SDK_INT &gt; 23) &#123; uri = FileProvider.getUriForFile(getActivity(), BuildConfig.APPLICATION_ID + &quot;.provider&quot;, file); &#125; else &#123; uri = Uri.fromFile(file); &#125; share.putExtra(Intent.EXTRA_STREAM, uri); share.setType(&quot;*/*&quot;); startActivity(Intent.createChooser(share, &quot;发送&quot;));&#125;","text":"不使用SDK实现QQ和微信文件与文字的分享。 QQ分享文件12345678910111213141516private void shareFileToQQ(File file) throws Exception&#123; Intent share = new Intent(Intent.ACTION_SEND); ComponentName component = new ComponentName(&quot;com.tencent.mobileqq&quot;, &quot;com.tencent.mobileqq.activity.JumpActivity&quot;); share.setComponent(component); Uri uri = null; if (Build.VERSION.SDK_INT &gt; 23) &#123; uri = FileProvider.getUriForFile(getActivity(), BuildConfig.APPLICATION_ID + &quot;.provider&quot;, file); &#125; else &#123; uri = Uri.fromFile(file); &#125; share.putExtra(Intent.EXTRA_STREAM, uri); share.setType(&quot;*/*&quot;); startActivity(Intent.createChooser(share, &quot;发送&quot;));&#125; QQ分享文字123456789101112131415161718192021/** * 分享文字给QQ好友 * @param context * @param content */public void shareQQ(Context context, String content) &#123; Intent sendIntent = new Intent(); sendIntent.setAction(Intent.ACTION_SEND); sendIntent.putExtra(Intent.EXTRA_TEXT, content); sendIntent.setType(&quot;text/plain&quot;); try &#123; sendIntent.setClassName(&quot;com.tencent.mobileqq&quot;, &quot;com.tencent.mobileqq.activity.JumpActivity&quot;); Intent chooserIntent = Intent.createChooser(sendIntent, &quot;选择分享途径&quot;); if (chooserIntent == null) &#123; return; &#125; context.startActivity(sendIntent); &#125; catch (Exception e) &#123; context.startActivity(sendIntent); &#125;&#125; 微信分享文件123456789101112131415161718private void shareFileToWx(String title, File file) throws Exception&#123; Intent intent = new Intent(); ComponentName comp = new ComponentName(&quot;com.tencent.mm&quot;, &quot;com.tencent.mm.ui.tools.ShareImgUI&quot;); intent.setComponent(comp); Uri uri = null; if (Build.VERSION.SDK_INT &gt; 23) &#123; uri = FileProvider.getUriForFile(getActivity(), BuildConfig.APPLICATION_ID + &quot;.provider&quot;, file); &#125; else &#123; uri = Uri.fromFile(file); &#125; intent.setAction(&quot;android.intent.action.SEND&quot;); intent.setType(&quot;file/*&quot;); intent.putExtra(Intent.EXTRA_TEXT, title); intent.putExtra(Intent.EXTRA_STREAM, uri); startActivity(intent);&#125; 微信分享文字1234567891011121314151617181920/** * 分享文字给微信好友 * @param content */private void shareToFriend(Context context, String content) &#123; Intent intent = new Intent(); intent.setAction(Intent.ACTION_SEND); intent.setType(&quot;text/plain&quot;); intent.putExtra(Intent.EXTRA_TEXT, content); try &#123; intent.setClassName(&quot;com.tencent.mm&quot;, &quot;com.tencent.mm.ui.tools.ShareImgUI&quot;); Intent chooserIntent = Intent.createChooser(intent, &quot;选择分享途径&quot;); if (chooserIntent == null) &#123; return; &#125; context.startActivity(intent); &#125; catch (Exception e) &#123; context.startActivity(intent); &#125;&#125; 注意事项 问题1(个别手机上会报错，如’小米 REDMI NOTE 3’) 1android.content.ActivityNotFoundException Unable to find explicit activity class {com.tencent.mm&#x2F;com.tencent.mm.ui.tools.ShareImgUI}; have you declared this activity in your AndroidManifest.xml?解决方式 12&lt;activity android:name=&quot;com.tencent.mm.ui.tools.ShareImgUI&quot;/&gt;&lt;activity android:name=&quot;com.tencent.mobileqq.activity.JumpActivity&quot;/&gt;","categories":[{"name":"Android常用代码","slug":"Android常用代码","permalink":"http://zhouzhuo810.github.io/categories/Android%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"Android常用代码-微信支付宝支付","slug":"Android常用代码-微信支付宝支付","date":"2017-10-17T00:47:51.000Z","updated":"2024-06-13T11:58:36.766Z","comments":true,"path":"2017/10/17/Android常用代码-微信支付宝支付/","permalink":"http://zhouzhuo810.github.io/2017/10/17/Android%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81-%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E5%AE%9D%E6%94%AF%E4%BB%98/","excerpt":"记录一下支付功能简单实现逻辑。 微信支付注册一个入口Activity1234567&lt;!--weixin pay--&gt;&lt;activity android:name=&quot;.wxapi.WXPayEntryActivity&quot; android:exported=&quot;true&quot; android:launchMode=&quot;singleTop&quot; /&gt;&lt;!--weixin pay--&gt;","text":"记录一下支付功能简单实现逻辑。 微信支付注册一个入口Activity1234567&lt;!--weixin pay--&gt;&lt;activity android:name=&quot;.wxapi.WXPayEntryActivity&quot; android:exported=&quot;true&quot; android:launchMode=&quot;singleTop&quot; /&gt;&lt;!--weixin pay--&gt; 可自定义界面123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899package com.keqiang.highcloud.wxapi; import android.content.Intent;import android.os.Bundle;import android.widget.TextView; import com.keqiang.highcloud.Constants;import com.keqiang.highcloud.R;import com.keqiang.highcloud.view.activity.BaseActivity;import com.keqiang.highcloud.view.activity.shop.ShopMyOrderActivity;import com.tencent.mm.opensdk.constants.ConstantsAPI;import com.tencent.mm.opensdk.modelbase.BaseReq;import com.tencent.mm.opensdk.modelbase.BaseResp;import com.tencent.mm.opensdk.openapi.IWXAPI;import com.tencent.mm.opensdk.openapi.IWXAPIEventHandler;import com.tencent.mm.opensdk.openapi.WXAPIFactory; public class WXPayEntryActivity extends BaseActivity implements IWXAPIEventHandler &#123; private static final String TAG = &quot;MicroMsg.SDKSample.WXPayEntryActivity&quot;; private IWXAPI api; private TextView tvResult; @Override public void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); api = WXAPIFactory.createWXAPI(this, Constants.APP_ID); api.handleIntent(getIntent(), this);// finish(); &#125; @Override public int getLayoutId() &#123; return R.layout.pay_result; &#125; @Override public void initView() &#123; tvResult = (TextView) findViewById(R.id.tv_result); &#125; @Override public void initData() &#123; &#125; @Override public void initEvent() &#123; &#125; @Override public void saveState(Bundle bundle) &#123; &#125; @Override public void restoreState(Bundle bundle) &#123; &#125; @Override public boolean isDefaultBackClose() &#123; return false; &#125; @Override protected void onNewIntent(Intent intent) &#123; super.onNewIntent(intent); setIntent(intent); api.handleIntent(intent, this);// finish(); &#125; @Override public void onReq(BaseReq req) &#123; &#125; @Override public void onResp(BaseResp resp) &#123; if (resp.getType() == ConstantsAPI.COMMAND_PAY_BY_WX) &#123; if (resp.errCode == 0) &#123; tvResult.setText(&quot;微信支付完成！&quot;); Intent intent = new Intent(WXPayEntryActivity.this, ShopMyOrderActivity.class); startActWithIntent(intent); &#125; else &#123; tvResult.setText(resp.errStr); &#125; finish(); /* AlertDialog.Builder builder = new AlertDialog.Builder(this); builder.setTitle(R.string.app_tip); builder.setMessage(getString(R.string.pay_result_callback_msg, String.valueOf(resp.errCode))); builder.show();*/ &#125; &#125;&#125; 为保证支付前已将app注册到微信 注册一个广播 123456789&lt;!-- wx pay start--&gt;&lt;receiver android:name=&quot;.other.receiver.AppRegister&quot; android:permission=&quot;com.tencent.mm.plugin.permission.SEND&quot; &gt; &lt;intent-filter&gt; &lt;action android:name=&quot;com.tencent.mm.plugin.openapi.Intent.ACTION_REFRESH_WXAPP&quot; /&gt; &lt;/intent-filter&gt;&lt;/receiver&gt;&lt;!--wx pay end--&gt; 在Application中发送广播 12345/*注册APP到微信*/Intent intent = new Intent();intent.setAction(&quot;com.tencent.mm.plugin.openapi.Intent.ACTION_REFRESH_WXAPP&quot;);sendBroadcast(intent); 支付宝支付网页登陆支付1234567891011121314&lt;!-- alipay sdk begin --&gt;&lt;activity android:name=&quot;com.alipay.sdk.app.H5PayActivity&quot; android:configChanges=&quot;orientation|keyboardHidden|navigation|screenSize&quot; android:exported=&quot;false&quot; android:screenOrientation=&quot;behind&quot; android:windowSoftInputMode=&quot;adjustResize|stateHidden&quot;/&gt;&lt;activity android:name=&quot;com.alipay.sdk.app.H5AuthActivity&quot; android:configChanges=&quot;orientation|keyboardHidden|navigation&quot; android:exported=&quot;false&quot; android:screenOrientation=&quot;behind&quot; android:windowSoftInputMode=&quot;adjustResize|stateHidden&quot;/&gt;&lt;!-- alipay sdk end --&gt; 支付界面Layout123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; android:id=&quot;@+id/root&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot;&gt; &lt;com.example.view.widget.ZzTitleBar android:id=&quot;@+id/title_bar&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;@dimen/activity_title_height&quot; android:background=&quot;@color/colorMain&quot; app:leftImg=&quot;@drawable/iv_back&quot; app:leftText=&quot;@string/back_text&quot; app:showLeftLayout=&quot;true&quot; app:showRightLayout=&quot;false&quot; app:textColorAll=&quot;@color/color_white&quot; app:textSizeAll=&quot;@dimen/activity_title_text_size&quot; app:titleText=&quot;支付订单&quot; /&gt; &lt;LinearLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;88px&quot; android:background=&quot;#fff&quot; android:gravity=&quot;center&quot; android:orientation=&quot;vertical&quot;&gt; &lt;TextView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;支付剩余时间&quot; android:textColor=&quot;#666&quot; android:textSize=&quot;24px&quot; /&gt; &lt;LinearLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginTop=&quot;4px&quot; android:gravity=&quot;center_horizontal&quot; android:orientation=&quot;horizontal&quot;&gt; &lt;TextView android:id=&quot;@+id/tv_minute_shi&quot; android:layout_width=&quot;30px&quot; android:layout_height=&quot;30px&quot; android:background=&quot;@drawable/zhifu_top_kuang&quot; android:gravity=&quot;center&quot; android:text=&quot;0&quot; android:textColor=&quot;#fff&quot; android:textSize=&quot;20px&quot; /&gt; &lt;TextView android:id=&quot;@+id/tv_minute_ge&quot; android:layout_width=&quot;30px&quot; android:layout_height=&quot;30px&quot; android:layout_marginLeft=&quot;10px&quot; android:background=&quot;@drawable/zhifu_top_kuang&quot; android:gravity=&quot;center&quot; android:text=&quot;0&quot; android:textColor=&quot;#fff&quot; android:textSize=&quot;20px&quot; /&gt; &lt;TextView android:layout_width=&quot;30px&quot; android:layout_height=&quot;30px&quot; android:layout_marginLeft=&quot;5px&quot; android:gravity=&quot;center&quot; android:text=&quot;:&quot; android:textColor=&quot;#333&quot; android:textSize=&quot;20px&quot; /&gt; &lt;TextView android:id=&quot;@+id/tv_second_shi&quot; android:layout_width=&quot;30px&quot; android:layout_height=&quot;30px&quot; android:layout_marginLeft=&quot;5px&quot; android:background=&quot;@drawable/zhifu_top_kuang&quot; android:gravity=&quot;center&quot; android:text=&quot;0&quot; android:textColor=&quot;#fff&quot; android:textSize=&quot;20px&quot; /&gt; &lt;TextView android:id=&quot;@+id/tv_second_ge&quot; android:layout_width=&quot;30px&quot; android:layout_height=&quot;30px&quot; android:layout_marginLeft=&quot;10px&quot; android:background=&quot;@drawable/zhifu_top_kuang&quot; android:gravity=&quot;center&quot; android:text=&quot;0&quot; android:textColor=&quot;#fff&quot; android:textSize=&quot;20px&quot; /&gt; &lt;/LinearLayout&gt; &lt;/LinearLayout&gt; &lt;View android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;1px&quot; android:background=&quot;#f1f1f1&quot; /&gt; &lt;LinearLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;112px&quot; android:background=&quot;#fff&quot; android:gravity=&quot;center_vertical&quot; android:orientation=&quot;horizontal&quot;&gt; &lt;LinearLayout android:layout_width=&quot;260px&quot; android:layout_height=&quot;match_parent&quot; android:gravity=&quot;center_vertical&quot; android:orientation=&quot;vertical&quot;&gt; &lt;TextView android:id=&quot;@+id/tv_product_name&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginLeft=&quot;80px&quot; android:text=&quot;畅享管&quot; android:textColor=&quot;#333&quot; android:textSize=&quot;24px&quot; /&gt; &lt;LinearLayout android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginLeft=&quot;80px&quot; android:layout_marginTop=&quot;4px&quot; android:orientation=&quot;horizontal&quot;&gt; &lt;TextView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;数量：&quot; android:textColor=&quot;#999&quot; android:textSize=&quot;18px&quot; /&gt; &lt;TextView android:id=&quot;@+id/tv_number&quot; android:layout_width=&quot;100px&quot; android:layout_height=&quot;wrap_content&quot; android:background=&quot;@drawable/order_round_bg_shape&quot; android:gravity=&quot;center&quot; android:paddingBottom=&quot;2px&quot; android:paddingLeft=&quot;15px&quot; android:paddingRight=&quot;15px&quot; android:paddingTop=&quot;2px&quot; android:text=&quot;1&quot; android:textColor=&quot;#ff6631&quot; android:textSize=&quot;18px&quot; /&gt; &lt;/LinearLayout&gt; &lt;LinearLayout android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginLeft=&quot;80px&quot; android:layout_marginTop=&quot;4px&quot; android:orientation=&quot;horizontal&quot;&gt; &lt;TextView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;型号：&quot; android:textColor=&quot;#999&quot; android:textSize=&quot;18px&quot; /&gt; &lt;TextView android:id=&quot;@+id/tv_type&quot; android:layout_width=&quot;100px&quot; android:layout_height=&quot;wrap_content&quot; android:background=&quot;@drawable/order_round_bg_shape&quot; android:gravity=&quot;center&quot; android:paddingBottom=&quot;2px&quot; android:paddingLeft=&quot;15px&quot; android:paddingRight=&quot;15px&quot; android:paddingTop=&quot;2px&quot; android:text=&quot;&quot; android:textColor=&quot;#ff6631&quot; android:textSize=&quot;18px&quot; /&gt; &lt;/LinearLayout&gt; &lt;/LinearLayout&gt; &lt;View android:layout_width=&quot;1px&quot; android:layout_height=&quot;match_parent&quot; android:layout_marginBottom=&quot;4px&quot; android:layout_marginLeft=&quot;20px&quot; android:layout_marginTop=&quot;4px&quot; android:background=&quot;#f1f1f1&quot; /&gt; &lt;LinearLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginLeft=&quot;40px&quot; android:gravity=&quot;bottom&quot; android:orientation=&quot;horizontal&quot;&gt; &lt;TextView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;¥&quot; android:textColor=&quot;#f74e37&quot; android:textSize=&quot;20px&quot; /&gt; &lt;TextView android:id=&quot;@+id/tv_count&quot; android:layout_width=&quot;0dp&quot; android:layout_height=&quot;wrap_content&quot; android:layout_weight=&quot;1&quot; android:text=&quot;&quot; android:textColor=&quot;#f74e37&quot; android:textSize=&quot;60px&quot; /&gt; &lt;/LinearLayout&gt; &lt;/LinearLayout&gt; &lt;LinearLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginTop=&quot;30px&quot; android:background=&quot;#fff&quot; android:orientation=&quot;vertical&quot;&gt; &lt;LinearLayout android:id=&quot;@+id/ll_alipay&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;120px&quot; android:background=&quot;@drawable/setting_item_bg_selector&quot; android:clickable=&quot;true&quot; android:gravity=&quot;center_vertical&quot; android:orientation=&quot;horizontal&quot;&gt; &lt;ImageView android:layout_width=&quot;60px&quot; android:layout_height=&quot;60px&quot; android:layout_marginLeft=&quot;34px&quot; android:src=&quot;@drawable/alipay_logo&quot; /&gt; &lt;LinearLayout android:layout_width=&quot;0dp&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginLeft=&quot;34px&quot; android:layout_weight=&quot;1&quot; android:orientation=&quot;vertical&quot;&gt; &lt;LinearLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:gravity=&quot;center_vertical&quot; android:orientation=&quot;horizontal&quot;&gt; &lt;TextView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;支付宝&quot; android:textColor=&quot;#333&quot; android:textSize=&quot;30px&quot; /&gt; &lt;ImageView android:layout_width=&quot;60px&quot; android:layout_height=&quot;26px&quot; android:layout_marginLeft=&quot;20px&quot; android:src=&quot;@drawable/pay_type_recomend&quot; /&gt; &lt;/LinearLayout&gt; &lt;TextView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginTop=&quot;10px&quot; android:text=&quot;亿万用户的选择 , 更快更安全&quot; android:textColor=&quot;#999&quot; android:textSize=&quot;20px&quot; /&gt; &lt;/LinearLayout&gt; &lt;CheckBox android:id=&quot;@+id/cb_alipay&quot; android:layout_width=&quot;34px&quot; android:layout_height=&quot;34px&quot; android:layout_marginRight=&quot;30px&quot; android:background=&quot;@drawable/dingdan_btn_xuanzhe_selector&quot; android:button=&quot;@null&quot; android:checked=&quot;true&quot; android:clickable=&quot;false&quot; android:enabled=&quot;false&quot; /&gt; &lt;/LinearLayout&gt; &lt;View android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;1px&quot; android:background=&quot;#f1f1f1&quot; /&gt; &lt;LinearLayout android:id=&quot;@+id/ll_wxpay&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;120px&quot; android:background=&quot;@drawable/setting_item_bg_selector&quot; android:clickable=&quot;true&quot; android:gravity=&quot;center_vertical&quot; android:orientation=&quot;horizontal&quot;&gt; &lt;ImageView android:layout_width=&quot;60px&quot; android:layout_height=&quot;60px&quot; android:layout_marginLeft=&quot;34px&quot; android:src=&quot;@drawable/weixin_logo&quot; /&gt; &lt;LinearLayout android:layout_width=&quot;0dp&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginLeft=&quot;34px&quot; android:layout_weight=&quot;1&quot; android:orientation=&quot;vertical&quot;&gt; &lt;TextView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;微信&quot; android:textColor=&quot;#333&quot; android:textSize=&quot;30px&quot; /&gt; &lt;TextView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginTop=&quot;10px&quot; android:text=&quot;数亿用户都在用 , 安全可托付&quot; android:textColor=&quot;#999&quot; android:textSize=&quot;20px&quot; /&gt; &lt;/LinearLayout&gt; &lt;CheckBox android:id=&quot;@+id/cb_weixin_pay&quot; android:layout_width=&quot;34px&quot; android:layout_height=&quot;34px&quot; android:layout_marginRight=&quot;30px&quot; android:background=&quot;@drawable/dingdan_btn_xuanzhe_selector&quot; android:button=&quot;@null&quot; android:checked=&quot;false&quot; android:clickable=&quot;false&quot; android:enabled=&quot;false&quot; /&gt; &lt;/LinearLayout&gt; &lt;/LinearLayout&gt; &lt;Button android:id=&quot;@+id/tv_pay&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;110px&quot; android:layout_marginLeft=&quot;30px&quot; android:layout_marginRight=&quot;30px&quot; android:layout_marginTop=&quot;140px&quot; android:background=&quot;@drawable/btn_main_selector&quot; android:gravity=&quot;center&quot; android:text=&quot;确认付款&quot; android:textColor=&quot;@color/color_white&quot; android:textSize=&quot;36px&quot; /&gt; &lt;/LinearLayout&gt; Javapackage com.keqiang.highcloud.view.activity.setting; import android.annotation.SuppressLint;import android.app.AlertDialog;import android.content.DialogInterface;import android.content.Intent;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.text.TextUtils;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.CheckBox;import android.widget.LinearLayout;import android.widget.TextView;import android.widget.Toast; import com.alipay.sdk.app.EnvUtils;import com.alipay.sdk.app.PayTask;import com.ta.utdid2.android.utils.PhoneInfoUtils;import com.tencent.mm.opensdk.modelpay.PayReq;import com.tencent.mm.opensdk.openapi.IWXAPI;import com.tencent.mm.opensdk.openapi.WXAPIFactory; import org.apache.http.conn.util.InetAddressUtils;import org.json.JSONObject; import java.io.UnsupportedEncodingException;import java.net.InetAddress;import java.net.NetworkInterface;import java.net.URLEncoder;import java.util.ArrayList;import java.util.Enumeration;import java.util.Map;import java.util.Timer;import java.util.TimerTask; import rx.Subscriber; /** * 支付宝或微信支付 * Created by zz on 2017/4/7. */public class PayActivity extends BaseActivity &#123; private TextView tvCount; private ZzTitleBar titleBar; private TextView tvPay; private static final int SDK_PAY_FLAG = 1; private static final int SDK_AUTH_FLAG = 2; private LinearLayout llAlipay; private LinearLayout llWxPay; private CheckBox cbAlipay; private CheckBox cbWxpay; //微信支付部分 private IWXAPI api; private TextView tvMinteShi; private TextView tvMinuteGe; private TextView tvSecondShi; private TextView tvSecondGe; private String time; private Handler handler = new Handler(); Runnable runnable = new Runnable() &#123; @Override public void run() &#123; runOnUiThread(new Runnable() &#123; @Override public void run() &#123; countTime(time); &#125; &#125;); &#125; &#125;; private String orderId; private TextView tvProductName; private TextView tvNumber; private TextView tvType; private String orderNo; @Override public int getLayoutId() &#123; return R.layout.activity_alipay; &#125; @SuppressLint(&quot;HandlerLeak&quot;) private Handler mHandler = new Handler() &#123; @SuppressWarnings(&quot;unused&quot;) public void handleMessage(Message msg) &#123; switch (msg.what) &#123; case SDK_PAY_FLAG: &#123; @SuppressWarnings(&quot;unchecked&quot;) PayResult payResult = new PayResult((Map&lt;String, String&gt;) msg.obj); /** 对于支付结果，请商户依赖服务端的异步通知结果。同步通知结果，仅作为支付结束的通知。 */ String resultInfo = payResult.getResult();// 同步返回需要验证的信息 String resultStatus = payResult.getResultStatus(); // 判断resultStatus 为9000则代表支付成功 if (TextUtils.equals(resultStatus, &quot;9000&quot;)) &#123; // 该笔订单是否真实支付成功，需要依赖服务端的异步通知。 ToastUtils.showCustomBgToast(&quot;支付成功！&quot;); Intent intent = new Intent(PayActivity.this, ShopMyOrderActivity.class); startActWithIntent(intent); closeAct(); &#125; else &#123; // 该笔订单真实的支付结果，需要依赖服务端的异步通知。 switch (resultStatus) &#123; case &quot;6001&quot;: ToastUtils.showCustomBgToast(&quot;已取消支付操作&quot;); break; default: ToastUtils.showCustomBgToast(&quot;支付失败，错误代码：&quot;+resultStatus); break; &#125; &#125; break; &#125; default: break; &#125; &#125; &#125;; @Override public void initView() &#123; titleBar = (ZzTitleBar) findViewById(R.id.title_bar); tvCount = (TextView) findViewById(R.id.tv_count); tvPay = (TextView) findViewById(R.id.tv_pay); tvType = (TextView) findViewById(R.id.tv_type); tvProductName = (TextView) findViewById(R.id.tv_product_name); tvNumber = (TextView) findViewById(R.id.tv_number); llAlipay = (LinearLayout) findViewById(R.id.ll_alipay); llWxPay = (LinearLayout) findViewById(R.id.ll_wxpay); cbAlipay = (CheckBox) findViewById(R.id.cb_alipay); cbWxpay = (CheckBox) findViewById(R.id.cb_weixin_pay); tvMinteShi = (TextView) findViewById(R.id.tv_minute_shi); tvMinuteGe = (TextView) findViewById(R.id.tv_minute_ge); tvSecondShi = (TextView) findViewById(R.id.tv_second_shi); tvSecondGe = (TextView) findViewById(R.id.tv_second_ge); &#125; @Override public void initData() &#123; //微信api api = WXAPIFactory.createWXAPI(this, Constants.APP_ID, false); orderId = getIntent().getStringExtra(&quot;orderId&quot;); orderNo = getIntent().getStringExtra(&quot;orderNo&quot;); String productName = getIntent().getStringExtra(&quot;productName&quot;); String total = getIntent().getStringExtra(&quot;total&quot;); String number = getIntent().getStringExtra(&quot;number&quot;); String model = getIntent().getStringExtra(&quot;model&quot;); tvType.setText(model); tvProductName.setText(productName); tvNumber.setText(number); tvCount.setText(total); String createTime = getIntent().getStringExtra(&quot;createTime&quot;); time = DateUtil.getTimeAddMinute(createTime, 16); if (time == null) &#123; ToastUtils.showCustomBgToast(&quot;订单超时或已取消&quot;); return; &#125; handler.postDelayed(runnable, 1000); &#125; private void countTime(String time) &#123; String curTime = DateUtil.getYearMonthDayHourMinuteSecond(); long seconds = DateUtil.getSecondDuration(curTime, time); if (seconds &gt; 0) &#123; long m = seconds / 60; if (m &lt; 10) &#123; tvMinteShi.setText(&quot;0&quot;); tvMinuteGe.setText(&quot;&quot; + m); &#125; else &#123; tvMinteShi.setText(&quot;&quot; + (m / 10)); tvMinuteGe.setText(&quot;&quot; + (m % 10)); &#125; long s = seconds % 60; if (s &lt; 10) &#123; tvSecondShi.setText(&quot;0&quot;); tvSecondGe.setText(&quot;&quot; + s); &#125; else &#123; tvSecondShi.setText(&quot;&quot; + (s / 10)); tvSecondGe.setText(&quot;&quot; + (s % 10)); &#125; handler.postDelayed(runnable, 1000); &#125; else &#123; handler.removeCallbacks(runnable); ToastUtils.showCustomBgToast(&quot;订单超时&quot;); closeAct(); &#125; &#125; @Override public void initEvent() &#123; titleBar.setOnTitleBarClickListener(new ZzTitleBar.OnTitleBarClickListener() &#123; @Override public void onLeftClick() &#123; closeAct(); &#125; @Override public void onRightClick() &#123; &#125; &#125;); tvPay.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; if (cbAlipay.isChecked()) &#123; payV2(); &#125; else &#123; payVX(); &#125; &#125; &#125;); llAlipay.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; cbAlipay.setChecked(true); cbWxpay.setChecked(false); &#125; &#125;); llWxPay.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; cbWxpay.setChecked(true); cbAlipay.setChecked(false); &#125; &#125;); &#125; private void payVX() &#123; Api.getRegisterApi(HCApplication.getContext()) .vxPay(HCSharedUtil.getPhoneNumber(this), orderId) .compose(RxHelper.&lt;VxPayResult&gt;io_main()) .subscribe(new Subscriber&lt;VxPayResult&gt;() &#123; @Override public void onCompleted() &#123; &#125; @Override public void onError(Throwable e) &#123; ToastUtils.showCustomBgToast(getString(R.string.no_net_text) + e.toString()); &#125; @Override public void onNext(VxPayResult vxPayResult) &#123; if (vxPayResult.getCode().equals(&quot;1&quot;)) &#123; PayReq req = new PayReq(); req.appId = vxPayResult.getData().getAppid(); req.partnerId = vxPayResult.getData().getMch_id(); req.prepayId = vxPayResult.getData().getPrepay_id(); req.nonceStr = vxPayResult.getData().getOld_nonce_str(); req.packageValue = &quot;Sign=WXPay&quot;; req.sign = vxPayResult.getData().getOld_sign(); req.timeStamp = vxPayResult.getData().getTimestamp(); api.sendReq(req); closeAct(); &#125; else &#123; ToastUtils.showCustomBgToast(vxPayResult.getMsg()); &#125; &#125; &#125;); &#125; /** * 支付宝支付业务 */ public void payV2() &#123; Api.getRegisterApi(HCApplication.getContext()) .aliPay(HCSharedUtil.getPhoneNumber(this), orderId) .compose(RxHelper.&lt;AliPayResult&gt;io_main()) .subscribe(new Subscriber&lt;AliPayResult&gt;() &#123; @Override public void onCompleted() &#123; &#125; @Override public void onError(Throwable e) &#123; ToastUtils.showCustomBgToast(getString(R.string.no_net_text) + e.toString()); &#125; @Override public void onNext(AliPayResult aliPayResult) &#123; if (aliPayResult.getCode().equals(&quot;1&quot;)) &#123; final String orderInfo = aliPayResult.getOrderInfo(); Runnable payRunnable = new Runnable() &#123; @Override public void run() &#123; PayTask alipay = new PayTask(PayActivity.this); Map&lt;String, String&gt; result = alipay.payV2(orderInfo, true); Message msg = new Message(); msg.what = SDK_PAY_FLAG; msg.obj = result; mHandler.sendMessage(msg); &#125; &#125;; Thread payThread = new Thread(payRunnable); payThread.start(); &#125; &#125; &#125;); &#125; @Override public void saveState(Bundle bundle) &#123; &#125; @Override public void restoreState(Bundle bundle) &#123; &#125; @Override public boolean isDefaultBackClose() &#123; return false; &#125; @Override protected void onDestroy() &#123; super.onDestroy(); handler.removeCallbacks(runnable); handler.removeCallbacksAndMessages(null); handler = null; &#125;&#125; 注意点 支付宝支付后台需要支付宝公钥和app私钥。 支付宝支付App公私钥加密格式：Java和非Java。 微信商户平台需要设置API密钥。 微信支付后台需要二次签名。","categories":[{"name":"Android常用代码","slug":"Android常用代码","permalink":"http://zhouzhuo810.github.io/categories/Android%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"Git常见问题-Android Studio重新分享项目到Github提示项目已存在","slug":"Git常见问题-Android-Studio重新分享项目到Github提示项目已存在","date":"2017-10-16T07:35:02.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"2017/10/16/Git常见问题-Android-Studio重新分享项目到Github提示项目已存在/","permalink":"http://zhouzhuo810.github.io/2017/10/16/Git%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98-Android-Studio%E9%87%8D%E6%96%B0%E5%88%86%E4%BA%AB%E9%A1%B9%E7%9B%AE%E5%88%B0Github%E6%8F%90%E7%A4%BA%E9%A1%B9%E7%9B%AE%E5%B7%B2%E5%AD%98%E5%9C%A8/","excerpt":"","text":"打开Git Bash cd ${项目跟目录} git remote rm origin git remote add origin &#103;&#105;&#116;&#x40;&#x67;&#105;&#116;&#x68;&#x75;&#x62;&#46;&#99;&#111;&#109;:${用户名}&#x2F;${项目名} vi .git&#x2F;config 删除[remote “origin”]那一行(vi操作方法，输入i进入输入模式，删除该行之后，按下Esc，输入”:wq”保存并退出)","categories":[{"name":"Git常见问题","slug":"Git常见问题","permalink":"http://zhouzhuo810.github.io/categories/Git%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://zhouzhuo810.github.io/tags/Git/"}]},{"title":"Android开源控件-常用控件地址","slug":"Android开源控件-常用控件地址","date":"2017-10-12T09:22:27.000Z","updated":"2024-06-13T11:58:36.766Z","comments":true,"path":"2017/10/12/Android开源控件-常用控件地址/","permalink":"http://zhouzhuo810.github.io/2017/10/12/Android%E5%BC%80%E6%BA%90%E6%8E%A7%E4%BB%B6-%E5%B8%B8%E7%94%A8%E6%8E%A7%E4%BB%B6%E5%9C%B0%E5%9D%80/","excerpt":"图片加载Glidehttps://github.com/bumptech/glide 网络框架Okhttphttps://github.com/square/okhttp Retrofithttps://github.com/square/retrofit Okhttp-OkGohttps://github.com/jeasonlzy/okhttp-OkGo NoHttphttps://github.com/yanzhenjie/NoHttp","text":"图片加载Glidehttps://github.com/bumptech/glide 网络框架Okhttphttps://github.com/square/okhttp Retrofithttps://github.com/square/retrofit Okhttp-OkGohttps://github.com/jeasonlzy/okhttp-OkGo NoHttphttps://github.com/yanzhenjie/NoHttp 线程调度RxJavahttps://github.com/ReactiveX/RxJava RxAndroidhttps://github.com/ReactiveX/RxAndroid 数据库GreenDaohttps://github.com/greenrobot/greenDAO Realm-Javahttps://github.com/realm/realm-java xUtils3https://github.com/wyouflf/xUtils3 系统特性6.0动态权限AndPermissionhttps://github.com/yanzhenjie/AndPermission RxPermissionshttps://github.com/tbruyelle/RxPermissions UI控件轮播图Bannerhttps://github.com/youth5201314/banner 下拉刷新上拉加载SmartRefreshLayouthttps://github.com/scwang90/SmartRefreshLayout 图表MPAndroidCharthttps://github.com/PhilJay/MPAndroidChart Hellocharts-androidhttps://github.com/lecho/hellocharts-android 多功能列表SwipeRecyclerViewhttps://github.com/yanzhenjie/SwipeRecyclerView BaseRecyclerViewAdapterHelperhttps://github.com/CymChad/BaseRecyclerViewAdapterHelper","categories":[{"name":"Android开源控件","slug":"Android开源控件","permalink":"http://zhouzhuo810.github.io/categories/Android%E5%BC%80%E6%BA%90%E6%8E%A7%E4%BB%B6/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"Android常用代码-多图测试数据集合","slug":"Android常用代码-多图测试数据集合","date":"2017-10-12T09:18:39.000Z","updated":"2024-06-13T11:58:36.766Z","comments":true,"path":"2017/10/12/Android常用代码-多图测试数据集合/","permalink":"http://zhouzhuo810.github.io/2017/10/12/Android%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81-%E5%A4%9A%E5%9B%BE%E6%B5%8B%E8%AF%95%E6%95%B0%E6%8D%AE%E9%9B%86%E5%90%88/","excerpt":"","text":"123456789101112131415161718192021222324252627282930List&lt;String&gt; data = new ArrayList&lt;&gt;();data.add(&quot;http://p1.so.qhmsg.com/dmfd/326_204_/t01ad675c2d6620f626.jpg&quot;);data.add(&quot;http://p4.so.qhmsg.com/dmfd/326_204_/t01e7b8da6f7881d669.jpg&quot;);data.add(&quot;http://p2.so.qhimgs1.com/dmfd/326_204_/t016b83625d3693e592.jpg&quot;);data.add(&quot;http://p0.so.qhimgs1.com/dmfd/326_204_/t019a8f0f4789b91170.jpg&quot;);data.add(&quot;http://p1.so.qhimgs1.com/dmfd/326_204_/t01da7b6be4c2e7485d.jpg&quot;);data.add(&quot;http://p4.so.qhimgs1.com/dmfd/326_204_/t016122ec45c5fdc5fa.jpg&quot;);data.add(&quot;http://p0.so.qhmsg.com/dmfd/326_204_/t015ba6df95da81c21f.jpg&quot;);data.add(&quot;http://p0.so.qhimgs1.com/dmfd/326_204_/t012c852c8f981d6a00.jpg&quot;);data.add(&quot;http://p4.so.qhimgs1.com/dmfd/326_204_/t01bc3afb43b885f79a.jpg&quot;);data.add(&quot;http://p2.so.qhmsg.com/dmfd/326_204_/t016f319fe697b397a7.jpg&quot;);data.add(&quot;http://p4.so.qhmsg.com/dmfd/326_204_/t01260296831eb4e1c9.jpg&quot;);data.add(&quot;http://p2.so.qhimgs1.com/dmfd/326_204_/t01f70e3d434b658072.jpg&quot;);data.add(&quot;http://p1.so.qhimgs1.com/dmfd/326_204_/t01ff382f9ac4ff3b41.jpg&quot;);data.add(&quot;http://p3.so.qhimgs1.com/dmfd/326_204_/t0136c51e038b8eb443.jpg&quot;);data.add(&quot;http://p4.so.qhimgs1.com/dmfd/326_204_/t01510b700b852c19ea.jpg&quot;);data.add(&quot;http://p2.so.qhmsg.com/dmfd/326_204_/t01ee2021295046db97.jpg&quot;);data.add(&quot;http://p2.so.qhimgs1.com/dmfd/326_204_/t011827d91512e21f1e.jpg&quot;);data.add(&quot;http://p4.so.qhimgs1.com/dmfd/326_204_/t01e0d10a1d9c967b6a.jpg&quot;);data.add(&quot;http://p5.so.qhimgs1.com/dmfd/326_204_/t014dee2f747c97027b.jpg&quot;);data.add(&quot;http://p0.so.qhmsg.com/dmfd/326_204_/t015937ffe391b99cbf.jpg&quot;);data.add(&quot;http://p2.so.qhimgs1.com/dmfd/326_204_/t01c8781008ac43b8b2.jpg&quot;);data.add(&quot;http://p0.so.qhimgs1.com/dmfd/326_204_/t0157cf838838b73380.jpg&quot;);data.add(&quot;http://p2.so.qhimgs1.com/dmfd/326_204_/t01486d9595e7e72a7e.jpg&quot;);data.add(&quot;http://p1.so.qhmsg.com/dmfd/326_204_/t016ddb799a12726bc6.jpg&quot;);data.add(&quot;http://p4.so.qhimgs1.com/dmfd/326_204_/t01cbfab89caa120e9a.jpg&quot;);data.add(&quot;http://p0.so.qhmsg.com/dmfd/326_204_/t01fd0af7e89abd4615.jpg&quot;);data.add(&quot;http://p2.so.qhimgs1.com/dmfd/326_204_/t0155c730d796084202.jpg&quot;);data.add(&quot;http://p0.so.qhmsg.com/dmfd/326_204_/t01007ed5e564c9c99f.jpg&quot;);data.add(&quot;http://p1.so.qhimgs1.com/dmfd/326_204_/t0127d36bd652e5f6ed.jpg&quot;);","categories":[{"name":"Android常用代码","slug":"Android常用代码","permalink":"http://zhouzhuo810.github.io/categories/Android%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"Android常用代码-切换主题","slug":"Android常用代码-切换主题","date":"2017-10-12T06:50:31.000Z","updated":"2024-06-13T11:58:36.766Z","comments":true,"path":"2017/10/12/Android常用代码-切换主题/","permalink":"http://zhouzhuo810.github.io/2017/10/12/Android%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81-%E5%88%87%E6%8D%A2%E4%B8%BB%E9%A2%98/","excerpt":"","text":"核心代码1234567891011121314private void setThemeColor(int colorPrimary, int colorPrimaryDark) &#123; mToolbar.setBackgroundResource(colorPrimary); mToolbar.setTitleTextColor(ContextCompat.getColor(this, android.R.color.white)); mToolbar.setNavigationIcon(R.drawable.ic_arrow_back_white_24dp); if (Build.VERSION.SDK_INT &gt;= 21) &#123; getWindow().setStatusBarColor(ContextCompat.getColor(this, colorPrimaryDark)); &#125; if (Build.VERSION.SDK_INT &gt;= 23) &#123; Window window = getWindow(); int systemUiVisibility = window.getDecorView().getSystemUiVisibility(); systemUiVisibility &amp;= ~View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR; window.getDecorView().setSystemUiVisibility(systemUiVisibility); &#125;&#125; 使用方式1setThemeColor(R.color.colorPrimary, R.color.colorPrimaryDark);","categories":[{"name":"Android常用代码","slug":"Android常用代码","permalink":"http://zhouzhuo810.github.io/categories/Android%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"Android疑难杂症-ViewPager+PhotoView问题","slug":"Android疑难杂症-ViewPager-PhotoView问题","date":"2017-10-11T03:39:56.000Z","updated":"2024-06-13T11:58:36.766Z","comments":true,"path":"2017/10/11/Android疑难杂症-ViewPager-PhotoView问题/","permalink":"http://zhouzhuo810.github.io/2017/10/11/Android%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87-ViewPager-PhotoView%E9%97%AE%E9%A2%98/","excerpt":"版本说明PhotoView版本： 12//photoViewcompile &#x27;com.mcxiaoke.photoview:library:1.2.3&#x27; 问题描述 ViewPager+PhotoView缩放操作时报错 ViewPager+PhotoView左右滑动图片加载错位 指定显示第几张图片","text":"版本说明PhotoView版本： 12//photoViewcompile &#x27;com.mcxiaoke.photoview:library:1.2.3&#x27; 问题描述 ViewPager+PhotoView缩放操作时报错 ViewPager+PhotoView左右滑动图片加载错位 指定显示第几张图片 解决方式重写ViewPager的onInterceptTouchEvent方法123456789@Overridepublic boolean onInterceptTouchEvent(MotionEvent ev) &#123; try &#123; return super.onInterceptTouchEvent(ev); &#125; catch (IllegalArgumentException e) &#123; e.printStackTrace(); return false; &#125;&#125; 定义Adapter123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354public static class MultiImagePageAdapter extends PagerAdapter &#123; private PhotoViewAttacher.OnViewTapListener onViewTapListener; //设置点击任意一张图片结束预览 public void setOnViewTapListener(PhotoViewAttacher.OnViewTapListener onViewTapListener) &#123; this.onViewTapListener = onViewTapListener; &#125; private final DisplayImageOptions options; private List&lt;String&gt; imgs; public MultiImagePageAdapter(List&lt;String&gt; imgs) &#123; options = new DisplayImageOptions.Builder() .showImageOnLoading(R.drawable.product_default) .showImageForEmptyUri(R.drawable.product_default) .showImageOnFail(R.drawable.product_default) .bitmapConfig(Bitmap.Config.ARGB_8888) .imageScaleType(ImageScaleType.EXACTLY) .cacheInMemory(true) .cacheOnDisk(true) .build(); this.imgs = imgs; &#125; @Override public int getCount() &#123; return imgs == null ? 0 : imgs.size(); &#125; @Override public boolean isViewFromObject(View view, Object object) &#123; return view == object; &#125; @Override public Object instantiateItem(ViewGroup container, int position) &#123; PhotoView photoView = new PhotoView(container.getContext()); //关键 container.addView(photoView, ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT); photoView.setScaleType(ImageView.ScaleType.FIT_CENTER); photoView.setOnViewTapListener(onViewTapListener); //网络加载 HCApplication.getImageLoader().displayImage(imgs.get(position), photoView, options); return photoView; &#125; @Override public void destroyItem(ViewGroup container, int position, Object object) &#123; //别忘了 container.removeView((View) object); &#125;&#125; 布局123456&lt;com.keqiang.highcloud.view.widget.HackyViewPager android:id=&quot;@+id/view_pager&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;/com.keqiang.highcloud.view.widget.HackyViewPager&gt; 初始化1234567891011121314151617List&lt;String&gt; imgs = getIntent().getStringArrayListExtra(&quot;imgs&quot;);int position = getIntent().getIntExtra(&quot;position&quot;, 0);if (imgs != null &amp;&amp; imgs.size() &gt; 0) &#123; MultiImagePageAdapter adapter = new MultiImagePageAdapter(imgs); adapter.setOnViewTapListener(new PhotoViewAttacher.OnViewTapListener() &#123; @Override public void onViewTap(View view, float x, float y) &#123; if (Build.VERSION.SDK_INT &gt;= 21) &#123; onBackPressed(); &#125; else &#123; closeAct(); &#125; &#125; &#125;); viewPager.setAdapter(adapter); viewPager.setCurrentItem(position);&#125; 调用1234567891011Intent intent = new Intent(activity, MultiImagePreviewActivity.class);//传入图片和位置信息intent.putExtra(&quot;imgs&quot;, imgs);intent.putExtra(&quot;position&quot;, position);if (Build.VERSION.SDK_INT &gt;= 21) &#123; ActivityOptionsCompat options = ActivityOptionsCompat.makeSceneTransitionAnimation(activity, banner, getString(R.string.transition_product_img)); ActivityCompat.startActivity(activity, intent, options.toBundle());&#125; else &#123; startActWithIntent(intent);&#125; Activity实例 布局 123456789101112131415&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:id=&quot;@+id/root&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:background=&quot;@color/colorBlack&quot; android:orientation=&quot;vertical&quot;&gt; &lt;com.keqiang.highcloud.view.widget.HackyViewPager android:id=&quot;@+id/view_pager&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;/com.keqiang.highcloud.view.widget.HackyViewPager&gt;&lt;/LinearLayout&gt; java 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122import android.graphics.Bitmap;import android.os.Build;import android.os.Bundle;import android.support.v4.view.PagerAdapter;import android.view.View;import android.view.ViewGroup;import android.widget.ImageView; import com.nostra13.universalimageloader.core.DisplayImageOptions;import com.nostra13.universalimageloader.core.assist.ImageScaleType; import java.util.List; import uk.co.senab.photoview.PhotoView;import uk.co.senab.photoview.PhotoViewAttacher; /** * Created by zhouzhuo810 on 2017/10/11. */public class MultiImagePreviewActivity extends BaseActivity &#123; private HackyViewPager viewPager; @Override public int getLayoutId() &#123; return R.layout.activity_multi_img_preview; &#125; @Override public void initView() &#123; viewPager = (HackyViewPager) findViewById(R.id.view_pager); &#125; @Override public void initData() &#123; List&lt;String&gt; imgs = getIntent().getStringArrayListExtra(&quot;imgs&quot;); int position = getIntent().getIntExtra(&quot;position&quot;, 0); if (imgs != null &amp;&amp; imgs.size() &gt; 0) &#123; MultiImagePageAdapter adapter = new MultiImagePageAdapter(imgs); adapter.setOnViewTapListener(new PhotoViewAttacher.OnViewTapListener() &#123; @Override public void onViewTap(View view, float x, float y) &#123; if (Build.VERSION.SDK_INT &gt;= 21) &#123; onBackPressed(); &#125; else &#123; closeAct(); &#125; &#125; &#125;); viewPager.setAdapter(adapter); viewPager.setCurrentItem(position); &#125; &#125; public static class MultiImagePageAdapter extends PagerAdapter &#123; private PhotoViewAttacher.OnViewTapListener onViewTapListener; public void setOnViewTapListener(PhotoViewAttacher.OnViewTapListener onViewTapListener) &#123; this.onViewTapListener = onViewTapListener; &#125; private final DisplayImageOptions options; private List&lt;String&gt; imgs; public MultiImagePageAdapter(List&lt;String&gt; imgs) &#123; options = new DisplayImageOptions.Builder() .showImageOnLoading(R.drawable.product_default) .showImageForEmptyUri(R.drawable.product_default) .showImageOnFail(R.drawable.product_default) .bitmapConfig(Bitmap.Config.ARGB_8888) .imageScaleType(ImageScaleType.EXACTLY) .cacheInMemory(true) .cacheOnDisk(true) .build(); this.imgs = imgs; &#125; @Override public int getCount() &#123; return imgs == null ? 0 : imgs.size(); &#125; @Override public boolean isViewFromObject(View view, Object object) &#123; return view == object; &#125; @Override public Object instantiateItem(ViewGroup container, int position) &#123; PhotoView photoView = new PhotoView(container.getContext()); container.addView(photoView, ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT); photoView.setScaleType(ImageView.ScaleType.FIT_CENTER); photoView.setOnViewTapListener(onViewTapListener); HCApplication.getImageLoader().displayImage(imgs.get(position), photoView, options); return photoView; &#125; @Override public void destroyItem(ViewGroup container, int position, Object object) &#123; container.removeView((View) object); &#125; &#125; @Override public void initEvent() &#123; &#125; @Override public void saveState(Bundle bundle) &#123; &#125; @Override public void restoreState(Bundle bundle) &#123; &#125; @Override public boolean isDefaultBackClose() &#123; return true; &#125;&#125;","categories":[{"name":"Android疑难杂症","slug":"Android疑难杂症","permalink":"http://zhouzhuo810.github.io/categories/Android%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"JavaEE-Tomcat使用服务开机自启动","slug":"JavaEE-Tomcat使用服务开机自启动","date":"2017-10-04T13:40:07.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"2017/10/04/JavaEE-Tomcat使用服务开机自启动/","permalink":"http://zhouzhuo810.github.io/2017/10/04/JavaEE-Tomcat%E4%BD%BF%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8/","excerpt":"前提条件 JDK和Tomcat同为32位或同为64位。 配置JDK环境变量。 配置Tomcat环境变量。","text":"前提条件 JDK和Tomcat同为32位或同为64位。 配置JDK环境变量。 配置Tomcat环境变量。 设置服务 打开cmd 切换到tomcat bin目录 运行下列命令 1service.bat install Tomcat 卸载服务 打开cmd 切换到tomcat bin目录 运行下列命令 1service.bat uninstall Tomcat 设置服务开机自启动 打开服务管理 设置为自动，应用。","categories":[{"name":"JavaEE","slug":"JavaEE","permalink":"http://zhouzhuo810.github.io/categories/JavaEE/"},{"name":"Tomcat","slug":"Tomcat","permalink":"http://zhouzhuo810.github.io/categories/Tomcat/"}],"tags":[{"name":"JavaEE","slug":"JavaEE","permalink":"http://zhouzhuo810.github.io/tags/JavaEE/"}]},{"title":"Android疑难杂症-根据资源名称获取资源Id","slug":"Android疑难杂症-根据资源名称获取资源Id","date":"2017-10-04T12:55:22.000Z","updated":"2024-06-13T11:58:36.766Z","comments":true,"path":"2017/10/04/Android疑难杂症-根据资源名称获取资源Id/","permalink":"http://zhouzhuo810.github.io/2017/10/04/Android%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87-%E6%A0%B9%E6%8D%AE%E8%B5%84%E6%BA%90%E5%90%8D%E7%A7%B0%E8%8E%B7%E5%8F%96%E8%B5%84%E6%BA%90Id/","excerpt":"12Resources resources = context.getResources();int id= getResources().getIdentifier(&quot;图标名称(不带后缀)&quot;, &quot;drawable&quot;, &quot;包名&quot;);","text":"12Resources resources = context.getResources();int id= getResources().getIdentifier(&quot;图标名称(不带后缀)&quot;, &quot;drawable&quot;, &quot;包名&quot;); 应用场景 用数字图片表示剩余天数 12345678910111213141516171819private void setLeftDays(int days) &#123; String dayStr = Integer.toString(days); llLeftDays.removeAllViews(); for (int i=dayStr.length()-1; i&gt;0; i--) &#123; int d = (int) (days / (Math.pow(10, i))); int s = d%10; ImageView iv = new ImageView(context); iv.setImageResource(getResources().getIdentifier(&quot;image_number&quot;+s, &quot;drawable&quot;, &quot;me.zhouzhuo810.test&quot;)); iv.setLayoutParams(new LinearLayout.LayoutParams(ViewUtil.scaleTextValue(context, 52) ,ViewUtil.scaleTextValue(context, 64))); llLeftDays.addView(iv); &#125; int l = days%10; ImageView iv = new ImageView(context); iv.setImageResource(getResources().getIdentifier(&quot;image_number&quot;+l, &quot;drawable&quot;, &quot;me.zhouzhuo810.test&quot;)); iv.setLayoutParams(new LinearLayout.LayoutParams(ViewUtil.scaleTextValue(context, 52) ,ViewUtil.scaleTextValue(context, 64))); llLeftDays.addView(iv);&#125; 工具封装123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115/** * 资源文件工具类 */public class ResourcesUtils &#123; private static final String RES_ID = &quot;id&quot;; private static final String RES_STRING = &quot;string&quot;; private static final String RES_DRABLE = &quot;drable&quot;; private static final String RES_LAYOUT = &quot;layout&quot;; private static final String RES_STYLE = &quot;style&quot;; private static final String RES_COLOR = &quot;color&quot;; private static final String RES_DIMEN = &quot;dimen&quot;; private static final String RES_ANIM = &quot;anim&quot;; private static final String RES_MENU = &quot;menu&quot;; /** * 获取资源文件的id * @param context * @param resName * @return */ public static int getId(Context context,String resName)&#123; return getResId(context,resName,RES_ID); &#125; /** * 获取资源文件string的id * @param context * @param resName * @return */ public static int getStringId(Context context,String resName)&#123; return getResId(context,resName,RES_STRING); &#125; /** * 获取资源文件drable的id * @param context * @param resName * @return */ public static int getDrableId(Context context,String resName)&#123; return getResId(context,resName,RES_DRABLE); &#125; /** * 获取资源文件layout的id * @param context * @param resName * @return */ public static int getLayoutId(Context context,String resName)&#123; return getResId(context,resName,RES_LAYOUT); &#125; /** * 获取资源文件style的id * @param context * @param resName * @return */ public static int getStyleId(Context context,String resName)&#123; return getResId(context,resName,RES_STYLE); &#125; /** * 获取资源文件color的id * @param context * @param resName * @return */ public static int getColorId(Context context,String resName)&#123; return getResId(context,resName,RES_COLOR); &#125; /** * 获取资源文件dimen的id * @param context * @param resName * @return */ public static int getDimenId(Context context,String resName)&#123; return getResId(context,resName,RES_DIMEN); &#125; /** * 获取资源文件ainm的id * @param context * @param resName * @return */ public static int getAnimId(Context context,String resName)&#123; return getResId(context,resName,RES_ANIM); &#125; /** * 获取资源文件menu的id */ public static int getMenuId(Context context,String resName)&#123; return getResId(context,resName,RES_MENU); &#125; /** * 获取资源文件ID * @param context * @param resName * @param defType * @return */ public static int getResId(Context context,String resName,String defType)&#123; return context.getResources().getIdentifier(resName, defType, context.getPackageName()); &#125;&#125;","categories":[{"name":"Android疑难杂症","slug":"Android疑难杂症","permalink":"http://zhouzhuo810.github.io/categories/Android%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"Android支付宝支付-返回签名错误问题","slug":"Android支付宝支付-返回签名错误问题","date":"2017-09-30T08:14:53.000Z","updated":"2024-06-13T11:58:36.766Z","comments":true,"path":"2017/09/30/Android支付宝支付-返回签名错误问题/","permalink":"http://zhouzhuo810.github.io/2017/09/30/Android%E6%94%AF%E4%BB%98%E5%AE%9D%E6%94%AF%E4%BB%98-%E8%BF%94%E5%9B%9E%E7%AD%BE%E5%90%8D%E9%94%99%E8%AF%AF%E9%97%AE%E9%A2%98/","excerpt":"","text":"解决方案首先，检查服务端公钥是否为支付宝公钥。（不是App公钥）。其次，检查服务端APP私钥是否和支付宝平台的APP公钥匹配(推荐RSA2)；最后，沙箱环境是否注释。","categories":[{"name":"Android疑难杂症","slug":"Android疑难杂症","permalink":"http://zhouzhuo810.github.io/categories/Android%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"Android微信支付返回-1问题解决","slug":"Android微信支付返回-1问题解决","date":"2017-09-30T08:06:38.000Z","updated":"2024-06-13T11:58:36.766Z","comments":true,"path":"2017/09/30/Android微信支付返回-1问题解决/","permalink":"http://zhouzhuo810.github.io/2017/09/30/Android%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E8%BF%94%E5%9B%9E-1%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/","excerpt":"整体流程回顾123456789101112131415 商户系统和微信支付系统主要交互说明： 步骤1：用户在商户APP中选择商品，提交订单，选择微信支付。 步骤2：商户后台收到用户支付单，调用微信支付统一下单接口。参见【统一下单API】。 步骤3：统一下单接口返回正常的prepay_id，再按签名规范重新生成签名后，将数据传输给APP。参与签名的字段名为appid，partnerid，prepayid，noncestr，timestamp，package。注意：package的值格式为Sign=WXPay 步骤4：商户APP调起微信支付。api参见本章节【app端开发步骤说明】 步骤5：商户后台接收支付通知。api参见【支付结果通知API】 步骤6：商户后台查询支付结果。，api参见【查询订单API】","text":"整体流程回顾123456789101112131415 商户系统和微信支付系统主要交互说明： 步骤1：用户在商户APP中选择商品，提交订单，选择微信支付。 步骤2：商户后台收到用户支付单，调用微信支付统一下单接口。参见【统一下单API】。 步骤3：统一下单接口返回正常的prepay_id，再按签名规范重新生成签名后，将数据传输给APP。参与签名的字段名为appid，partnerid，prepayid，noncestr，timestamp，package。注意：package的值格式为Sign=WXPay 步骤4：商户APP调起微信支付。api参见本章节【app端开发步骤说明】 步骤5：商户后台接收支付通知。api参见【支付结果通知API】 步骤6：商户后台查询支付结果。，api参见【查询订单API】 问题解决首先，检查微信平台的APP ID是否正确；其次，检查微信商户平台的API密钥(随机32位即可)是否设置且正确使用；随机字符串生成地址 然后，检查微信平台的包名和签名(注意字母小写)是否配置并正确；再然后，检查服务端是否二次签名；并且二次签名是否正确；最后，检查返回的时间戳是不是使用二次签名的时间戳；返回的随机字符串是不是二次签名时的随机字符串。","categories":[{"name":"Android疑难杂症","slug":"Android疑难杂症","permalink":"http://zhouzhuo810.github.io/categories/Android%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"Android常用demo-微信支付","slug":"Android常用demo-微信支付","date":"2017-09-13T03:06:55.000Z","updated":"2024-06-13T11:58:36.766Z","comments":true,"path":"2017/09/13/Android常用demo-微信支付/","permalink":"http://zhouzhuo810.github.io/2017/09/13/Android%E5%B8%B8%E7%94%A8demo-%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98/","excerpt":"","text":"微信支付百度云下载 1提取码： 79nk","categories":[{"name":"Android常用demo","slug":"Android常用demo","permalink":"http://zhouzhuo810.github.io/categories/Android%E5%B8%B8%E7%94%A8demo/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"JavaEE-文件存储","slug":"JavaEE-文件存储","date":"2017-09-07T03:03:10.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"2017/09/07/JavaEE-文件存储/","permalink":"http://zhouzhuo810.github.io/2017/09/07/JavaEE-%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8/","excerpt":"文件存储工具整理 随机名字存储 指定文件名存储 字节存储","text":"文件存储工具整理 随机名字存储 指定文件名存储 字节存储 工具类123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990import org.springframework.web.context.request.RequestContextHolder;import org.springframework.web.context.request.ServletRequestAttributes; import javax.servlet.http.HttpServletRequest;import java.io.File;import java.io.FileOutputStream;import java.io.IOException;import java.io.OutputStream;import java.nio.charset.Charset; /** * Created by admin on 2017/7/22. */public class FileUtils &#123; public static String saveFileToPathWithRandomName(String content, String path) throws IOException &#123; // 创建目录 File dir = new File(path); if (!dir.exists()) &#123; dir.mkdirs(); &#125; // 读取文件流并保持在指定路径 String filename = System.currentTimeMillis() + &quot;.txt&quot;; String mPath = path + File.separator + filename; System.out.println(path); OutputStream outputStream = new FileOutputStream(mPath); byte[] buffer = content.getBytes(Charset.forName(&quot;utf-8&quot;)); outputStream.write(buffer); outputStream.flush(); outputStream.close(); return filename; &#125; public static String saveFileToPathWithName(String content, String path, String filename) throws IOException &#123; // 创建目录 File dir = new File(path); if (!dir.exists()) &#123; dir.mkdirs(); &#125; // 读取文件流并保持在指定路径 String mPath = path + File.separator + filename; System.out.println(path); OutputStream outputStream = new FileOutputStream(mPath); byte[] buffer = content.getBytes(Charset.forName(&quot;utf-8&quot;)); outputStream.write(buffer); outputStream.flush(); outputStream.close(); return filename; &#125; public static void deleteFiles(String dir) &#123; File file = new File(dir); if (!file.exists()) &#123; return; &#125; if (file.isDirectory()) &#123; File[] files = file.listFiles(); if (files != null &amp;&amp; files.length &gt; 0) &#123; for (File file1 : files) &#123; file1.delete(); &#125; &#125; &#125; &#125; public static String saveFile(byte[] data, String dirName, String fileName) &#123; HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest(); String realPath = request.getRealPath(&quot;&quot;); String newpath = realPath + File.separator + dirName; File file = new File(newpath); if (!file.exists()) &#123; file.mkdirs(); &#125; String filePath = newpath + File.separator + fileName; try &#123; FileOutputStream fos = new FileOutputStream(new File(filePath), false); fos.write(data); fos.flush(); fos.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; return filePath; &#125;&#125;","categories":[{"name":"JavaEE","slug":"JavaEE","permalink":"http://zhouzhuo810.github.io/categories/JavaEE/"},{"name":"Java工具类","slug":"Java工具类","permalink":"http://zhouzhuo810.github.io/categories/Java%E5%B7%A5%E5%85%B7%E7%B1%BB/"}],"tags":[{"name":"JavaEE","slug":"JavaEE","permalink":"http://zhouzhuo810.github.io/tags/JavaEE/"}]},{"title":"JavaEE-文件压缩与解压","slug":"JavaEE-文件压缩与解压","date":"2017-09-07T02:57:10.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"2017/09/07/JavaEE-文件压缩与解压/","permalink":"http://zhouzhuo810.github.io/2017/09/07/JavaEE-%E6%96%87%E4%BB%B6%E5%8E%8B%E7%BC%A9%E4%B8%8E%E8%A7%A3%E5%8E%8B/","excerpt":"文件压缩与解压工具整理 文件或文件夹压缩 文件解压","text":"文件压缩与解压工具整理 文件或文件夹压缩 文件解压 工具类123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384import java.io.File;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.IOException;import java.util.zip.ZipEntry;import java.util.zip.ZipOutputStream; public class ZipUtils &#123; private ZipUtils()&#123; &#125; public static void doCompress(String srcFile, String zipFile) throws IOException &#123; doCompress(new File(srcFile), new File(zipFile)); &#125; /** * 文件压缩 * @param srcFile 目录或者单个文件 * @param zipFile 压缩后的ZIP文件 */ public static void doCompress(File srcFile, File zipFile) throws IOException &#123; ZipOutputStream out = null; try &#123; out = new ZipOutputStream(new FileOutputStream(zipFile)); doCompress(srcFile, out); &#125; catch (Exception e) &#123; throw e; &#125; finally &#123; out.close();//记得关闭资源 &#125; &#125; public static void doCompress(String filelName, ZipOutputStream out) throws IOException&#123; doCompress(new File(filelName), out); &#125; public static void doCompress(File file, ZipOutputStream out) throws IOException&#123; doCompress(file, out, &quot;&quot;); &#125; public static void doCompress(File inFile, ZipOutputStream out, String dir) throws IOException &#123; if ( inFile.isDirectory() ) &#123; File[] files = inFile.listFiles(); if (files!=null &amp;&amp; files.length&gt;0) &#123; for (File file : files) &#123; String name = inFile.getName(); if (!&quot;&quot;.equals(dir)) &#123; name = dir + &quot;/&quot; + name; &#125; ZipUtils.doCompress(file, out, name); &#125; &#125; &#125; else &#123; ZipUtils.doZip(inFile, out, dir); &#125; &#125; public static void doZip(File inFile, ZipOutputStream out, String dir) throws IOException &#123; String entryName = null; if (!&quot;&quot;.equals(dir)) &#123; entryName = dir + &quot;/&quot; + inFile.getName(); &#125; else &#123; entryName = inFile.getName(); &#125; ZipEntry entry = new ZipEntry(entryName); out.putNextEntry(entry); int len = 0 ; byte[] buffer = new byte[1024]; FileInputStream fis = new FileInputStream(inFile); while ((len = fis.read(buffer)) &gt; 0) &#123; out.write(buffer, 0, len); out.flush(); &#125; out.closeEntry(); fis.close(); &#125; public static void main(String[] args) throws IOException &#123; doCompress(&quot;D:/java/&quot;, &quot;D:/java.zip&quot;); &#125; &#125;","categories":[{"name":"JavaEE","slug":"JavaEE","permalink":"http://zhouzhuo810.github.io/categories/JavaEE/"},{"name":"Java工具类","slug":"Java工具类","permalink":"http://zhouzhuo810.github.io/categories/Java%E5%B7%A5%E5%85%B7%E7%B1%BB/"}],"tags":[{"name":"JavaEE","slug":"JavaEE","permalink":"http://zhouzhuo810.github.io/tags/JavaEE/"}]},{"title":"JavaEE-SpingMVC之log4j日志配置","slug":"JavaEE-SpingMVC之log4j日志配置","date":"2017-08-23T03:07:57.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"2017/08/23/JavaEE-SpingMVC之log4j日志配置/","permalink":"http://zhouzhuo810.github.io/2017/08/23/JavaEE-SpingMVC%E4%B9%8Blog4j%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE/","excerpt":"web.xml 添加配置12345678910111213141516&lt;!-- Spring的log4j监听器 --&gt;&lt;context-param&gt; &lt;param-name&gt;webAppRootKey&lt;/param-name&gt; &lt;param-value&gt;webapp.root1&lt;/param-value&gt;&lt;/context-param&gt;&lt;context-param&gt; &lt;param-name&gt;log4jConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:log4j.properties&lt;/param-value&gt;&lt;/context-param&gt;&lt;context-param&gt; &lt;param-name&gt;log4jRefreshInterval&lt;/param-name&gt; &lt;param-value&gt;6000&lt;/param-value&gt;&lt;/context-param&gt;&lt;listener&gt; &lt;listener-class&gt;org.springframework.web.util.Log4jConfigListener&lt;/listener-class&gt;&lt;/listener&gt;","text":"web.xml 添加配置12345678910111213141516&lt;!-- Spring的log4j监听器 --&gt;&lt;context-param&gt; &lt;param-name&gt;webAppRootKey&lt;/param-name&gt; &lt;param-value&gt;webapp.root1&lt;/param-value&gt;&lt;/context-param&gt;&lt;context-param&gt; &lt;param-name&gt;log4jConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:log4j.properties&lt;/param-value&gt;&lt;/context-param&gt;&lt;context-param&gt; &lt;param-name&gt;log4jRefreshInterval&lt;/param-name&gt; &lt;param-value&gt;6000&lt;/param-value&gt;&lt;/context-param&gt;&lt;listener&gt; &lt;listener-class&gt;org.springframework.web.util.Log4jConfigListener&lt;/listener-class&gt;&lt;/listener&gt; resources中添加log4j.properties 注意：webAppRootKey的值和${webapp.root1}的内容相对相。 123456789101112131415161718192021222324252627282930313233343536373839404142### 设置###log4j.rootLogger = debug,stdout,D,E### 输出信息到控制抬 ####log4j.appender.stdout = org.apache.log4j.ConsoleAppender#log4j.appender.stdout.Target = System.out#log4j.appender.stdout.layout = org.apache.log4j.PatternLayout#log4j.appender.stdout.layout.ConversionPattern = [%-5p] %d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; method:%l%n%m%n### 输出DEBUG 级别以上的日志到=E://logs/error.log ###log4j.appender.D = org.apache.log4j.DailyRollingFileAppenderlog4j.appender.D.File = $&#123;webapp.root1&#125;/WEB-INF/logs/log.loglog4j.appender.D.Append = truelog4j.appender.D.Threshold = INFOlog4j.appender.D.layout = org.apache.log4j.PatternLayoutlog4j.appender.D.layout.ConversionPattern = %-d&#123;yyyy-MM-dd HH:mm:ss&#125; [%X&#123;ip&#125;] [ %t:%r ] - [ %p ] %m%n### 输出ERROR 级别以上的日志到=E://logs/error.log ###log4j.appender.E = org.apache.log4j.DailyRollingFileAppenderlog4j.appender.E.File =$&#123;webapp.root1&#125;/WEB-INF/logs/error.loglog4j.appender.E.Append = truelog4j.appender.E.Threshold = ERRORlog4j.appender.E.layout = org.apache.log4j.PatternLayoutlog4j.appender.E.layout.ConversionPattern = %-d&#123;yyyy-MM-dd HH:mm:ss&#125; [%X&#123;ip&#125;] [ %t:%r ] - [ %p ] %m%n#log4j.rootLogger=INFO,CONSOLE,DAILY_ALL#console log#log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender#log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout#log4j.appender.CONSOLE.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH:mm:ss&#125; [%t] %-5p %c - %m%n##all log#log4j.appender.DAILY_ALL=org.apache.log4j.DailyRollingFileAppender#log4j.appender.DAILY_ALL.layout=org.apache.log4j.PatternLayout#log4j.appender.DAILY_ALL.layout.ConversionPattern=&quot;%p %d&#123;yyyy-MM-dd HH:mm:ss&#125; %-50.50c(%L) - %m%n##$&#123;webapp.root&#125; == the path of your tomcat path#log4j.appender.DAILY_ALL.File=$&#123;webapp.root&#125;/WEB-INF/logs/app.log## General Apache libraries#log4j.logger.org.apache=WARN## Spring#log4j.logger.org.springframework=WARN# emaillog4j.logger.com.alexgaoyh.util.email=INFO, emaillog4j.appender.email=org.apache.log4j.DailyRollingFileAppenderlog4j.appender.email.layout=org.apache.log4j.PatternLayoutlog4j.appender.email.layout.ConversionPattern=&quot;%p %d&#123;yyyy-MM-dd HH:mm:ss&#125; %-50.50c(%L) - %m%nlog4j.appender.email.File=$&#123;webapp.root1&#125;/WEB-INF/logs/email/email.log","categories":[{"name":"JavaEE","slug":"JavaEE","permalink":"http://zhouzhuo810.github.io/categories/JavaEE/"},{"name":"SpringMVC","slug":"SpringMVC","permalink":"http://zhouzhuo810.github.io/categories/SpringMVC/"}],"tags":[{"name":"JavaEE","slug":"JavaEE","permalink":"http://zhouzhuo810.github.io/tags/JavaEE/"}]},{"title":"Android疑难杂症-串口通讯","slug":"Android疑难杂症-串口通讯","date":"2017-08-23T03:04:21.000Z","updated":"2024-06-13T11:58:36.766Z","comments":true,"path":"2017/08/23/Android疑难杂症-串口通讯/","permalink":"http://zhouzhuo810.github.io/2017/08/23/Android%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87-%E4%B8%B2%E5%8F%A3%E9%80%9A%E8%AE%AF/","excerpt":"usb-serial-for-android 在这个项目的基础上我将串口通信的功能封装了起来，用起来更加简单了。 Github传送门：OkUSB OkUSB一个简洁的Android串口通信框架。 功能简介 支持设置波特率 支持设置数据位 支持设置停止位 支持设置校验位 支持DTS和RTS 支持串口连接状态监听","text":"usb-serial-for-android 在这个项目的基础上我将串口通信的功能封装了起来，用起来更加简单了。 Github传送门：OkUSB OkUSB一个简洁的Android串口通信框架。 功能简介 支持设置波特率 支持设置数据位 支持设置停止位 支持设置校验位 支持DTS和RTS 支持串口连接状态监听 用法简介Gradle123456789101112allprojects &#123; repositories &#123; ... maven &#123; url &#x27;https://jitpack.io&#x27; &#125; &#125;&#125;dependencies &#123; compile &#x27;com.github.zhouzhuo810:OkUSB:1.0.0&#x27;&#125; 具体用法1.在AndroidManifest.xml中添加如下特性： 1&lt;uses-feature android:name=&quot;android.hardware.usb.host&quot; /&gt; 在需要连接串口的Activity中添加： 123456&lt;intent-filter&gt; &lt;action android:name=&quot;android.hardware.usb.action.USB_DEVICE_ATTACHED&quot; /&gt;&lt;/intent-filter&gt;&lt;meta-data android:name=&quot;android.hardware.usb.action.USB_DEVICE_ATTACHED&quot; android:resource=&quot;@xml/device_filter&quot; /&gt; 2.在res文件夹创建xml文件夹，新建device_filter.xml 12345&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;resources&gt; &lt;!-- 要进行通信的USB设备的供应商ID（VID）和产品识别码（PID）--&gt; &lt;usb-device vendor-id=&quot;0403&quot; product-id=&quot;6001&quot; /&gt;&lt;/resources&gt; 3.前面都是准备工作，这里才真正使用。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061 //初始化usb = new USB.USBBuilder(this) .setBaudRate(115200) //波特率 .setDataBits(8) //数据位 .setStopBits(UsbSerialPort.STOPBITS_1) //停止位 .setParity(UsbSerialPort.PARITY_NONE) //校验位 .setMaxReadBytes(20) //接受数据最大长度 .setReadDuration(500) //读数据间隔时间 .setDTR(false) //DTR enable .setRTS(false) //RTS enable .build(); //实现监听连接状态和数据收发。usb.setOnUsbChangeListener(new USB.OnUsbChangeListener() &#123; @Override public void onUsbConnect() &#123; Toast.makeText(MainActivity.this, &quot;conencted&quot;, Toast.LENGTH_SHORT).show(); &#125; @Override public void onUsbDisconnect() &#123; Toast.makeText(MainActivity.this, &quot;disconencted&quot;, Toast.LENGTH_SHORT).show(); &#125; @Override public void onDataReceive(byte[] data) &#123; tvResult.setText(new String(data, Charset.forName(&quot;GB2312&quot;))); &#125; @Override public void onUsbConnectFailed() &#123; Toast.makeText(MainActivity.this, &quot;connect fail&quot;, Toast.LENGTH_SHORT).show(); &#125; @Override public void onPermissionGranted() &#123; Toast.makeText(MainActivity.this, &quot;permission ok&quot;, Toast.LENGTH_SHORT).show(); &#125; @Override public void onPermissionRefused() &#123; Toast.makeText(MainActivity.this, &quot;permission fail&quot;, Toast.LENGTH_SHORT).show(); &#125; @Override public void onDriverNotSupport() &#123; Toast.makeText(MainActivity.this, &quot;no driver&quot;, Toast.LENGTH_SHORT).show(); &#125; @Override public void onWriteDataFailed(String error) &#123; Toast.makeText(MainActivity.this, &quot;write fail&quot; + error, Toast.LENGTH_SHORT).show(); &#125; @Override public void onWriteSuccess(int num) &#123; Toast.makeText(MainActivity.this, &quot;write ok &quot; + num, Toast.LENGTH_SHORT).show(); &#125;&#125;); 4.发送数据 123if (usb != null) &#123; usb.destroy();&#125; 5.如果是Activity，可以在onDestroy中调用如下代码关闭串口。 12345if (usb != null) &#123; usb.destroy();&#125;","categories":[{"name":"Android疑难杂症","slug":"Android疑难杂症","permalink":"http://zhouzhuo810.github.io/categories/Android%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"JavaEE-SpringMVC之获取项目根目录","slug":"JavaEE-SpringMVC之获取项目根目录","date":"2017-08-23T03:03:03.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"2017/08/23/JavaEE-SpringMVC之获取项目根目录/","permalink":"http://zhouzhuo810.github.io/2017/08/23/JavaEE-SpringMVC%E4%B9%8B%E8%8E%B7%E5%8F%96%E9%A1%B9%E7%9B%AE%E6%A0%B9%E7%9B%AE%E5%BD%95/","excerpt":"","text":"代码很少，但是很有用12HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();String realPath = request.getRealPath(&quot;&quot;);","categories":[{"name":"JavaEE","slug":"JavaEE","permalink":"http://zhouzhuo810.github.io/categories/JavaEE/"},{"name":"SpringMVC","slug":"SpringMVC","permalink":"http://zhouzhuo810.github.io/categories/SpringMVC/"}],"tags":[{"name":"JavaEE","slug":"JavaEE","permalink":"http://zhouzhuo810.github.io/tags/JavaEE/"}]},{"title":"Android常用代码-复制与粘贴","slug":"Android常用代码-复制与粘贴","date":"2017-08-23T02:59:25.000Z","updated":"2024-06-13T11:58:36.766Z","comments":true,"path":"2017/08/23/Android常用代码-复制与粘贴/","permalink":"http://zhouzhuo810.github.io/2017/08/23/Android%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81-%E5%A4%8D%E5%88%B6%E4%B8%8E%E7%B2%98%E8%B4%B4/","excerpt":"核心代码12ClipboardManager cm = (ClipboardManager) context.getSystemService(Context.CLIPBOARD_SERVICE);cm.setPrimaryClip(ClipData.newPlainText(label, text));","text":"核心代码12ClipboardManager cm = (ClipboardManager) context.getSystemService(Context.CLIPBOARD_SERVICE);cm.setPrimaryClip(ClipData.newPlainText(label, text)); 工具类封装123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960import android.content.ClipData;import android.content.ClipboardManager;import android.content.Context;import android.content.Intent;import android.net.Uri;import android.support.annotation.RequiresApi;/** * Android 复制粘贴工具 * Created by zhouzhuo810 on 2017/8/12. */public class CopyUtils &#123; public static void copyUrl(Context context,CharSequence label, String url) &#123; ClipboardManager cm = (ClipboardManager) context.getSystemService(Context.CLIPBOARD_SERVICE); cm.setPrimaryClip(ClipData.newRawUri(label, Uri.parse(url))); &#125; public static void copyUri(Context context,CharSequence label, Uri uri) &#123; ClipboardManager cm = (ClipboardManager) context.getSystemService(Context.CLIPBOARD_SERVICE); cm.setPrimaryClip(ClipData.newRawUri(label, uri)); &#125; @RequiresApi(value = 16) public static void copyHtml(Context context,CharSequence label, String text, String html) &#123; ClipboardManager cm = (ClipboardManager) context.getSystemService(Context.CLIPBOARD_SERVICE); cm.setPrimaryClip(ClipData.newHtmlText(label,text, html)); &#125; public static void copyPlainText(Context context, CharSequence label, String text) &#123; ClipboardManager cm = (ClipboardManager) context.getSystemService(Context.CLIPBOARD_SERVICE); cm.setPrimaryClip(ClipData.newPlainText(label, text)); &#125; public static void copyIntent(Context context,CharSequence label, Intent intent) &#123; ClipboardManager cm = (ClipboardManager) context.getSystemService(Context.CLIPBOARD_SERVICE); cm.setPrimaryClip(ClipData.newIntent(label, intent)); &#125; public static CharSequence getCopyPlainText(Context context) &#123; ClipboardManager cm = (ClipboardManager) context.getSystemService(Context.CLIPBOARD_SERVICE); return cm.getPrimaryClip().getItemAt(0).getText(); &#125; public static Intent getCopyIntent(Context context) &#123; ClipboardManager cm = (ClipboardManager) context.getSystemService(Context.CLIPBOARD_SERVICE); return cm.getPrimaryClip().getItemAt(0).getIntent(); &#125; @RequiresApi(value = 16) public static CharSequence getCopyHtmlText(Context context) &#123; ClipboardManager cm = (ClipboardManager) context.getSystemService(Context.CLIPBOARD_SERVICE); return cm.getPrimaryClip().getItemAt(0).getHtmlText(); &#125; public static Uri getCopyUri(Context context) &#123; ClipboardManager cm = (ClipboardManager) context.getSystemService(Context.CLIPBOARD_SERVICE); return cm.getPrimaryClip().getItemAt(0).getUri(); &#125; &#125;","categories":[{"name":"Android常用代码","slug":"Android常用代码","permalink":"http://zhouzhuo810.github.io/categories/Android%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"JavaEE-使用itext生成PDF总结","slug":"JavaEE-使用itext生成PDF总结","date":"2017-08-18T09:11:05.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"2017/08/18/JavaEE-使用itext生成PDF总结/","permalink":"http://zhouzhuo810.github.io/2017/08/18/JavaEE-%E4%BD%BF%E7%94%A8itext%E7%94%9F%E6%88%90PDF%E6%80%BB%E7%BB%93/","excerpt":"添加pom依赖123456789101112&lt;!-- pdf start--&gt;&lt;dependency&gt; &lt;groupId&gt;com.itextpdf&lt;/groupId&gt; &lt;artifactId&gt;itextpdf&lt;/artifactId&gt; &lt;version&gt;5.5.11&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;com.itextpdf&lt;/groupId&gt; &lt;artifactId&gt;itext-asian&lt;/artifactId&gt; &lt;version&gt;5.2.0&lt;/version&gt;&lt;/dependency&gt;&lt;!-- pdf end --&gt;","text":"添加pom依赖123456789101112&lt;!-- pdf start--&gt;&lt;dependency&gt; &lt;groupId&gt;com.itextpdf&lt;/groupId&gt; &lt;artifactId&gt;itextpdf&lt;/artifactId&gt; &lt;version&gt;5.5.11&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;com.itextpdf&lt;/groupId&gt; &lt;artifactId&gt;itext-asian&lt;/artifactId&gt; &lt;version&gt;5.2.0&lt;/version&gt;&lt;/dependency&gt;&lt;!-- pdf end --&gt; 基本功能添加普通文字(不换行)12345678910111213141516171819private void addText(Document document, String text, Font font) &#123; if (font == null) &#123; Chunk chunk = new Chunk(text == null ? &quot;&quot; : text); try &#123; document.add(chunk); &#125; catch (DocumentException e) &#123; e.printStackTrace(); &#125; &#125; else &#123; font.setSize(12f); font.setStyle(Font.NORMAL); Chunk chunk = new Chunk(text == null ? &quot;&quot; : text, font); try &#123; document.add(chunk); &#125; catch (DocumentException e) &#123; e.printStackTrace(); &#125; &#125;&#125; 添加普通文字(换行)12345678910111213141516171819private void addTextLine(Document document, String text, Font font) &#123; if (font == null) &#123; Chunk chunk = new Chunk((text == null ? &quot;&quot; : text) + &quot;\\n&quot;); try &#123; document.add(chunk); &#125; catch (DocumentException e) &#123; e.printStackTrace(); &#125; &#125; else &#123; font.setSize(12f); font.setStyle(Font.NORMAL); Chunk chunk = new Chunk((text == null ? &quot;&quot; : text) + &quot;\\n&quot;, font); try &#123; document.add(chunk); &#125; catch (DocumentException e) &#123; e.printStackTrace(); &#125; &#125;&#125; 添加下划线文字(带超链接)1234567891011121314151617/** * 添加下划线(带超链接) * * @param document Document对象 * @param text 链接文字 * @param fontPath 字体路径 * @throws IOException 异常 * @throws DocumentException 异常 */private void addUnderLineText(Document document, String text, String fontPath) throws IOException, DocumentException &#123; Font font = new Font(BaseFont.createFont(fontPath + &quot;Arial.ttf&quot;, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED), 12f, Font.UNDERLINE); font.setColor(BaseColor.BLUE); Anchor anchor = new Anchor(text, font); anchor.setReference(text); anchor.setName(text); document.add(anchor);&#125; 添加表格 方法封装 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960 /** * 添加表格 * * @param document Document对象 * @param tableTitle 表格标题 * @param titles 标题 * @param widthRatio 标题宽的比例 * @param values 内容 * @param titleBgColor 标题行背景颜色 * @param font 字体 * @throws DocumentException 异常 */private List&lt;PdfPRow&gt; addTable(Document document, String tableTitle, String[] titles, float[] widthRatio, String[][] values, BaseColor titleBgColor, Font font) throws DocumentException &#123; //添加表格标题 font.setSize(14f); font.setStyle(Font.BOLD); Chunk paragraph = new Chunk(tableTitle == null ? &quot;&quot; : tableTitle, font); try &#123; document.add(paragraph); &#125; catch (DocumentException e) &#123; e.printStackTrace(); &#125; font.setSize(12f); font.setStyle(Font.NORMAL); //添加表格 PdfPTable inter = new PdfPTable(titles.length); inter.setWidthPercentage(100); // 宽度100%填充 inter.setSpacingBefore(1f); // 前间距 inter.setSpacingAfter(1f); // 后间距 List&lt;PdfPRow&gt; listRow = inter.getRows(); //行 //设置列宽比例 inter.setWidths(widthRatio); //标题 PdfPCell cells[] = new PdfPCell[titles.length]; PdfPRow titleRow = new PdfPRow(cells); //单元格 for (int i = 0; i &lt; titles.length; i++) &#123; cells[i] = new PdfPCell(new Paragraph(titles[i], font)); cells[i].setBackgroundColor(titleBgColor == null ? BaseColor.LIGHT_GRAY : titleBgColor); cells[i].setPaddingTop(6f); cells[i].setPaddingBottom(6f); &#125; //把第一行添加到集合 listRow.add(titleRow); for (String[] value : values) &#123; PdfPCell childCells[] = new PdfPCell[value.length]; PdfPRow row = new PdfPRow(childCells); //添加列 for (int i = 0; i &lt; value.length; i++) &#123; childCells[i] = new PdfPCell(new Paragraph(value[i], font));//单元格内容 childCells[i].setPaddingTop(4f); childCells[i].setPaddingBottom(4f); &#125; //添加行 listRow.add(row); &#125; document.add(inter); return listRow;&#125; 用法示例 123456789101112131415161718192021222324252627282930private void pdfAddRequestHeaders(Document document, String projectId, String id, Font font) throws DocumentException &#123; List&lt;RequestHeaderEntity&gt; globals = mRequestHeaderService.getGlobalRequestHeaders(projectId); List&lt;RequestHeaderEntity&gt; args = mRequestHeaderService.getBaseDao().executeCriteria(ResponseArgUtils.getArgByInterfaceId(id)); if (globals != null &amp;&amp; globals.size() &gt; 0) &#123; //设置列宽 float[] columnWidths = &#123;3f, 2f, 5f&#125;; String[][] values = new String[args.size()][3]; for (int i = 0; i &lt; args.size(); i++) &#123; RequestHeaderEntity entity = args.get(i); values[i][0] = entity.getName(); values[i][1] = entity.getValue() == null ? &quot;&quot; : entity.getValue(); values[i][2] = entity.getNote() == null ? &quot;&quot; : entity.getNote(); &#125; addTable(document, &quot;全局请求头&quot;, new String[]&#123;&quot;名称&quot;, &quot;默认值&quot;, &quot;说明&quot;&#125;, columnWidths, values, null, font); &#125; if (args != null &amp;&amp; args.size() &gt; 0) &#123; //设置列宽 float[] columnWidths = &#123;3f, 2f, 5f&#125;; String[][] values = new String[args.size()][3]; for (int i = 0; i &lt; args.size(); i++) &#123; RequestHeaderEntity entity = args.get(i); values[i][0] = entity.getName(); values[i][1] = entity.getValue() == null ? &quot;&quot; : entity.getValue(); values[i][2] = entity.getNote() == null ? &quot;&quot; : entity.getNote(); &#125; addTable(document, &quot;其他请求头&quot;, new String[]&#123;&quot;名称&quot;, &quot;默认值&quot;, &quot;说明&quot;&#125;, columnWidths, values, null, font); &#125;&#125; 难点添加页码 使用 123456PdfWriter pdfWriter = PdfWriter.getInstance(document, new FileOutputStream(filePath));PdfReportM1HeaderFooter footer = new PdfReportM1HeaderFooter();pdfWriter.setPageEvent(footer);//打开文档document.open();//... ... 工具类 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155/** * Project Name:report * File Name:PdfReportM1HeaderFooter.java * Package Name:com.riambsoft.report.pdf * Date:2013-9-16上午08:59:00 * Copyright (c) 2013, riambsoft All Rights Reserved. */ import java.io.IOException; import com.itextpdf.text.Document;import com.itextpdf.text.DocumentException;import com.itextpdf.text.Element;import com.itextpdf.text.Font;import com.itextpdf.text.PageSize;import com.itextpdf.text.Phrase;import com.itextpdf.text.Rectangle;import com.itextpdf.text.pdf.BaseFont;import com.itextpdf.text.pdf.ColumnText;import com.itextpdf.text.pdf.PdfContentByte;import com.itextpdf.text.pdf.PdfPageEventHelper;import com.itextpdf.text.pdf.PdfTemplate;import com.itextpdf.text.pdf.PdfWriter; public class PdfReportM1HeaderFooter extends PdfPageEventHelper &#123; /** * 页眉 */ public String header = &quot;&quot;; /** * 文档字体大小，页脚页眉最好和文本大小一致 */ public int presentFontSize = 12; /** * 文档页面大小，最好前面传入，否则默认为A4纸张 */ public Rectangle pageSize = PageSize.A4; // 模板 public PdfTemplate total; // 基础字体对象 public BaseFont bf = null; // 利用基础字体生成的字体对象，一般用于生成中文文字 public Font fontDetail = null; /** * * Creates a new instance of PdfReportM1HeaderFooter 无参构造方法. * */ public PdfReportM1HeaderFooter() &#123; &#125; /** * * Creates a new instance of PdfReportM1HeaderFooter 构造方法. * * @param yeMei * 页眉字符串 * @param presentFontSize * 数据体字体大小 * @param pageSize * 页面文档大小，A4，A5，A6横转翻转等Rectangle对象 */ public PdfReportM1HeaderFooter(String yeMei, int presentFontSize, Rectangle pageSize) &#123; this.header = yeMei; this.presentFontSize = presentFontSize; this.pageSize = pageSize; &#125; public void setHeader(String header) &#123; this.header = header; &#125; public void setPresentFontSize(int presentFontSize) &#123; this.presentFontSize = presentFontSize; &#125; /** * * TODO 文档打开时创建模板 * * @see com.itextpdf.text.pdf.PdfPageEventHelper#onOpenDocument(com.itextpdf.text.pdf.PdfWriter, com.itextpdf.text.Document) */ public void onOpenDocument(PdfWriter writer, Document document) &#123; total = writer.getDirectContent().createTemplate(70, 70);// 共 页 的矩形的长宽高 &#125; /** * * TODO 关闭每页的时候，写入页眉，写入&#x27;第几页共&#x27;这几个字。 * * @see com.itextpdf.text.pdf.PdfPageEventHelper#onEndPage(com.itextpdf.text.pdf.PdfWriter, com.itextpdf.text.Document) */ public void onEndPage(PdfWriter writer, Document document) &#123; try &#123; if (bf == null) &#123; bf = BaseFont.createFont(&quot;STSong-Light&quot;, &quot;UniGB-UCS2-H&quot;, false); &#125; if (fontDetail == null) &#123; fontDetail = new Font(bf, presentFontSize, Font.NORMAL);// 数据体字体 &#125; &#125; catch (DocumentException e) &#123; e.printStackTrace(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; // 1.写入页眉 ColumnText.showTextAligned(writer.getDirectContent(), Element.ALIGN_LEFT, new Phrase(header, fontDetail), document.left(), document.top() + 20, 0); // 2.写入前半部分的 第 X页/共 int pageS = writer.getPageNumber(); String foot1 = &quot;第 &quot; + pageS + &quot; 页 /共&quot;; Phrase footer = new Phrase(foot1, fontDetail); // 3.计算前半部分的foot1的长度，后面好定位最后一部分的&#x27;Y页&#x27;这俩字的x轴坐标，字体长度也要计算进去 = len float len = bf.getWidthPoint(foot1, presentFontSize); // 4.拿到当前的PdfContentByte PdfContentByte cb = writer.getDirectContent(); //自己增加的/* if (pageS == 1) &#123; Phrase footerLeft = new Phrase(&quot;&quot;, fontDetail); ColumnText.showTextAligned(cb, Element.ALIGN_LEFT, footerLeft, document.left(), document.bottom() - 20, 0); &#125;*/ // 5.写入页脚1，x轴就是(右margin+左margin + right() -left()- len)/2.0F 再给偏移20F适合人类视觉感受，否则肉眼看上去就太偏左了 ,y轴就是底边界-20,否则就贴边重叠到数据体里了就不是页脚了；注意Y轴是从下往上累加的，最上方的Top值是大于Bottom好几百开外的。 ColumnText.showTextAligned(cb, Element.ALIGN_CENTER, footer, (document.rightMargin() + document.right() + document.leftMargin() - document.left() - len) / 2.0F + 20F, document.bottom() - 20, 0); // 6.写入页脚2的模板（就是页脚的Y页这俩字）添加到文档中，计算模板的和Y轴,X=(右边界-左边界 - 前半部分的len值)/2.0F + len ， y 轴和之前的保持一致，底边界-20 cb.addTemplate(total, (document.rightMargin() + document.right() + document.leftMargin() - document.left()) / 2.0F + 20F, document.bottom() - 20); // 调节模版显示的位置 &#125; /** * * TODO 关闭文档时，替换模板，完成整个页眉页脚组件 * * @see com.itextpdf.text.pdf.PdfPageEventHelper#onCloseDocument(com.itextpdf.text.pdf.PdfWriter, com.itextpdf.text.Document) */ public void onCloseDocument(PdfWriter writer, Document document) &#123; // 7.最后一步了，就是关闭文档的时候，将模板替换成实际的 Y 值,至此，page x of y 制作完毕，完美兼容各种文档size。 total.beginText(); total.setFontAndSize(bf, presentFontSize);// 生成的模版的字体、颜色 String foot2 = &quot; &quot; + (writer.getPageNumber()) + &quot; 页&quot;; total.showText(foot2);// 模版显示的内容 total.endText(); total.closePath(); &#125;&#125; 添加书签1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980/** * 添加分组标题(带标签) * @param document Document对象 * @param text 标题内容 * @param number 标题数字 * @param font 字体 * @return Chapter对象 */private Chapter addGroup(Document document, String text, int number, Font font) &#123; addTextLine(document, &quot;&quot;, font); addTextLine(document, &quot;&quot;, font); if (font != null) &#123; font.setSize(22f); font.setStyle(Font.BOLD); Paragraph paragraph = new Paragraph( (text == null ? &quot;&quot; : text), font); Chapter chapter = new Chapter(paragraph, number); chapter.setBookmarkOpen(true); chapter.setBookmarkTitle(number + &quot;. &quot; + text); chapter.setTriggerNewPage(false); try &#123; document.add(chapter); &#125; catch (DocumentException e) &#123; e.printStackTrace(); &#125; return chapter; &#125; else &#123; Paragraph paragraph = new Paragraph((text == null ? &quot;&quot; : text)); Chapter chapter = new Chapter(paragraph, number); chapter.setBookmarkOpen(true); chapter.setBookmarkTitle(number + &quot;. &quot; + text); chapter.setTriggerNewPage(false); try &#123; document.add(paragraph); &#125; catch (DocumentException e) &#123; e.printStackTrace(); &#125; return chapter; &#125;&#125; /** * 添加组内小标题(带标签) * * @param document Document对象 * @param chapter Chapter对象 * @param text 标题 * @param number 序号 * @param font 字体 */private void addGroupItem(Document document, Chapter chapter, String text, int groupNumber, int number, Font font) &#123; addTextLine(document, &quot;&quot;, font); if (font != null) &#123; font.setSize(18f); font.setStyle(Font.BOLD); Paragraph paragraph = new Paragraph((text == null ? &quot;&quot; : text), font); Section section = chapter.addSection(paragraph); section.setBookmarkOpen(true); section.setBookmarkTitle(groupNumber + &quot;.&quot; + number + &quot;. &quot; + text); section.setTriggerNewPage(false); section.setNumberStyle(Section.NUMBERSTYLE_DOTTED_WITHOUT_FINAL_DOT); try &#123; document.add(section); &#125; catch (DocumentException e) &#123; e.printStackTrace(); &#125; &#125; else &#123; Paragraph paragraph = new Paragraph((text == null ? &quot;&quot; : text)); Section section = chapter.addSection(paragraph); section.setBookmarkOpen(true); section.setBookmarkTitle(groupNumber + &quot;.&quot; + number + &quot;. &quot; + text); section.setNumberStyle(Section.NUMBERSTYLE_DOTTED_WITHOUT_FINAL_DOT); section.setTriggerNewPage(false); try &#123; document.add(section); &#125; catch (DocumentException e) &#123; e.printStackTrace(); &#125; &#125;&#125; 添加水印123456789101112131415161718192021222324252627282930313233343536373839404142/** * 【功能描述：添加文字水印】 * * @param srcFile 待加水印文件 * @param destFile 加水印后存放地址 * @param text 加水印的文本内容 * @param textWidth 文字横坐标 推荐300-400 * @param textHeight 文字纵坐标 推荐300-400 * @throws Exception */public String addWaterMark(String srcFile, String destFile, String text, int textWidth, int textHeight) throws Exception &#123; // 待加水印的文件 PdfReader reader = new PdfReader(srcFile); // 加完水印的文件 PdfStamper stamper = new PdfStamper(reader, new FileOutputStream( destFile)); int total = reader.getNumberOfPages() + 1; PdfContentByte content; // 设置字体 BaseFont font = BaseFont.createFont(); // 循环对每页插入水印 for (int i = 1; i &lt; total; i++) &#123; // 水印的起始 content = stamper.getUnderContent(i); // 开始 content.beginText(); // 设置颜色 默认为浅灰色 content.setColorFill(new BaseColor(238, 238, 238)); // 设置字体及字号 content.setFontAndSize(font, 50); // 设置起始位置 // content.setTextMatrix(400, 880); content.setTextMatrix(textWidth, textHeight); // 开始写入水印 content.showTextAligned(Element.ALIGN_CENTER, text, textWidth, textHeight, 45); content.endText(); &#125; stamper.close(); return destFile;&#125;","categories":[{"name":"JavaEE","slug":"JavaEE","permalink":"http://zhouzhuo810.github.io/categories/JavaEE/"},{"name":"SpringMVC","slug":"SpringMVC","permalink":"http://zhouzhuo810.github.io/categories/SpringMVC/"}],"tags":[{"name":"JavaEE","slug":"JavaEE","permalink":"http://zhouzhuo810.github.io/tags/JavaEE/"}]},{"title":"PHP-多文件上传接口实现","slug":"PHP-多文件上传接口实现","date":"2017-08-10T13:46:06.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"2017/08/10/PHP-多文件上传接口实现/","permalink":"http://zhouzhuo810.github.io/2017/08/10/PHP-%E5%A4%9A%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0/","excerpt":"想测试多文件上传功能； 使用PHP接口模拟一个接口非常方便； PHP多文件上传接收接口示例：","text":"想测试多文件上传功能； 使用PHP接口模拟一个接口非常方便； PHP多文件上传接收接口示例： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960&lt;?php //忽略警告 error_reporting(E_ALL || ~E_NOTICE); //设置编码 header(&quot;Content-type: text/html; charset=utf-8&quot;); /*设置时区*/ date_default_timezone_set(&#x27;prc&#x27;); saveFiles(); $isError = false; function saveFiles() &#123; foreach ($_FILES as $name =&gt; $values) &#123; saveFile($name); &#125; if ($isError == false) &#123; echo &#x27;&#123;&quot;code&quot;:&quot;successfully&quot;, &quot;data&quot;:&#123;&quot;msg&quot;:&quot;上传成功！&quot;&#125;&#125;&#x27;; &#125; &#125; function saveFile($file) &#123; $allowedExts = array(&quot;gif&quot;, &quot;jpeg&quot;, &quot;jpg&quot;, &quot;png&quot;); $temp = explode(&quot;.&quot;, $_FILES[$file][&quot;name&quot;]); $extension = end($temp); if ((($_FILES[$file][&quot;type&quot;] == &quot;image/gif&quot;) || ($_FILES[$file][&quot;type&quot;] == &quot;image/jpeg&quot;) || ($_FILES[$file][&quot;type&quot;] == &quot;image/jpg&quot;) || ($_FILES[$file][&quot;type&quot;] == &quot;image/pjpeg&quot;) || ($_FILES[$file][&quot;type&quot;] == &quot;image/x-png&quot;) || ($_FILES[$file][&quot;type&quot;] == &quot;image/png&quot;)) &amp;&amp; in_array($extension, $allowedExts)) &#123; if ($_FILES[$file][&quot;error&quot;] &gt; 0) &#123; $isError = true; echo &#x27;&#123;&quot;code&quot;:&quot;fail&quot;, &quot;data&quot;:&#123;&quot;msg&quot;:&quot;上传失败！&quot;&#125;&#125;&#x27;; break; &#125; else &#123; if (file_exists(&quot;image/&quot;.$_FILES[$file][&quot;name&quot;])) &#123; &#125; else &#123; move_uploaded_file($_FILES[$file][&quot;tmp_name&quot;], &quot;image/&quot;.$_FILES[$file][&quot;name&quot;]); &#125; &#125; &#125; else &#123; $isError = true; echo &#x27;&#123;&quot;code&quot;:&quot;fail&quot;, &quot;data&quot;:&#123;&quot;msg&quot;:&quot;非法文件格式！&quot;&#125;&#125;&#x27;; break; &#125; &#125; ?&gt;","categories":[{"name":"PHP","slug":"PHP","permalink":"http://zhouzhuo810.github.io/categories/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"http://zhouzhuo810.github.io/tags/PHP/"}]},{"title":"Android常用代码-点击隐藏虚拟键盘","slug":"Android常用功能-点击隐藏虚拟键盘","date":"2017-08-10T03:38:24.000Z","updated":"2024-06-13T11:58:36.766Z","comments":true,"path":"2017/08/10/Android常用功能-点击隐藏虚拟键盘/","permalink":"http://zhouzhuo810.github.io/2017/08/10/Android%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD-%E7%82%B9%E5%87%BB%E9%9A%90%E8%97%8F%E8%99%9A%E6%8B%9F%E9%94%AE%E7%9B%98/","excerpt":"","text":"代码非常简单： 1234567view.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; InputMethodManager imm = (InputMethodManager)v.getContext().getSystemService(INPUT_METHOD_SERVICE); imm.hideSoftInputFromWindow(v.getWindowToken(), 0); &#125;&#125;);","categories":[{"name":"Android常用代码","slug":"Android常用代码","permalink":"http://zhouzhuo810.github.io/categories/Android%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"Markdown-语法总结","slug":"Markdown语法总结","date":"2017-08-06T13:01:00.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"2017/08/06/Markdown语法总结/","permalink":"http://zhouzhuo810.github.io/2017/08/06/Markdown%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/","excerpt":"[大标题] 语法： 1# 标题内容","text":"[大标题] 语法： 1# 标题内容 [中标题] 语法： 1## 标题内容 [小标题] 语法： 1### 标题内容 [代码块] 语法： 123三个` 代码内容三个` [链接] 语法： 1[链接说明](链接地址) https://github.com/PhilJay/MPAndroidChart [图片] 语法： 1![图片说明](图片路径或地址)","categories":[{"name":"Markdown","slug":"Markdown","permalink":"http://zhouzhuo810.github.io/categories/Markdown/"}],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://zhouzhuo810.github.io/tags/Markdown/"}]},{"title":"SQL-快速将Excel的数据导入数据库","slug":"SQL-快速将Excel的数据导入数据库","date":"2017-07-28T00:55:58.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"2017/07/28/SQL-快速将Excel的数据导入数据库/","permalink":"http://zhouzhuo810.github.io/2017/07/28/SQL-%E5%BF%AB%E9%80%9F%E5%B0%86Excel%E7%9A%84%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93/","excerpt":"","text":"关键代码=CONCATENATE(&quot;INSERT INTO TableName (Colomn1, Column2) values (&#39;&quot;&amp;A1&amp;&quot;&#39;,&#39;&quot;&amp;B1&amp;&quot;&#39;);&quot;) 效果图","categories":[{"name":"SQL","slug":"SQL","permalink":"http://zhouzhuo810.github.io/categories/SQL/"}],"tags":[{"name":"SQL","slug":"SQL","permalink":"http://zhouzhuo810.github.io/tags/SQL/"}]},{"title":"Android签名打包-获取Windows和Mac系统中调试证书和发布证书的SHA1","slug":"Android签名打包-获取Mac调试证书的SHA1","date":"2017-07-28T00:46:46.000Z","updated":"2024-06-13T11:58:36.766Z","comments":true,"path":"2017/07/28/Android签名打包-获取Mac调试证书的SHA1/","permalink":"http://zhouzhuo810.github.io/2017/07/28/Android%E7%AD%BE%E5%90%8D%E6%89%93%E5%8C%85-%E8%8E%B7%E5%8F%96Mac%E8%B0%83%E8%AF%95%E8%AF%81%E4%B9%A6%E7%9A%84SHA1/","excerpt":"发布证书 Windows和Mac一样 打开Android Studio 找到Terminal,studio下方","text":"发布证书 Windows和Mac一样 打开Android Studio 找到Terminal,studio下方 键入命令 1keytool -v -list -keystore keystorePath(例:e:\\test.keystore) 输入密钥库口令，即可查看相关信息 注意：如果命令不加-v 是没有MD5信息的 调试证书 Windows win+R cmd,回车 输入如下命令 (admin是电脑用户名)： 1keytool -v -list -keystore c:\\users\\admin\\.android\\debug.keystore -alias androiddebugkey -storepass android -keypass android Mac 打开Android Studio 进入Terminal 输入如下命令： 1keytool -list -v -keystore ~/.android/debug.keystore -alias androiddebugkey -storepass android -keypass android","categories":[{"name":"Android签名打包","slug":"Android签名打包","permalink":"http://zhouzhuo810.github.io/categories/Android%E7%AD%BE%E5%90%8D%E6%89%93%E5%8C%85/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"Android疑难杂症-Glide加载圆角或圆形图片","slug":"Android疑难杂症-Glide加载圆角或圆形图片","date":"2017-07-27T05:10:18.000Z","updated":"2024-06-13T11:58:36.766Z","comments":true,"path":"2017/07/27/Android疑难杂症-Glide加载圆角或圆形图片/","permalink":"http://zhouzhuo810.github.io/2017/07/27/Android%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87-Glide%E5%8A%A0%E8%BD%BD%E5%9C%86%E8%A7%92%E6%88%96%E5%9C%86%E5%BD%A2%E5%9B%BE%E7%89%87/","excerpt":"添加类","text":"添加类 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152import android.content.Context;import android.content.res.Resources;import android.graphics.Bitmap;import android.graphics.BitmapShader;import android.graphics.Canvas;import android.graphics.Paint;import android.graphics.RectF; import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;import com.bumptech.glide.load.resource.bitmap.BitmapTransformation; public class GlideCircleTransform &#123; public static class GlideRoundTransform extends BitmapTransformation &#123; private float radius = 0f; public GlideRoundTransform(Context context) &#123; this(context, 6); &#125; public GlideRoundTransform(Context context, int dp) &#123; super(context); this.radius = Resources.getSystem().getDisplayMetrics().density * dp; &#125; @Override protected Bitmap transform(BitmapPool pool, Bitmap toTransform, int outWidth, int outHeight) &#123; return roundCrop(pool, toTransform); &#125; private Bitmap roundCrop(BitmapPool pool, Bitmap source) &#123; if (source == null) return null; Bitmap result = pool.get(source.getWidth(), source.getHeight(), Bitmap.Config.ARGB_8888); if (result == null) &#123; result = Bitmap.createBitmap(source.getWidth(), source.getHeight(), Bitmap.Config.ARGB_8888); &#125; Canvas canvas = new Canvas(result); Paint paint = new Paint(); paint.setShader(new BitmapShader(source, BitmapShader.TileMode.CLAMP, BitmapShader.TileMode.CLAMP)); paint.setAntiAlias(true); RectF rectF = new RectF(0f, 0f, source.getWidth(), source.getHeight()); canvas.drawRoundRect(rectF, radius, radius, paint); return result; &#125; @Override public String getId() &#123; return getClass().getName() + Math.round(radius); &#125; &#125;&#125; 使用方式12345Glide.with(context) .load(url) .transform(new CenterCrop(mContext), new GlideCircleTransform.GlideRoundTransform(mContext, 300)) .into(imageView);","categories":[{"name":"Android疑难杂症","slug":"Android疑难杂症","permalink":"http://zhouzhuo810.github.io/categories/Android%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"Android签名打包-指定apk文件名","slug":"Android签名打包-指定apk文件名","date":"2017-07-27T05:03:36.000Z","updated":"2024-06-13T11:58:36.766Z","comments":true,"path":"2017/07/27/Android签名打包-指定apk文件名/","permalink":"http://zhouzhuo810.github.io/2017/07/27/Android%E7%AD%BE%E5%90%8D%E6%89%93%E5%8C%85-%E6%8C%87%E5%AE%9Aapk%E6%96%87%E4%BB%B6%E5%90%8D/","excerpt":"开发工具 Android Studio 操作方法在build.gradle中加入","text":"开发工具 Android Studio 操作方法在build.gradle中加入 123456789101112131415161718192021android &#123; //... applicationVariants.all &#123;variant -&gt; variant.outputs.each &#123;output -&gt; def outputFile = output.outputFile def fileName if (outputFile != null &amp;&amp; outputFile.name.endsWith(&#x27;.apk&#x27;)) &#123; if (variant.buildType.name.equals(&#x27;release&#x27;)) &#123; fileName = &quot;APP名称_$&#123;defaultConfig.versionName&#125;_$&#123;defaultConfig.versionCode&#125;.apk&quot; &#125; else if (variant.buildType.name.equals(&#x27;debug&#x27;)) &#123; fileName = &quot;APP名称_$&#123;defaultConfig.versionName&#125;_$&#123;defaultConfig.versionCode&#125;_debug.apk&quot; &#125; output.outputFile = new File(outputFile.parent, fileName) &#125; &#125; &#125; &#125;","categories":[{"name":"Android签名打包","slug":"Android签名打包","permalink":"http://zhouzhuo810.github.io/categories/Android%E7%AD%BE%E5%90%8D%E6%89%93%E5%8C%85/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"JavaEE-SpringMVC之pom.xml","slug":"JavaEE-SpringMVC之pom-xml","date":"2017-07-20T00:20:48.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"2017/07/20/JavaEE-SpringMVC之pom-xml/","permalink":"http://zhouzhuo810.github.io/2017/07/20/JavaEE-SpringMVC%E4%B9%8Bpom-xml/","excerpt":"开发工具 InteliJ IDEA 新建一个maven工程复制如下依赖","text":"开发工具 InteliJ IDEA 新建一个maven工程复制如下依赖 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;!-- 这个不要照抄 --&gt; &lt;groupId&gt;me.zhouzhuo810&lt;/groupId&gt; &lt;artifactId&gt;zzapidoc-maven&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;!-- Nexus 私服配置 --&gt; &lt;!--&lt;repositories&gt; &lt;repository&gt; &lt;id&gt;nexus&lt;/id&gt; &lt;name&gt;Nexus&lt;/name&gt; &lt;url&gt;http://localhost:8081/nexus/content/groups/public/&lt;/url&gt; &lt;releases&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/releases&gt; &lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt; &lt;/repository&gt; &lt;/repositories&gt; &lt;pluginRepositories&gt; &lt;pluginRepository&gt; &lt;id&gt;nexus&lt;/id&gt; &lt;name&gt;Nexus&lt;/name&gt; &lt;url&gt;http://localhost:8081/nexus/content/groups/public/&lt;/url&gt; &lt;releases&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/releases&gt; &lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt; &lt;/pluginRepository&gt; &lt;/pluginRepositories&gt;--&gt; &lt;developers&gt; &lt;developer&gt; &lt;id&gt;web&lt;/id&gt; &lt;name&gt;alexgaoyh&lt;/name&gt; &lt;email&gt;alexgaoyh@sina.com&lt;/email&gt; &lt;/developer&gt; &lt;/developers&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.7&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt; &lt;version&gt;4.0.2.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-web&lt;/artifactId&gt; &lt;version&gt;4.0.2.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-tx&lt;/artifactId&gt; &lt;version&gt;4.0.2.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-orm&lt;/artifactId&gt; &lt;version&gt;4.0.2.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-aop&lt;/artifactId&gt; &lt;version&gt;4.0.2.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context-support&lt;/artifactId&gt; &lt;version&gt;4.0.2.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-core&lt;/artifactId&gt; &lt;version&gt;4.0.2.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.data&lt;/groupId&gt; &lt;artifactId&gt;spring-data-redis&lt;/artifactId&gt; &lt;version&gt;1.4.0.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;!-- Quartz framework --&gt; &lt;dependency&gt; &lt;groupId&gt;org.quartz-scheduler&lt;/groupId&gt; &lt;artifactId&gt;quartz&lt;/artifactId&gt; &lt;version&gt;2.2.1&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j&lt;/artifactId&gt; &lt;version&gt;1.2.14&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;5.1.21&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.aspectj&lt;/groupId&gt; &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt; &lt;version&gt;1.6.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.json&lt;/groupId&gt; &lt;artifactId&gt;json&lt;/artifactId&gt; &lt;version&gt;20140107&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;redis.clients&lt;/groupId&gt; &lt;artifactId&gt;jedis&lt;/artifactId&gt; &lt;version&gt;2.6.0&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;commons-logging&lt;/groupId&gt; &lt;artifactId&gt;commons-logging&lt;/artifactId&gt; &lt;version&gt;1.1.3&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;commons-lang&lt;/groupId&gt; &lt;artifactId&gt;commons-lang&lt;/artifactId&gt; &lt;version&gt;2.6&lt;/version&gt; &lt;/dependency&gt; &lt;!-- hibernate start --&gt; &lt;dependency&gt; &lt;groupId&gt;org.hibernate&lt;/groupId&gt; &lt;artifactId&gt;hibernate-core&lt;/artifactId&gt; &lt;version&gt;4.1.6.Final&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.javassist&lt;/groupId&gt; &lt;artifactId&gt;javassist&lt;/artifactId&gt; &lt;version&gt;3.18.0-GA&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.hibernate&lt;/groupId&gt; &lt;artifactId&gt;hibernate-c3p0&lt;/artifactId&gt; &lt;version&gt;4.3.4.Final&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.hibernate&lt;/groupId&gt; &lt;artifactId&gt;hibernate-commons-annotations&lt;/artifactId&gt; &lt;version&gt;3.2.0.Final&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.hibernate&lt;/groupId&gt; &lt;artifactId&gt;hibernate-tools&lt;/artifactId&gt; &lt;version&gt;4.0.0-CR1&lt;/version&gt; &lt;/dependency&gt; &lt;!-- hibernate end --&gt; &lt;dependency&gt; &lt;groupId&gt;org.hibernate&lt;/groupId&gt; &lt;artifactId&gt;hibernate-ehcache&lt;/artifactId&gt; &lt;version&gt;4.1.6.Final&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt; &lt;version&gt;1.7.0&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;jcl-over-slf4j&lt;/artifactId&gt; &lt;version&gt;1.6.1&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt; &lt;version&gt;1.7.0&lt;/version&gt; &lt;/dependency&gt; &lt;!-- emial support --&gt; &lt;dependency&gt; &lt;groupId&gt;javax.mail&lt;/groupId&gt; &lt;artifactId&gt;mail&lt;/artifactId&gt; &lt;version&gt;1.4.7&lt;/version&gt; &lt;/dependency&gt; &lt;!-- Shiro security --&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt; &lt;artifactId&gt;shiro-core&lt;/artifactId&gt; &lt;version&gt;1.2.3&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt; &lt;artifactId&gt;shiro-web&lt;/artifactId&gt; &lt;version&gt;1.2.3&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt; &lt;artifactId&gt;shiro-cas&lt;/artifactId&gt; &lt;version&gt;1.2.3&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt; &lt;artifactId&gt;shiro-spring&lt;/artifactId&gt; &lt;version&gt;1.2.3&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt; &lt;artifactId&gt;shiro-ehcache&lt;/artifactId&gt; &lt;version&gt;1.2.3&lt;/version&gt; &lt;/dependency&gt; &lt;!-- end of Shiro security --&gt; &lt;!-- jstl jsp页面标签 --&gt; &lt;dependency&gt; &lt;groupId&gt;jstl&lt;/groupId&gt; &lt;artifactId&gt;jstl&lt;/artifactId&gt; &lt;version&gt;1.2&lt;/version&gt; &lt;/dependency&gt; &lt;!-- json jackson --&gt; &lt;dependency&gt; &lt;groupId&gt;org.codehaus.jackson&lt;/groupId&gt; &lt;artifactId&gt;jackson-core-asl&lt;/artifactId&gt; &lt;version&gt;1.9.13&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.codehaus.jackson&lt;/groupId&gt; &lt;artifactId&gt;jackson-mapper-asl&lt;/artifactId&gt; &lt;version&gt;1.9.13&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;commons-codec&lt;/groupId&gt; &lt;artifactId&gt;commons-codec&lt;/artifactId&gt; &lt;version&gt;1.9&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;commons-fileupload&lt;/groupId&gt; &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt; &lt;version&gt;1.3&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;commons-io&lt;/groupId&gt; &lt;artifactId&gt;commons-io&lt;/artifactId&gt; &lt;version&gt;2.4&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt; &lt;version&gt;3.0.1&lt;/version&gt; &lt;scope&gt;provided&lt;/scope&gt; &lt;!--打包时不包含--&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt; &lt;artifactId&gt;jsp-api&lt;/artifactId&gt; &lt;version&gt;2.2&lt;/version&gt; &lt;scope&gt;provided&lt;/scope&gt; &lt;!--这里说明jsp-api.jar文件将由应用服务器提供，打包时不需要包含--&gt; &lt;/dependency&gt; &lt;!-- 测试使用，打包时不会打进去 --&gt; &lt;!-- Sprint-test 相关测试包 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-test&lt;/artifactId&gt; &lt;version&gt;3.2.11.RELEASE&lt;/version&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-core&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;finalName&gt;web&lt;/finalName&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;configuration&gt; &lt;source&gt;1.6&lt;/source&gt; &lt;target&gt;1.6&lt;/target&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;!-- 这里的 tomcat7-maven-plugin 为使用插件部署Maven Web项目：--&gt; &lt;!-- 此处需要配置本地环境，tomcat: tomcat_user。xml，添加manager角色和用户，用于插件自动部署应用 --&gt; &lt;!-- 打开Maven： setting.xml，在&lt;servers&gt;节点下配置上面的相关Tomcat的Manager用户信息， --&gt; &lt;!-- 开启下面的插件配置代码段 --&gt; &lt;!-- tomcat7:deploy tomcat7:redeploy tomcat7:undeploy --&gt; &lt;!-- &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt; &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt; &lt;version&gt;2.2&lt;/version&gt; &lt;configuration&gt; &lt;url&gt;http://localhost:8080/manager/text&lt;/url&gt; tomcat管理路径 &lt;server&gt;Tomcat7&lt;/server&gt; 与settings.xml文件中Server的id相同 &lt;path&gt;/web&lt;/path&gt; 应用的部署位置 &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt; --&gt; &lt;/build&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;/properties&gt; &lt;/project&gt;","categories":[{"name":"JavaEE","slug":"JavaEE","permalink":"http://zhouzhuo810.github.io/categories/JavaEE/"},{"name":"SpringMVC","slug":"SpringMVC","permalink":"http://zhouzhuo810.github.io/categories/SpringMVC/"}],"tags":[{"name":"JavaEE","slug":"JavaEE","permalink":"http://zhouzhuo810.github.io/tags/JavaEE/"}]},{"title":"Android疑难杂症-EditText抢占焦点使ScrollView自动滑动问题","slug":"Android疑难杂症-EditText抢占焦点使ScrollView自动滑动问题","date":"2017-07-18T00:40:40.000Z","updated":"2024-06-13T11:58:36.766Z","comments":true,"path":"2017/07/18/Android疑难杂症-EditText抢占焦点使ScrollView自动滑动问题/","permalink":"http://zhouzhuo810.github.io/2017/07/18/Android%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87-EditText%E6%8A%A2%E5%8D%A0%E7%84%A6%E7%82%B9%E4%BD%BFScrollView%E8%87%AA%E5%8A%A8%E6%BB%91%E5%8A%A8%E9%97%AE%E9%A2%98/","excerpt":"","text":"解决方法： 重写ScrollView的这个方法： 1234@Overridepublic boolean requestChildRectangleOnScreen(View child, Rect rectangle, boolean immediate) &#123; return child instanceof EditText;&#125;","categories":[{"name":"Android疑难杂症","slug":"Android疑难杂症","permalink":"http://zhouzhuo810.github.io/categories/Android%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"Swift开源控件-汇总","slug":"Swift开源控件-汇总","date":"2017-06-29T01:34:32.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"2017/06/29/Swift开源控件-汇总/","permalink":"http://zhouzhuo810.github.io/2017/06/29/Swift%E5%BC%80%E6%BA%90%E6%8E%A7%E4%BB%B6-%E6%B1%87%E6%80%BB/","excerpt":"1Github上的实用的Swift开源控件(后续看到再补充) 网络框架Alamofire 图片框架AlamofireImage","text":"1Github上的实用的Swift开源控件(后续看到再补充) 网络框架Alamofire 图片框架AlamofireImage 进度提示SwiftNotice JSON解析SwiftyJSON","categories":[{"name":"Swift开源控件","slug":"Swift开源控件","permalink":"http://zhouzhuo810.github.io/categories/Swift%E5%BC%80%E6%BA%90%E6%8E%A7%E4%BB%B6/"}],"tags":[{"name":"Swift","slug":"Swift","permalink":"http://zhouzhuo810.github.io/tags/Swift/"}]},{"title":"Android自定义控件-CameraCardCrop","slug":"Android自定义控件-CameraCardCrop","date":"2017-06-22T09:31:54.000Z","updated":"2024-06-13T11:58:36.766Z","comments":true,"path":"2017/06/22/Android自定义控件-CameraCardCrop/","permalink":"http://zhouzhuo810.github.io/2017/06/22/Android%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6-CameraCardCrop/","excerpt":"CameraCardCrop一个卡片（证件）拍照裁剪框架。(A cutting framework for card-photo.) Gradle1compile &#x27;me.zhouzhuo810.cameracardcrop:camera-card-crop:1.0.2&#x27;","text":"CameraCardCrop一个卡片（证件）拍照裁剪框架。(A cutting framework for card-photo.) Gradle1compile &#x27;me.zhouzhuo810.cameracardcrop:camera-card-crop:1.0.2&#x27; Screenshot Notice12345678910111213141516171819202122232425262728293031323334card---------------------| width || || |height| |---------------------phone------------------------------------| || || || || || mask || || width || ------------------------ || | | || | height | | screen height| | rect | || | | || ------------------------ || || || || || || screen width |-------------------------------------CameraConfig.RATIO_WIDTH = card&#x27;s widthCameraConfig.RATIO_HEIGHT = card&#x27;s heightCameraConfig.PERCENT_WIDTH = rect&#x27;swidth / screen&#x27;s width Usagestep 1. Add Activity in your AndroidManifest.xml file.1234&lt;activity android:name=&quot;me.zhouzhuo810.cameracardcrop.CropActivity&quot; android:screenOrientation=&quot;portrait&quot; android:theme=&quot;@style/Theme.AppCompat.NoActionBar&quot;&gt;&lt;/activity&gt; step 2. Add permissions in your AndroidManifest.xml file.123456&lt;uses-permission android:name=&quot;android.permission.CAMERA&quot;/&gt;&lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;/&gt;&lt;uses-permission android:name=&quot;android.permission.MOUNT_UNMOUNT_FILESYSTEMS&quot;/&gt;&lt;uses-feature android:name=&quot;android.hardware.camera&quot; /&gt;&lt;uses-feature android:name=&quot;android.hardware.camera.autofocus&quot; /&gt; step 3. Example for use.123456789101112131415161718192021222324public void takePhoto(View v) &#123; Intent intent = new Intent(MainActivity.this, CropActivity.class); intent.putExtra(CameraConfig.RATIO_WIDTH, 855); intent.putExtra(CameraConfig.RATIO_HEIGHT, 541); intent.putExtra(CameraConfig.PERCENT_WIDTH, 0.8f); //[0,1] intent.putExtra(CameraConfig.MASK_COLOR, 0x2f000000); intent.putExtra(CameraConfig.RECT_CORNER_COLOR, 0xff00ff00); intent.putExtra(CameraConfig.TEXT_COLOR, 0xffffffff); intent.putExtra(CameraConfig.HINT_TEXT, &quot;请将方框对准证件拍照&quot;); intent.putExtra(CameraConfig.IMAGE_PATH, Environment.getExternalStorageDirectory().getAbsolutePath()+&quot;/CameraCardCrop/&quot;+System.currentTimeMillis()+&quot;.jpg&quot;); startActivityForResult(intent, 0x01);&#125;@Overrideprotected void onActivityResult(int requestCode, int resultCode, Intent data) &#123; super.onActivityResult(requestCode, resultCode, data); if (resultCode == RESULT_OK) &#123; if (requestCode == 0x01) &#123; String path = data.getStringExtra(CameraConfig.IMAGE_PATH); ivPic.setImageURI(Uri.parse(&quot;file://&quot;+path)); &#125; &#125;&#125;","categories":[{"name":"Android自定义控件","slug":"Android自定义控件","permalink":"http://zhouzhuo810.github.io/categories/Android%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"Android开源控件-MPAndroidChart","slug":"Android开源控件-MPAndroidChart","date":"2017-06-21T10:20:41.000Z","updated":"2024-06-13T11:58:36.766Z","comments":true,"path":"2017/06/21/Android开源控件-MPAndroidChart/","permalink":"http://zhouzhuo810.github.io/2017/06/21/Android%E5%BC%80%E6%BA%90%E6%8E%A7%E4%BB%B6-MPAndroidChart/","excerpt":"概述为什么要写这个小结？ MPAndroidChart文档是英文的，demo没有注释。 为了让以后使用MPAndroidChart更加方便。","text":"概述为什么要写这个小结？ MPAndroidChart文档是英文的，demo没有注释。 为了让以后使用MPAndroidChart更加方便。 MPAndroidChart简介项目地址https://github.com/PhilJay/MPAndroidChart 我用的版本1compile &#x27;com.github.PhilJay:MPAndroidChart:v3.0.2&#x27; 用法总结折线图&#x2F;曲线图(LineChart) 初始化控件 1234567891011121314151617181920212223//是否画背景线weekChart.setDrawGridBackground(false);//是否画边界weekChart.setDrawBorders(false);//是否画标记weekChart.setDrawMarkers(false);//是否画色标weekChart.getLegend().setEnabled(false);//是否显示描述weekChart.getDescription().setEnabled(false);//空数据提示文字weekChart.setNoDataText(getString(R.string.no_data));//横坐标的位置(上，下，或上和下)weekChart.getXAxis().setPosition(XAxis.XAxisPosition.BOTTOM);//是否画横坐标的线(竖线)weekChart.getXAxis().setDrawGridLines(false);//是否画右边的纵坐标weekChart.getAxisRight().setEnabled(false);//是否画左边的纵坐标的线weekChart.getAxisLeft().setDrawGridLines(false);//是否画左边的纵坐标weekChart.getAxisLeft().setDrawLabels(true); 让第一点和最后一点显示全 1234//设置最小X坐标小于0weekChart.getXAxis().setAxisMinimum(-0.5f);//设置最大X坐标大于 (点的数量-0.5)weekChart.getXAxis().setAxisMaximum(week.size()-0.5f); 设置X坐标不跳过或省略 12//设置X坐标个数，以保证X坐标都显示出来weekChart.getXAxis().setLabelCount(week.size()); 数据填充 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950private void updateWeek(final List&lt;GetDefectiveRateResult.DataEntity.WeekEntity&gt; week) &#123; if (week != null &amp;&amp; week.size() &gt; 0) &#123; //设置左右间距 weekChart.getXAxis().setAxisMinimum(-0.5f); weekChart.getXAxis().setAxisMaximum(week.size()-0.5f); //设置X坐标不省略 weekChart.getXAxis().setLabelCount(week.size()); //数据处理 List&lt;Entry&gt; values = new ArrayList&lt;&gt;(); for (int i = 0; i &lt; week.size(); i++) &#123; GetDefectiveRateResult.DataEntity.WeekEntity weekEntity = week.get(i); values.add(new Entry(i, weekEntity.getValue())); &#125; //修改X坐标的值 weekChart.getXAxis().setValueFormatter(new IAxisValueFormatter() &#123; @Override public String getFormattedValue(float value, AxisBase axis) &#123; return week.get((int) value).getName(); &#125; &#125;); LineDataSet lineDataSet = new LineDataSet(values, &quot;周废品率(%)&quot;); //圆圈外圈的半径 lineDataSet.setCircleRadius(4f); //圆圈空心的半径 lineDataSet.setCircleHoleRadius(3f); //圆环的颜色 lineDataSet.setCircleColor(getResources().getColor(R.color.colorBarColor)); //折线或曲线的宽度 lineDataSet.setLineWidth(2f); //线的模式：决定是 折线还是曲线 lineDataSet.setMode(LineDataSet.Mode.CUBIC_BEZIER); //线的颜色 lineDataSet.setColor(getResources().getColor(R.color.colorBarColor)); //线下方是否填充颜色 lineDataSet.setDrawFilled(true); //设置线下方填充的颜色 if (Build.VERSION.SDK_INT &gt;= 18) &#123; lineDataSet.setFillDrawable(getResources().getDrawable(R.drawable.line_one_shape)); &#125; else &#123; lineDataSet.setFillColor(0x4f2F7EDB); &#125; LineData lineData = new LineData(lineDataSet); weekChart.setData(lineData); weekChart.invalidate(); &#125; else &#123; //没数据时清理图表 weekChart.clear(); &#125;&#125; line_one_shape.xml 12345&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:shape=&quot;rectangle&quot;&gt; &lt;gradient android:startColor=&quot;#7f2F7EDB&quot; android:angle=&quot;270&quot; android:endColor=&quot;@android:color/transparent&quot;/&gt;&lt;/shape&gt; 饼状图(PieChart) 初始化控件 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556//空数据提示reasonPieChart.setNoDataText(getString(R.string.no_data));//使用百分比值画图(也就是说按数据的大小比例画图)reasonPieChart.setUsePercentValues(true);//描述reasonPieChart.getDescription().setEnabled(false);//饼状图的位置偏移reasonPieChart.setExtraOffsets(5, 10, 5, 5); //是否可以拖动旋转reasonPieChart.setRotationEnabled(true);//好像是拖动转圈后松手的惯性(0到1,越大越快)reasonPieChart.setDragDecelerationFrictionCoef(0.95f); //是否画中间的文字reasonPieChart.setDrawCenterText(true);//中间的文字reasonPieChart.setCenterText(&quot;原因废品率(%)&quot;); //是否画中间的洞reasonPieChart.setDrawHoleEnabled(true);//中间洞的颜色reasonPieChart.setHoleColor(Color.WHITE);//中间洞外边一小圈的颜色reasonPieChart.setTransparentCircleColor(Color.WHITE);//中间洞外边一小圈的透明度reasonPieChart.setTransparentCircleAlpha(110);//中间洞的半径reasonPieChart.setHoleRadius(48f);//洞外小圈的半径reasonPieChart.setTransparentCircleRadius(51f); //设置旋转的角度reasonPieChart.setRotationAngle(0); //是否画扇形内部的文字reasonPieChart.setDrawEntryLabels(false);//扇形内部文字的颜色reasonPieChart.setEntryLabelColor(Color.BLACK);//扇形内部文字的大小reasonPieChart.setEntryLabelTextSize(7f); //是否启用色标reasonPieChart.getLegend().setEnabled(true);Legend legend = reasonPieChart.getLegend();//色标的方面legend.setOrientation(Legend.LegendOrientation.VERTICAL);//色标的水平位置legend.setHorizontalAlignment(Legend.LegendHorizontalAlignment.RIGHT);//色标的垂直位置legend.setVerticalAlignment(Legend.LegendVerticalAlignment.CENTER);//色标画在图标外面还是里面legend.setDrawInside(false);//色标文字的大小legend.setTextSize(11f); 数据填充 1234567891011121314151617181920212223242526272829303132private void updateReason(final List&lt;GetDefectiveRateResult.DataEntity.ReasonEntity&gt; reason) &#123; if (reason != null &amp;&amp; reason.size() &gt; 0) &#123; List&lt;PieEntry&gt; yVals = new ArrayList&lt;&gt;(); for (int i = 0; i &lt; reason.size(); i++) &#123; GetDefectiveRateResult.DataEntity.ReasonEntity reasonEntity = reason.get(i); //值和名称 PieEntry barEntry = new PieEntry(reasonEntity.getValue(), &quot;[&quot;+reasonEntity.getValue()+&quot;%] &quot;+reasonEntity.getName()); yVals.add(barEntry); &#125; PieDataSet set = new PieDataSet(yVals, &quot;&quot;); ArrayList&lt;Integer&gt; colors = new ArrayList&lt;&gt;(); //扇形的颜色 for (int vordiplomColor : ColorTemplate.VORDIPLOM_COLORS) &#123; colors.add(vordiplomColor); &#125; for (int libertyColor : ColorTemplate.LIBERTY_COLORS) &#123; colors.add(libertyColor); &#125; set.setColors(colors); //数值的的颜色 set.setValueTextColor(Color.BLACK); //分隔线的颜色 set.setValueLineColor(Color.WHITE); PieData barData = new PieData(set); //数值的大小 barData.setValueTextSize(7f); reasonPieChart.setData(barData); reasonPieChart.invalidate(); &#125; else &#123; reasonPieChart.clear(); &#125;&#125; 柱状图(BarChart&#x2F;HorizontalBarChart) 初始化控件 123456789101112131415161718192021222324252627282930313233343536373839//是否画柱子的底色reasonBarChart.setDrawBarShadow(false);//是否画数字在柱子顶部reasonBarChart.setDrawValueAboveBar(true);//是否显示右下角的描述reasonBarChart.getDescription().setEnabled(false);//是否双向指缩放reasonBarChart.setPinchZoom(false);//是否画背景格子reasonBarChart.setDrawGridBackground(false);//是否显示右边的坐标reasonBarChart.getAxisRight().setEnabled(false);//x轴的位置(左边，右边，两边)reasonBarChart.getXAxis().setPosition(XAxis.XAxisPosition.BOTTOM);//是否显示X轴的坐标线reasonBarChart.getXAxis().setDrawGridLines(false);//设置X轴坐标的文字大小reasonBarChart.getXAxis().setTextSize(9f);//设置X轴坐标的旋转角度//reasonBarChart.getXAxis().setLabelRotationAngle(45);//是否显示左边Y轴的坐标线reasonBarChart.getAxisLeft().setDrawGridLines(false);//设置左边Y轴的最小值reasonBarChart.getAxisLeft().setAxisMinimum(0f);//设置左边Y轴的是否显示reasonBarChart.getAxisLeft().setEnabled(false);//色标Legend legend = reasonBarChart.getLegend();legend.setEnabled(false);legend.setOrientation(Legend.LegendOrientation.HORIZONTAL);legend.setHorizontalAlignment(Legend.LegendHorizontalAlignment.RIGHT);legend.setVerticalAlignment(Legend.LegendVerticalAlignment.CENTER);legend.setForm(Legend.LegendForm.SQUARE);legend.setFormSize(9f);legend.setXEntrySpace(4f);legend.setDrawInside(false);legend.setTextSize(11f); X轴坐标转换 123456productBarChart.getXAxis().setValueFormatter(new IAxisValueFormatter() &#123; @Override public String getFormattedValue(float value, AxisBase axis) &#123; return product.get((int) value).getName()+&quot; [&quot;+product.get((int) value).getValue()+&quot;%]&quot;; &#125;&#125;); 填充数据 1234567891011121314151617181920212223242526272829303132333435363738394041424344private void updateProduct(final List&lt;GetDefectiveRateResult.DataEntity.ProductEntity&gt; product) &#123; if (product != null &amp;&amp; product.size() &gt; 0) &#123; //保证X坐标显示全 productBarChart.getXAxis().setLabelCount(product.size()); //调整显示顺序 Collections.reverse(product); //整理数据 List&lt;BarEntry&gt; yVals = new ArrayList&lt;&gt;(); for (int i = 0; i &lt; product.size(); i++) &#123; GetDefectiveRateResult.DataEntity.ProductEntity productEntity = product.get(i); BarEntry barEntry = new BarEntry(i, productEntity.getValue()); yVals.add(barEntry); &#125; //X轴坐标转换 productBarChart.getXAxis().setValueFormatter(new IAxisValueFormatter() &#123; @Override public String getFormattedValue(float value, AxisBase axis) &#123; return product.get((int) value).getName()+&quot; [&quot;+product.get((int) value).getValue()+&quot;%]&quot;; &#125; &#125;); BarDataSet set = new BarDataSet(yVals, &quot;&quot;); //设置柱子颜色 ArrayList&lt;Integer&gt; colors = new ArrayList&lt;&gt;(); for (int joyfulColor : ColorTemplate.JOYFUL_COLORS) &#123; colors.add(joyfulColor); &#125; for (int colorfulColor : ColorTemplate.COLORFUL_COLORS) &#123; colors.add(colorfulColor); &#125; set.setColors(colors); //设置柱子上文字的颜色 set.setValueTextColor(Color.BLACK); //设置柱子上文字的值是否显示 set.setDrawValues(true); BarData barData = new BarData(set); //设置柱子上文字的大小 barData.setValueTextSize(7f); productBarChart.setData(barData); productBarChart.invalidate(); &#125; else &#123; productBarChart.clear(); &#125;&#125; 效果图","categories":[{"name":"Android开源控件","slug":"Android开源控件","permalink":"http://zhouzhuo810.github.io/categories/Android%E5%BC%80%E6%BA%90%E6%8E%A7%E4%BB%B6/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"Android 6.0新特性-动态权限申请","slug":"Android-6-0新特性-动态权限申请","date":"2017-06-14T06:45:32.000Z","updated":"2024-06-13T11:58:36.750Z","comments":true,"path":"2017/06/14/Android-6-0新特性-动态权限申请/","permalink":"http://zhouzhuo810.github.io/2017/06/14/Android-6-0%E6%96%B0%E7%89%B9%E6%80%A7-%E5%8A%A8%E6%80%81%E6%9D%83%E9%99%90%E7%94%B3%E8%AF%B7/","excerpt":"Android 6.0之后，部分权限需要动态申请。但是AndroidManifest.xml文件中同样需要申明。 常见处理方式请求权限1234567891011121314if (Build.VERSION.SDK_INT &gt; 22) &#123; if (ActivityCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) &#123; if (!ActivityCompat.shouldShowRequestPermissionRationale(this, Manifest.permission.WRITE_EXTERNAL_STORAGE)) &#123; Toast.makeText(MainActivity.this, &quot;这里提示用户进入设置界面开启权限&quot;, Toast.LENGTH_SHORT).show(); &#125; else &#123; //Request ActivityCompat.requestPermissions(MainActivity.this, new String[] &#123;Manifest.permission.WRITE_EXTERNAL_STORAGE&#125;, 0x01); &#125; &#125; else &#123; //Allow... &#125; &#125; else &#123; //Allow... &#125;","text":"Android 6.0之后，部分权限需要动态申请。但是AndroidManifest.xml文件中同样需要申明。 常见处理方式请求权限1234567891011121314if (Build.VERSION.SDK_INT &gt; 22) &#123; if (ActivityCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) &#123; if (!ActivityCompat.shouldShowRequestPermissionRationale(this, Manifest.permission.WRITE_EXTERNAL_STORAGE)) &#123; Toast.makeText(MainActivity.this, &quot;这里提示用户进入设置界面开启权限&quot;, Toast.LENGTH_SHORT).show(); &#125; else &#123; //Request ActivityCompat.requestPermissions(MainActivity.this, new String[] &#123;Manifest.permission.WRITE_EXTERNAL_STORAGE&#125;, 0x01); &#125; &#125; else &#123; //Allow... &#125; &#125; else &#123; //Allow... &#125; Activity必须implements ActivityCompat.OnRequestPermissionsResultCallback处理请求结果123456789101112131415@Overridepublic void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) &#123; super.onRequestPermissionsResult(requestCode, permissions, grantResults); if (requestCode == 0x01) &#123; if (grantResults.length &gt; 0) &#123; if (grantResults[0] == PackageManager.PERMISSION_GRANTED) &#123; Toast.makeText(MainActivity.this, &quot;Allow&quot;, Toast.LENGTH_SHORT).show(); //allow... &#125; else &#123; Toast.makeText(MainActivity.this, &quot;Deny&quot;, Toast.LENGTH_SHORT).show(); //deny... &#125; &#125; &#125;&#125; 使用RxPermission(推荐)查看Github 使用AndPermission查看Github","categories":[{"name":"Android版本特性","slug":"Android版本特性","permalink":"http://zhouzhuo810.github.io/categories/Android%E7%89%88%E6%9C%AC%E7%89%B9%E6%80%A7/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"Android 7.0新特性-FileUriExposedException","slug":"Android-7-0新特性-FileUriExposedException","date":"2017-06-14T05:30:53.000Z","updated":"2024-06-13T11:58:36.750Z","comments":true,"path":"2017/06/14/Android-7-0新特性-FileUriExposedException/","permalink":"http://zhouzhuo810.github.io/2017/06/14/Android-7-0%E6%96%B0%E7%89%B9%E6%80%A7-FileUriExposedException/","excerpt":"下面两个问题都是同一个错误FileUriExposedException。 问题1：App更新最近有客户反应App自动更新安装失败。查看原因报的是FileUriExposedException错误。 查看官网API找到了解决之法。","text":"下面两个问题都是同一个错误FileUriExposedException。 问题1：App更新最近有客户反应App自动更新安装失败。查看原因报的是FileUriExposedException错误。 查看官网API找到了解决之法。 新建res&#x2F;xml&#x2F;provider_paths.xml文件1234567891011&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;paths xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt; &lt;external-path name=&quot;external_files&quot; path=&quot;.&quot; /&gt; &lt;root-path name=&quot;root_path&quot; path=&quot;.&quot; /&gt; &lt;/paths&gt; 在AndroidManifest.xml中添加provider123456789&lt;provider android:name=&quot;android.support.v4.content.FileProvider&quot; android:authorities=&quot;您的包名.provider&quot; android:exported=&quot;false&quot; android:grantUriPermissions=&quot;true&quot;&gt; &lt;meta-data android:name=&quot;android.support.FILE_PROVIDER_PATHS&quot; android:resource=&quot;@xml/provider_paths&quot;/&gt;&lt;/provider&gt; 修改Uri的获取方式123456789101112131415161718private void installApk(String fileName) &#123; Intent intent = new Intent(Intent.ACTION_VIEW); if (Build.VERSION.SDK_INT &gt; 23) &#123; //FIX ME by ZZ : 7.0 Uri uri = FileProvider.getUriForFile(MainActivity.this, BuildConfig.APPLICATION_ID+&quot;.provider&quot;, new File(Constants.APK_DOWNLOAD_DIR + File.separator + fileName)); //这flag很关键 intent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION|Intent.FLAG_GRANT_WRITE_URI_PERMISSION); intent.setDataAndType(uri, &quot;application/vnd.android.package-archive&quot;); intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); this.startActivity(intent); &#125; else &#123; intent.setDataAndType(Uri.fromFile(new File(Constants.APK_DOWNLOAD_DIR + File.separator + fileName)), &quot;application/vnd.android.package-archive&quot;); intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); this.startActivity(intent); &#125;&#125; 问题2：调用系统相机拍照解决方式1（1）前两个步骤同上 （2） 123456789101112131415161718private void takePhoto() &#123; File file = new File(PATH); if (!file.isDirectory()) &#123; file.mkdirs(); &#125; Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE); Uri uri; if (Build.VERSION.SDK_INT &gt; 23) &#123; uri = FileProvider.getUriForFile(MainActivity.this, BuildConfig.APPLICATION_ID+&quot;.provider&quot;, new File(PATH+NAME)); intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION|Intent.FLAG_GRANT_WRITE_URI_PERMISSION); &#125; else &#123; uri = Uri.fromFile(new File(PATH+NAME)); &#125; intent.putExtra(MediaStore.EXTRA_OUTPUT, uri); startActivityForResult(intent, 0x01);&#125; 注意别漏了这句: 1intent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION|Intent.FLAG_GRANT_WRITE_URI_PERMISSION); 解决方式21234567891011121314151617181920212223private void takePhoto() &#123; final File file = new File(Constants.PIC_UPLOAD_ROOT_PATH); if (!file.isDirectory()) &#123; file.mkdirs(); &#125; Intent cameraIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);//构造intent Uri uri; String pathOne = Constants.PIC_UPLOAD_ROOT_PATH + System.currentTimeMillis() + &quot;.jpg&quot;; AbSharedUtil.putString(this, Constants.PUT_FILE_ONE, pathOne); final File fileOne = new File(pathOne); if (Build.VERSION.SDK_INT&lt;24)&#123; uri = Uri.fromFile(fileOne); &#125;else &#123; ContentValues contentValues = new ContentValues(1); contentValues.put(MediaStore.Images.Media.DATA, fileOne.getAbsolutePath()); uri = getContentResolver().insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,contentValues); &#125; if (fileOne.exists()) &#123; fileOne.delete(); &#125; cameraIntent.putExtra(MediaStore.EXTRA_OUTPUT, uri); startActivityForResult(cameraIntent, CAMERA_REQUEST_ONE);//发出intent，并要求返回调用结果&#125;","categories":[{"name":"Android版本特性","slug":"Android版本特性","permalink":"http://zhouzhuo810.github.io/categories/Android%E7%89%88%E6%9C%AC%E7%89%B9%E6%80%A7/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"Android自定义控件-ZzExcelCreator","slug":"Android自定义控件-ZzExcelCreator","date":"2017-06-14T05:12:18.000Z","updated":"2024-06-13T11:58:36.766Z","comments":true,"path":"2017/06/14/Android自定义控件-ZzExcelCreator/","permalink":"http://zhouzhuo810.github.io/2017/06/14/Android%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6-ZzExcelCreator/","excerpt":"ZzExcelCreatorExcel表格生成工具 项目地址:https://github.com/zhouzhuo810/ZzExcelCreator（欢迎star!）","text":"ZzExcelCreatorExcel表格生成工具 项目地址:https://github.com/zhouzhuo810/ZzExcelCreator（欢迎star!） 效果图： 最近做项目用到jxl.jar来生成Excel表格； 但是发现jxl源码都没有注释的，方法也没有说明，虽然最后在网上找到了对应的方法。 不过这不是我的style，果断自己封装一下，添加注释。 下面介绍一下用法： Gradle：1compile &#x27;me.zhouzhuo.zzexcelcreator:zz-excel-creator:1.0.0&#x27; 创建Excel文件和工作表12345ZzExcelCreator .getInstance() .createExcel(PATH, params[0]) //生成excel文件 .createSheet(params[1]) //生成sheet工作表 .close(); 打开Excel文件和工作表123456ZzExcelCreator .getInstance() .openExcel(new File(PATH + fileName + &quot;.xls&quot;)) //打开Excel文件 .openSheet(0) //打开Sheet工作表 ... ... .close(); 设置单元格内容格式：12345678//设置单元格内容格式WritableCellFormat format = ZzFormatCreator .getInstance() .createCellFont(WritableFont.ARIAL) //设置字体 .setAlignment(Alignment.CENTRE, VerticalAlignment.CENTRE) //设置对齐方式(水平和垂直) .setFontSize(14) //设置字体大小 .setFontColor(Colour.ROSE) //设置字体颜色 .getCellFormat(); 设置行高、列宽和写入字符串或数字123456789ZzExcelCreator .getInstance() .openExcel(new File(PATH + fileName + &quot;.xls&quot;)) .openSheet(0) .setColumnWidth(Integer.parseInt(col), 25) //设置列宽 .setRowHeight(Integer.parseInt(row), 400) //设置行高 .fillContent(Integer.parseInt(col), Integer.parseInt(row), str, format) //填入字符串 .fillNumber(Integer.parseInt(col), Integer.parseInt(row), Double.parseDouble(str), format) //填入数字 .close(); 最后就是，这些操作最好在子线程操作。","categories":[{"name":"Android自定义控件","slug":"Android自定义控件","permalink":"http://zhouzhuo810.github.io/categories/Android%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"Android自定义控件-ZzImageBox","slug":"Android自定义控件-ZzImageBox","date":"2017-06-14T02:43:05.000Z","updated":"2024-06-13T11:58:36.766Z","comments":true,"path":"2017/06/14/Android自定义控件-ZzImageBox/","permalink":"http://zhouzhuo810.github.io/2017/06/14/Android%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6-ZzImageBox/","excerpt":"ZzImageBoxA powerful image container for adding and removing images. 功能简介：1.支持添加、删除、默认图片的配置； 2.支持最大行数限制； 3.支持每行数量修改； 4.支持添加、删除、图片点击回调接口。 5.支持Box的添加(.addImage(String imagePath))和删除(.removeImage(int position))； 6.支持加载本地图片(使用方法.addImage(String imagePath))； 7.支持左右margin设置。 Gradle1compile &#x27;me.zhouzhuo.zzimagebox:zz-image-box:1.0.4&#x27;","text":"ZzImageBoxA powerful image container for adding and removing images. 功能简介：1.支持添加、删除、默认图片的配置； 2.支持最大行数限制； 3.支持每行数量修改； 4.支持添加、删除、图片点击回调接口。 5.支持Box的添加(.addImage(String imagePath))和删除(.removeImage(int position))； 6.支持加载本地图片(使用方法.addImage(String imagePath))； 7.支持左右margin设置。 Gradle1compile &#x27;me.zhouzhuo.zzimagebox:zz-image-box:1.0.4&#x27; Maven123456&lt;dependency&gt; &lt;groupId&gt;me.zhouzhuo.zzimagebox&lt;/groupId&gt; &lt;artifactId&gt;zz-image-box&lt;/artifactId&gt; &lt;version&gt;1.0.4&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt;&lt;/dependency&gt; What does it look like? How to use it ?xml: 1234567891011121314&lt;me.zhouzhuo.zzimagebox.ZzImageBox android:id=&quot;@+id/zz_image_box&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; app:zib_left_margin=&quot;20dp&quot; app:zib_right_margin=&quot;20dp&quot; app:zib_img_padding=&quot;5dp&quot; app:zib_img_size_one_line=&quot;4&quot; app:zib_max_line=&quot;3&quot; app:zib_img_deletable=&quot;true&quot; app:zib_img_add=&quot;@drawable/iv_add&quot; app:zib_img_default=&quot;@drawable/iv_default&quot; app:zib_img_delete=&quot;@drawable/iv_delete&quot; /&gt; java: 123456789101112131415161718192021final ZzImageBox imageBox = (ZzImageBox) findViewById(R.id.zz_image_box);imageBox.setOnImageClickListener(new ZzImageBox.OnImageClickListener() &#123; @Override public void onImageClick(int position, String filePath) &#123; Log.d(&quot;ZzImageBox&quot;, &quot;image clicked:&quot; + position + &quot;,&quot; + filePath); &#125; @Override public void onDeleteClick(int position, String filePath) &#123; imageBox.removeImage(position); Log.d(&quot;ZzImageBox&quot;, &quot;delete clicked:&quot; + position + &quot;,&quot; + filePath); Log.d(&quot;ZzImageBox&quot;, &quot;all images\\n&quot;+imageBox.getAllImages().toString()); &#125; @Override public void onAddClick() &#123; imageBox.addImage(null); Log.d(&quot;ZzImageBox&quot;, &quot;add clicked&quot;); Log.d(&quot;ZzImageBox&quot;, &quot;all images\\n&quot;+imageBox.getAllImages().toString()); &#125;&#125;); 属性说明：1234567891011&lt;declare-styleable name=&quot;ZzImageBox&quot;&gt; &lt;attr name=&quot;zib_max_line&quot; format=&quot;integer&quot; /&gt; &lt;attr name=&quot;zib_img_size_one_line&quot; format=&quot;integer&quot; /&gt; &lt;attr name=&quot;zib_img_padding&quot; format=&quot;dimension|reference&quot; /&gt; &lt;attr name=&quot;zib_img_default&quot; format=&quot;color|reference&quot; /&gt; &lt;attr name=&quot;zib_img_delete&quot; format=&quot;color|reference&quot; /&gt; &lt;attr name=&quot;zib_img_add&quot; format=&quot;color|reference&quot; /&gt; &lt;attr name=&quot;zib_img_deletable&quot; format=&quot;boolean&quot; /&gt; &lt;attr name=&quot;zib_left_margin&quot; format=&quot;dimension|reference&quot; /&gt; &lt;attr name=&quot;zib_right_margin&quot; format=&quot;dimension|reference&quot; /&gt;&lt;/declare-styleable&gt; 属性名 属性类型 属性功能 zib_max_line integer 最大行数 zib_img_size_one_line integer 每行数量 zib_img_padding dimension 图片之间的间距 zib_img_default drawable color zib_img_delete drawable color zib_img_add drawable color zib_img_deletable boolean 是否显示删除图片 zib_left_margin dimension 控件距离屏幕左边距离 zib_right_margin dimension 控件距离屏幕右边距离","categories":[{"name":"Android自定义控件","slug":"Android自定义控件","permalink":"http://zhouzhuo810.github.io/categories/Android%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"Android自定义控件-ZzWeatherView","slug":"Android自定义控件-ZzWeatherView","date":"2017-06-14T01:33:02.000Z","updated":"2024-06-13T11:58:36.766Z","comments":true,"path":"2017/06/14/Android自定义控件-ZzWeatherView/","permalink":"http://zhouzhuo810.github.io/2017/06/14/Android%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6-ZzWeatherView/","excerpt":"ZzWeatherView一个现实天气的控件 Gradle1compile &#x27;me.zhouzhuo.zzweatherview:zz-weather-view:1.0.2&#x27;","text":"ZzWeatherView一个现实天气的控件 Gradle1compile &#x27;me.zhouzhuo.zzweatherview:zz-weather-view:1.0.2&#x27; 效果图如下： 用法简介1）布局 drawable&#x2F;scroll_bar_thumb.xml123456&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt; &lt;gradient android:startColor=&quot;#33999999&quot; android:endColor=&quot;#80aaaaaa&quot; android:angle=&quot;0&quot;/&gt; &lt;corners android:radius=&quot;6dp&quot; /&gt;&lt;/shape&gt; 12345678910&lt;me.zhouzhuo.zzweatherview.ZzWeatherView android:id=&quot;@+id/weather_view&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:scrollbarThumbHorizontal=&quot;@drawable/scroll_bar_thumb&quot; android:scrollbarTrackHorizontal=&quot;@drawable/scroll_bar_thumb&quot; android:scrollbarSize=&quot;4dp&quot; android:background=&quot;#333&quot; &gt;&lt;/me.zhouzhuo.zzweatherview.ZzWeatherView&gt; 2）java 1234567891011121314151617181920212223242526272829303132ZzWeatherView weatherView = (ZzWeatherView) findViewById(R.id.weather_view); //填充天气数据weatherView.setList(generateData()); //画折线weatherView.setLineType(ZzWeatherView.LINE_TYPE_DISCOUNT);//画曲线(不够圆滑希望有更好的建议联系我(Email:admin@zhouzhuo810.me))//weatherView.setLineType(ZzWeatherView.LINE_TYPE_CURVE); //设置线宽weatherView.setLineWidth(6f); //设置一屏幕显示几列(最少3列)try &#123; weatherView.setColumnNumber(5);&#125; catch (Exception e) &#123; e.printStackTrace();&#125; //设置白天和晚上线条的颜色weatherView.setDayAndNightLineColor(Color.BLUE, Color.RED); //点击某一列weatherView.setOnWeatherItemClickListener(new ZzWeatherView.OnWeatherItemClickListener() &#123; @Override public void onItemClick(WeatherItemView itemView, int position, WeatherModel weatherModel) &#123; Toast.makeText(MainActivity.this, position+&quot;&quot;, Toast.LENGTH_SHORT).show(); &#125;&#125;); 1234567891011 //数据源 WeatherModel model = new WeatherModel(); model.setDate(&quot;12/07&quot;);//日期 model.setWeek(&quot;昨天&quot;); //星期 model.setDayWeather(&quot;大雪&quot;); //白天天气 model.setDayTemp(11); //白天温度 model.setNightTemp(5); //夜晚温度 model.setNightWeather(&quot;晴&quot;); //夜晚天气 model.setWindOrientation(&quot;西南风&quot;); //风向 model.setWindLevel(&quot;3级&quot;); // model.setAirLevel(AirLevel.EXCELLENT); //空气质量 更新日志v 1.0.2 添加设置曲线颜色方法； 添加设置列的数量方法； v 1.0.1 修复曲线不圆滑问题；","categories":[{"name":"Android自定义控件","slug":"Android自定义控件","permalink":"http://zhouzhuo810.github.io/categories/Android%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"Android疑难杂症-自定义ViewGroup添加TextView的Gravity失效","slug":"Android疑难杂症-自定义ViewGroup添加TextView的Gravity失效","date":"2017-06-13T06:34:39.000Z","updated":"2024-06-13T11:58:36.766Z","comments":true,"path":"2017/06/13/Android疑难杂症-自定义ViewGroup添加TextView的Gravity失效/","permalink":"http://zhouzhuo810.github.io/2017/06/13/Android%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87-%E8%87%AA%E5%AE%9A%E4%B9%89ViewGroup%E6%B7%BB%E5%8A%A0TextView%E7%9A%84Gravity%E5%A4%B1%E6%95%88/","excerpt":"","text":"解决方法： 在addView()之前 添加如下代码 12mTextView.measure(View.MeasureSpec.makeMeasureSpec(mWidth, View.MeasureSpec.EXACTLY), View.MeasureSpec.makeMeasureSpec(mHeight, View.MeasureSpec.EXACTLY));","categories":[{"name":"Android疑难杂症","slug":"Android疑难杂症","permalink":"http://zhouzhuo810.github.io/categories/Android%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"}]},{"title":"iOS-pod的安装和使用","slug":"IOS-pod的安装和使用","date":"2017-06-08T07:49:56.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"2017/06/08/IOS-pod的安装和使用/","permalink":"http://zhouzhuo810.github.io/2017/06/08/IOS-pod%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/","excerpt":"使用pod可以很方便的集成第三方框架。 安装1sudo gem install cocoapods 输入密码 等待即可。 完成标识如下： 1xx gems installed","text":"使用pod可以很方便的集成第三方框架。 安装1sudo gem install cocoapods 输入密码 等待即可。 完成标识如下： 1xx gems installed 验证安装是否成功1pod --help 切换目录切换到目标工程文件夹 1cd xxx 1pod init 1ls -al 会发现多了一个Podfile文件 编辑Podfile文件1vi Podfile 点击i进入编辑模式 移动光标，在需要的位置添加内容下面以SDWebImage为例： 123platform :ios, &#x27;8.0&#x27;pod &#x27;SDWebImage&#x27;, &#x27;~&gt;3.8&#x27;use_frameworks! 点击esc 点击shift+； 输入wq，回车 安装包先关闭xcode 1pod install 注意会发现多了一个workspace的工程 如果以后要用集成了POD的工程的话就要用workspace的工程。 打开工程使用这个。","categories":[{"name":"iOS","slug":"iOS","permalink":"http://zhouzhuo810.github.io/categories/iOS/"}],"tags":[{"name":"iOS","slug":"iOS","permalink":"http://zhouzhuo810.github.io/tags/iOS/"}]},{"title":"ACM-单词拼接问题","slug":"ACM-单词拼接问题","date":"2017-06-08T02:37:50.000Z","updated":"2024-06-13T11:58:36.750Z","comments":true,"path":"2017/06/08/ACM-单词拼接问题/","permalink":"http://zhouzhuo810.github.io/2017/06/08/ACM-%E5%8D%95%E8%AF%8D%E6%8B%BC%E6%8E%A5%E9%97%AE%E9%A2%98/","excerpt":"描述 给你一些单词，请你判断能否把它们首尾串起来串成一串。 前一个单词的结尾应该与下一个单词的道字母相同。 输入 第一行是一个整数N(0&lt;N&lt;20)，表示测试数据的组数每组测试数据的第一行是一个整数M,表示该组测试数据中有M(2&lt;M&lt;1000)个互不相同的单词，随后的M行，每行是一个长度不超过30的单词,单词全部由小写字母组成。 输出 如果存在拼接方案，请输出所有拼接方案中字典序最小的方案。(两个单词之间输出一个英文句号”.”)如果不存在拼接方案，则输出 1*** 样例输入 12345678910111226alohaarachniddoggopherrattiger3oakmapleelm 样例输出 12aloha.arachnid.dog.gopher.rat.tiger***","text":"描述 给你一些单词，请你判断能否把它们首尾串起来串成一串。 前一个单词的结尾应该与下一个单词的道字母相同。 输入 第一行是一个整数N(0&lt;N&lt;20)，表示测试数据的组数每组测试数据的第一行是一个整数M,表示该组测试数据中有M(2&lt;M&lt;1000)个互不相同的单词，随后的M行，每行是一个长度不超过30的单词,单词全部由小写字母组成。 输出 如果存在拼接方案，请输出所有拼接方案中字典序最小的方案。(两个单词之间输出一个英文句号”.”)如果不存在拼接方案，则输出 1*** 样例输入 12345678910111226alohaarachniddoggopherrattiger3oakmapleelm 样例输出 12aloha.arachnid.dog.gopher.rat.tiger*** 参考答案Java版123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147import java.util.PriorityQueue;import java.util.Queue;import java.util.Scanner;import java.util.Stack;//欧拉通路(路径) 只有一个点的入度比出度小一, 一个点的出度比入度大一 其余点的入度与出度相等//欧拉回路 所有点的入度与出度相等//并查集判断连通性 只有一个点的父节点是他本身//消圈算法遍历结果 class Node &#123; Queue&lt;String&gt; queue = new PriorityQueue&lt;String&gt;();// 首字母相同的单词可能有多个&#125; public class Main &#123; public static final int LEN = 26; private int start; private int[] father, num, inDegree, outDegree; private Node[] nodes; public static void main(String[] args) &#123; Scanner sc = new Scanner(System.in); int t, n; Main main; String str; Node[] nodes = new Node[LEN]; for (int i = 0; i &lt; LEN; i++) &#123; nodes[i] = new Node(); &#125; t = sc.nextInt(); while (t-- != 0) &#123; n = sc.nextInt(); for (int i = 0; i &lt; n; i++) &#123; str = sc.next(); nodes[str.charAt(0) - &#x27;a&#x27;].queue.add(str);// 单词首字母 &#125; main = new Main(nodes); main.execute(); for (int i = 0; i &lt; LEN; i++) &#123; nodes[i].queue.clear(); &#125; &#125; sc.close(); &#125; public Main(Node[] nodes) &#123; this.nodes = nodes; father = new int[LEN]; num = new int[LEN]; inDegree = new int[LEN]; outDegree = new int[LEN]; for (int i = 0; i &lt; LEN; i++) &#123; father[i] = i; num[i] = 1; &#125; for (int i = 0, start, end; i &lt; LEN; i++) &#123; for (String str : nodes[i].queue) &#123; start = str.charAt(0) - &#x27;a&#x27;;// 单词首 end = str.charAt(str.length() - 1) - &#x27;a&#x27;;// 单词尾 inDegree[end]++; outDegree[start]++; start = find(start); end = find(end); if (start != end) &#123; union(start, end); &#125; &#125; &#125; &#125; private int find(int i) &#123; return i == father[i] ? i : find(father[i]); &#125; private void union(int i, int j) &#123; father[i] = j; &#125; private boolean isEularRoute() &#123; start = -1; int count = 0; boolean find = false; for (int i = 0; i &lt; LEN; i++) &#123; if (inDegree[i] != outDegree[i]) &#123; if (Math.abs(inDegree[i] - outDegree[i]) != 1) return false; if (!find &amp;&amp; inDegree[i] &lt; outDegree[i]) &#123; find = true; start = i; &#125; if (++count &gt; 2) return false; &#125; else if (outDegree[i] &gt; 0 &amp;&amp; start == -1) &#123; start = i; &#125; &#125; return true; &#125; private boolean isConnected() &#123; for (int i = 0, count = 0; i &lt; LEN; i++) &#123; if (outDegree[i] &gt; 0 &amp;&amp; father[i] == i) &#123; if (++count &gt; 1) &#123; return false; &#125; &#125; &#125; return true; &#125; private void printResult(int i) &#123; dfs(i); if (!stack.isEmpty()) System.out.print(stack.pop()); while (!stack.isEmpty()) &#123; System.out.print(&quot;.&quot; + stack.pop()); &#125; System.out.println(); &#125; Stack&lt;String&gt; stack = new Stack&lt;String&gt;(); private void dfs(int i) &#123; while (!nodes[i].queue.isEmpty()) &#123; String str = nodes[i].queue.poll(); dfs(str.charAt(str.length() - 1) - &#x27;a&#x27;); stack.push(str); &#125; &#125; public void execute() &#123; if (!isConnected() || !isEularRoute()) &#123; System.out.println(&quot;***&quot;); return; &#125; printResult(start); &#125;&#125; /** * 欧拉回路:若图G中存在这样一条路径，使得它恰通过G中每条边一次，则称该路径为欧拉路径。若该路径是一个圈， 则成为欧拉回路。 * 具有欧拉回路的图成为欧拉图，具有欧拉路径但不具有欧拉回路的图成为半欧拉图。 1.无向连通图G是欧拉图，当且仅当G不含奇数度结点(G的所有结点度数为偶数)； * 2.无向连通图G含有欧拉通路，当且仅当G有零个或两个奇数度的结点； 3.有向连通图D是欧拉图，当且仅当该图为连通图且D中每个结点的入度=出度 * 4.有向连通图D含有欧拉通路，当且仅当该图为连通图且D中除两个结点外， 其余每个结点的入度=出度，且此两点满足deg－(u)－deg+(v)=±1。 * （起始点s的入度=出度-1，结束点t的出度=入度-1 或两个点的入度=出度） * * 连通图：若图中任意两点都是连通的，则该图是连通图。 */","categories":[{"name":"ACM","slug":"ACM","permalink":"http://zhouzhuo810.github.io/categories/ACM/"}],"tags":[{"name":"ACM","slug":"ACM","permalink":"http://zhouzhuo810.github.io/tags/ACM/"}]},{"title":"ACM-(复杂排序问题)","slug":"ACM-复杂排序问题","date":"2017-06-07T08:36:38.000Z","updated":"2024-06-13T11:58:36.750Z","comments":true,"path":"2017/06/07/ACM-复杂排序问题/","permalink":"http://zhouzhuo810.github.io/2017/06/07/ACM-%E5%A4%8D%E6%9D%82%E6%8E%92%E5%BA%8F%E9%97%AE%E9%A2%98/","excerpt":"描述 现在有很多长方形，每一个长方形都有一个编号，这个编号可以重复；还知道这个长方形的宽和长，编号、长、宽都是整数；现在要求按照一下方式排序（默认排序规则都是从小到大）； 1.按照编号从小到大排序 2.对于编号相等的长方形，按照长方形的长排序； 3.如果编号和长都相同，按照长方形的宽排序； 4.如果编号、长、宽都相同，就只保留一个长方形用于排序,删除多余的长方形；最后排好序按照指定格式显示所有的长方形； 输入 第一行有一个整数 0&lt;n&lt;10000,表示接下来有n组测试数据；每一组第一行有一个整数 0&lt;m&lt;1000，表示有m个长方形；接下来的m行，每一行有三个数 ，第一个数表示长方形的编号， 第二个和第三个数值大的表示长，数值小的表示宽，相等说明这是一个正方形（数据约定长宽与编号都小于10000）； 输出 顺序输出每组数据的所有符合条件的长方形的 编号 长 宽 样例输入 12345678910181 1 11 1 11 1 21 2 11 2 22 1 12 1 22 2 1 样例输出 123451 1 11 2 11 2 22 1 12 2 1","text":"描述 现在有很多长方形，每一个长方形都有一个编号，这个编号可以重复；还知道这个长方形的宽和长，编号、长、宽都是整数；现在要求按照一下方式排序（默认排序规则都是从小到大）； 1.按照编号从小到大排序 2.对于编号相等的长方形，按照长方形的长排序； 3.如果编号和长都相同，按照长方形的宽排序； 4.如果编号、长、宽都相同，就只保留一个长方形用于排序,删除多余的长方形；最后排好序按照指定格式显示所有的长方形； 输入 第一行有一个整数 0&lt;n&lt;10000,表示接下来有n组测试数据；每一组第一行有一个整数 0&lt;m&lt;1000，表示有m个长方形；接下来的m行，每一行有三个数 ，第一个数表示长方形的编号， 第二个和第三个数值大的表示长，数值小的表示宽，相等说明这是一个正方形（数据约定长宽与编号都小于10000）； 输出 顺序输出每组数据的所有符合条件的长方形的 编号 长 宽 样例输入 12345678910181 1 11 1 11 1 21 2 11 2 22 1 12 1 22 2 1 样例输出 123451 1 11 2 11 2 22 1 12 2 1 参考答案Java版12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970import java.io.*;import java.util.*;public class Main &#123; public static void main(String[] args) &#123; Scanner sc = new Scanner(System.in); int n = sc.nextInt(); StringBuilder result = new StringBuilder(); for (int i=0; i&lt;n; i++) &#123; List&lt;Rect&gt; list = new ArrayList&lt;Rect&gt;(); int m = sc.nextInt(); for (int j=0; j&lt;m; j++) &#123; int no = sc.nextInt(); int a = sc.nextInt(); int b = sc.nextInt(); Rect r = new Rect(no, a&gt;b?a:b, a&lt;b?a:b); if (!isExist(list,r)) &#123; list.add(r); &#125; &#125; Collections.sort(list, new Comparator&lt;Rect&gt;()&#123; @Override public int compare(Rect r1, Rect r2) &#123; if (r1.no != r2.no) &#123; return r1.no &gt; r2.no ? 1 : -1; &#125; else &#123; if (r1.a != r2.a) &#123; return r1.a &gt; r2.a ? 1: -1; &#125; else &#123; return r1.b &gt; r2.b ? 1 : -1; &#125; else &#123; return 0; &#125; &#125; &#125; &#125;); for(int j=0 ; j&lt;list.size(); j++) &#123; result.append(list.get(j).toString()).append(&quot;\\n&quot;); &#125; &#125; System.out.println(result.toString()); &#125; public static boolean isExist(List&lt;Rect&gt; list, Rect r) &#123; for (int i=0; i&lt;list.size(); i++) &#123; Rect r1 = list.get(i); if (r1.no == r.no &amp;&amp; r1.a==r.a &amp;&amp; r1.b == r.b) &#123; return true; &#125; &#125; return false; &#125; public static class Rect &#123; public int no; public int a; public int b; public Rect(int no, int a, int b) &#123; this.no = no; this.a = a; this.b = b; &#125; public String toString() &#123; return no + &quot; &quot; + a +&quot; &quot; + b ; &#125; &#125;&#125;","categories":[{"name":"ACM","slug":"ACM","permalink":"http://zhouzhuo810.github.io/categories/ACM/"}],"tags":[{"name":"ACM","slug":"ACM","permalink":"http://zhouzhuo810.github.io/tags/ACM/"}]},{"title":"ACM-(奇偶分离问题)","slug":"ACM-奇偶分离问题","date":"2017-06-07T07:46:07.000Z","updated":"2024-06-13T11:58:36.750Z","comments":true,"path":"2017/06/07/ACM-奇偶分离问题/","permalink":"http://zhouzhuo810.github.io/2017/06/07/ACM-%E5%A5%87%E5%81%B6%E5%88%86%E7%A6%BB%E9%97%AE%E9%A2%98/","excerpt":"描述 有一个整型偶数n(2&lt;&#x3D; n &lt;&#x3D;10000),你要做的是：先把1到n中的所有奇数从小到大输出，再把所有的偶数从小到大输出。 输入 第一行有一个整数i（2&lt;&#x3D;i&lt;30)表示有 i 组测试数据；每组有一个整型偶数n。 输出 第一行输出所有的奇数第二行输出所有的偶数 样例输入 12321014 样例输出 123451 3 5 7 9 2 4 6 8 10 1 3 5 7 9 11 13 2 4 6 8 10 12 14","text":"描述 有一个整型偶数n(2&lt;&#x3D; n &lt;&#x3D;10000),你要做的是：先把1到n中的所有奇数从小到大输出，再把所有的偶数从小到大输出。 输入 第一行有一个整数i（2&lt;&#x3D;i&lt;30)表示有 i 组测试数据；每组有一个整型偶数n。 输出 第一行输出所有的奇数第二行输出所有的偶数 样例输入 12321014 样例输出 123451 3 5 7 9 2 4 6 8 10 1 3 5 7 9 11 13 2 4 6 8 10 12 14 参考答案Java版123456789101112131415161718192021222324252627282930import java.io.*;import java.util.*;public class Main &#123; public static void main(String[] args) &#123; Scanner sc = new Scanner(System.in); int count = sc.nextInt(); String[] result = new String[count]; for(int i=0; i&lt;count; i++) &#123; int n = sc.nextInt(); StringBuilder sbj = new StringBuilder(); StringBuilder sbo = new StringBuilder(); for (int j=1; j&lt;=n; j++) &#123; if (isOval(j)) &#123; sbo.append(j).append(&quot; &quot;); &#125; else &#123; sbj.append(j).append(&quot; &quot;); &#125; &#125; result[i] = sbj.toString()+&quot;\\n&quot;+sbo.toString(); &#125; for (int i=0; i&lt;count; i++) &#123; System.out.println(result[i]); &#125; &#125; public static boolean isOval(int i) &#123; return i%2==0; &#125;&#125;","categories":[{"name":"ACM","slug":"ACM","permalink":"http://zhouzhuo810.github.io/categories/ACM/"}],"tags":[{"name":"ACM","slug":"ACM","permalink":"http://zhouzhuo810.github.io/tags/ACM/"}]},{"title":"ACM-(素数求和问题)","slug":"ACM-素数求和问题","date":"2017-06-07T07:20:35.000Z","updated":"2024-06-13T11:58:36.750Z","comments":true,"path":"2017/06/07/ACM-素数求和问题/","permalink":"http://zhouzhuo810.github.io/2017/06/07/ACM-%E7%B4%A0%E6%95%B0%E6%B1%82%E5%92%8C%E9%97%AE%E9%A2%98/","excerpt":"描述 现在给你N个数（0&lt;N&lt;1000），现在要求你写出一个程序，找出这N个数中的所有素数，并求和。 输入 第一行给出整数M(0&lt;M&lt;10)代表多少组测试数据每组测试数据第一行给你N，代表该组测试数据的数量。接下来的N个数为要测试的数据，每个数小于1000 输出 每组测试数据结果占一行，输出给出的测试数据的所有素数和 样例输入 1234567351 2 3 4 5811 12 13 14 15 16 17 181021 22 23 24 25 26 27 28 29 30 样例输出 123104152","text":"描述 现在给你N个数（0&lt;N&lt;1000），现在要求你写出一个程序，找出这N个数中的所有素数，并求和。 输入 第一行给出整数M(0&lt;M&lt;10)代表多少组测试数据每组测试数据第一行给你N，代表该组测试数据的数量。接下来的N个数为要测试的数据，每个数小于1000 输出 每组测试数据结果占一行，输出给出的测试数据的所有素数和 样例输入 1234567351 2 3 4 5811 12 13 14 15 16 17 181021 22 23 24 25 26 27 28 29 30 样例输出 123104152 参考答案Java版1234567891011121314151617181920212223242526272829303132333435363738import java.io.*;import java.util.*;public class Main &#123; public static void main(String[] args) &#123; Scanner sc = new Scanner(System.in); int zu = sc.nextInt(); int[] sum = new int[zu]; for(int i=0; i&lt;zu; i++) &#123; int count = sc.nextInt(); int s = 0; for(int j=0; j&lt;count; j++) &#123; int value = sc.nextInt(); if (isPrime(value)) &#123; s += value; &#125; &#125; sum[i] = s; &#125; for(int i=0; i&lt;zu; i++) &#123; System.out.println(sum[i]); &#125; &#125; public static boolean isPrime(int a) &#123; boolean flag = true; if (a &lt; 2) &#123;// 素数不小于2 return false; &#125; else &#123; for (int i = 2; i &lt;= Math.sqrt(a); i++) &#123; if (a % i == 0) &#123;// 若能被整除，则说明不是素数，返回false flag = false; break;// 跳出循环 &#125; &#125; &#125; return flag; &#125; &#125;","categories":[{"name":"ACM","slug":"ACM","permalink":"http://zhouzhuo810.github.io/categories/ACM/"}],"tags":[{"name":"ACM","slug":"ACM","permalink":"http://zhouzhuo810.github.io/tags/ACM/"}]},{"title":"ACM-(括号配对问题)","slug":"ACM-括号配对问题","date":"2017-06-07T06:41:38.000Z","updated":"2024-06-13T11:58:36.750Z","comments":true,"path":"2017/06/07/ACM-括号配对问题/","permalink":"http://zhouzhuo810.github.io/2017/06/07/ACM-%E6%8B%AC%E5%8F%B7%E9%85%8D%E5%AF%B9%E9%97%AE%E9%A2%98/","excerpt":"描述 现在，有一行括号序列，请你检查这行括号是否配对。 输入 第一行输入一个数N（0&lt;N&lt;&#x3D;100）,表示有N组测试数据。后面的N行输入多组输入数据，每组输入数据都是一个字符串S(S的长度小于10000，且S不是空串），测试数据组数少于5组。数据保证S中只含有”[“,”]”,”(“,”)”四种字符 输出 每组输入数据的输出占一行，如果该字符串中所含的括号是配对的，则输出Yes,如果不配对则输出No 样例输入 12343[(])(])([[]()]) 样例输出 123NoNoYes","text":"描述 现在，有一行括号序列，请你检查这行括号是否配对。 输入 第一行输入一个数N（0&lt;N&lt;&#x3D;100）,表示有N组测试数据。后面的N行输入多组输入数据，每组输入数据都是一个字符串S(S的长度小于10000，且S不是空串），测试数据组数少于5组。数据保证S中只含有”[“,”]”,”(“,”)”四种字符 输出 每组输入数据的输出占一行，如果该字符串中所含的括号是配对的，则输出Yes,如果不配对则输出No 样例输入 12343[(])(])([[]()]) 样例输出 123NoNoYes 参考答案Java版12345678910111213141516171819202122232425262728293031323334353637import java.io.*;import java.util.*;public class Main &#123; public static void main(String args[]) &#123; Scanner sc = new Scanner(System.in); int count= sc.nextInt(); String[] strs = new String[count]; for(int i=0; i&lt;count; i++) &#123; strs[i] = sc.next(); &#125; Stack&lt;Character&gt; stack = null; for(int j=0; j&lt;count; j++) &#123; String str = strs[j]; if(str.length() % 2 == 1)&#123; System.out.println(&quot;No&quot;); &#125;else&#123; stack = new Stack&lt;Character&gt;(); for(int i=0;i&lt;str.length();i++)&#123; if(stack.isEmpty())&#123; stack.push(str.charAt(i)); &#125;else if(stack.peek() == &#x27;[&#x27; &amp;&amp; str.charAt(i) == &#x27;]&#x27; || stack.peek() == &#x27;(&#x27; &amp;&amp; str.charAt(i) == &#x27;)&#x27;)&#123; stack.pop(); &#125;else&#123; stack.push(str.charAt(i)); &#125; &#125; if(stack.isEmpty())&#123; //如果栈是空的，说明括号匹配 System.out.println(&quot;Yes&quot;); &#125;else&#123; //说明栈不为空，括号不匹配 System.out.println(&quot;No&quot;); &#125; &#125; &#125; &#125;&#125;","categories":[{"name":"ACM","slug":"ACM","permalink":"http://zhouzhuo810.github.io/categories/ACM/"}],"tags":[{"name":"ACM","slug":"ACM","permalink":"http://zhouzhuo810.github.io/tags/ACM/"}]},{"title":"ACM-(A+B问题)","slug":"ACM-A-B问题","date":"2017-06-07T06:35:15.000Z","updated":"2024-06-13T11:58:36.750Z","comments":true,"path":"2017/06/07/ACM-A-B问题/","permalink":"http://zhouzhuo810.github.io/2017/06/07/ACM-A-B%E9%97%AE%E9%A2%98/","excerpt":"描述 此题为练手用题，请大家计算一下a+b的值. 输入 输入两个数，a,b 输出 输出a+b的值 样例输入 12 3 样例输出 15","text":"描述 此题为练手用题，请大家计算一下a+b的值. 输入 输入两个数，a,b 输出 输出a+b的值 样例输入 12 3 样例输出 15 参考答案C语言版1234567#include&lt;stdio.h&gt;int main()&#123;int a,b;scanf(&quot;%d%d&quot;,&amp;a,&amp;b);printf(&quot;%d\\n&quot;,a+b);&#125; Java版1234567891011import java.io.*;import java.util.*;public class Main&#123;public static void main(String args[]) throws Exception&#123;Scanner cin=new Scanner(System.in);int a=cin.nextInt(),b=cin.nextInt();System.out.println(a+b);&#125;&#125;","categories":[{"name":"ACM","slug":"ACM","permalink":"http://zhouzhuo810.github.io/categories/ACM/"}],"tags":[{"name":"ACM","slug":"ACM","permalink":"http://zhouzhuo810.github.io/tags/ACM/"}]},{"title":"Swift笔记-访问控制","slug":"Swift笔记-访问控制","date":"2017-06-07T04:29:46.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"2017/06/07/Swift笔记-访问控制/","permalink":"http://zhouzhuo810.github.io/2017/06/07/Swift%E7%AC%94%E8%AE%B0-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/","excerpt":"访问控制可以限定其他源文件或模块中代码对你代码的访问级别。 Swift 为代码中的实体提供了四种不同的访问级别:public、internal、fileprivate、private。","text":"访问控制可以限定其他源文件或模块中代码对你代码的访问级别。 Swift 为代码中的实体提供了四种不同的访问级别:public、internal、fileprivate、private。 访问级别 定义 public 可以访问自己模块中源文件里的任何实体，别人也可以通过引入该模块来访问源文件里的所有实体。 internal 可以访问自己模块中源文件里的任何实体，但是别人不能访问该模块中源文件里的实体。 fileprivate 文件内私有，只能在当前源文件中使用。 private 只能在类中访问，离开了这个类或者结构体的作用域外面就无法访问。 语法123456789public class SomePublicClass &#123;&#125;internal class SomeInternalClass &#123;&#125;fileprivate class SomeFilePrivateClass &#123;&#125;private class SomePrivateClass &#123;&#125; public var somePublicVariable = 0internal let someInternalConstant = 0fileprivate func someFilePrivateFunction() &#123;&#125;private func somePrivateFunction() &#123;&#125; 除非有特殊的说明，否则实体都使用默认的访问级别 internal。 函数类型访问权限123func someFunction() -&gt; (SomeInternalClass, SomePrivateClass) &#123; // 函数实现&#125; 枚举类型访问权限枚举中成员的访问级别继承自该枚举，你不能为枚举中的成员单独申明不同的访问级别。 枚举 Student 被明确的申明为 public 级别，那么它的成员 Name，Mark 的访问级别同样也是 public： 1234567891011121314public enum Student &#123; case Name(String) case Mark(Int,Int,Int)&#125; var studDetails = Student.Name(&quot;Swift&quot;)var studMarks = Student.Mark(98,97,95) switch studMarks &#123;case .Name(let studName): print(&quot;学生名: \\(studName).&quot;)case .Mark(let Mark1, let Mark2, let Mark3): print(&quot;学生成绩: \\(Mark1),\\(Mark2),\\(Mark3)&quot;)&#125; 子类访问权限子类的访问级别不得高于父类的访问级别。 123456789101112131415161718public class SuperClass &#123; fileprivate func show() &#123; print(&quot;超类&quot;) &#125;&#125; // 访问级别不能低于超类 internal &gt; publicinternal class SubClass: SuperClass &#123; override internal func show() &#123; print(&quot;子类&quot;) &#125;&#125; let sup = SuperClass()sup.show() let sub = SubClass()sub.show() 常量、变量、属性、下标访问权限**&#x3D;&#x3D;常量、变量、属性不能拥有比它们的类型更高的访问级别&#x3D;&#x3D;**。 如果常量、变量、属性、下标索引的定义类型是private级别的，那么它们必须要明确的申明访问级别为private: 1private var privateInstance = SomePrivateClass() Getter 和 Setter访问权限常量、变量、属性、下标索引的Getters和Setters的访问级别继承自它们所属成员的访问级别。 Setter的访问级别可以低于对应的Getter的访问级别，这样就可以控制变量、属性或下标索引的读写权限。 12345678910111213141516class Samplepgm &#123; fileprivate var counter: Int = 0&#123; willSet(newTotal)&#123; print(&quot;计数器: \\(newTotal)&quot;) &#125; didSet&#123; if counter &gt; oldValue &#123; print(&quot;新增加数量 \\(counter - oldValue)&quot;) &#125; &#125; &#125;&#125; let NewCounter = Samplepgm()NewCounter.counter = 100NewCounter.counter = 800 构造器和默认构造器访问权限我们可以给自定义的初始化方法申明访问级别，但是要不高于它所属类的访问级别。 如同函数或方法参数，初始化方法参数的访问级别也不能低于初始化方法的访问级别。 默认初始化方法的访问级别与所属类型的访问级别相同。 协议访问权限如果你定义了一个public访问级别的协议，那么实现该协议提供的必要函数也会是public的访问级别。 123456789101112131415161718192021222324252627282930public protocol TcpProtocol &#123; init(no1: Int)&#125; public class MainClass &#123; var no1: Int // local storage init(no1: Int) &#123; self.no1 = no1 // initialization &#125;&#125; class SubClass: MainClass, TcpProtocol &#123; var no2: Int init(no1: Int, no2 : Int) &#123; self.no2 = no2 super.init(no1:no1) &#125; // Requires only one parameter for convenient method required override convenience init(no1: Int) &#123; self.init(no1:no1, no2:0) &#125;&#125; let res = MainClass(no1: 20)let show = SubClass(no1: 30, no2: 50) print(&quot;res is: \\(res.no1)&quot;)print(&quot;res is: \\(show.no1)&quot;)print(&quot;res is: \\(show.no2)&quot;) 扩展访问权限你可以在条件允许的情况下对类、结构体、枚举进行扩展。 泛型访问权限泛型类型或泛型函数的访问级别取泛型类型、函数本身、泛型类型参数三者中的最低访问级别。 123456789101112131415161718192021222324public struct TOS&lt;T&gt; &#123; var items = [T]() private mutating func push(item: T) &#123; items.append(item) &#125; mutating func pop() -&gt; T &#123; return items.removeLast() &#125;&#125; var tos = TOS&lt;String&gt;()tos.push(&quot;Swift&quot;)print(tos.items) tos.push(&quot;泛型&quot;)print(tos.items) tos.push(&quot;类型参数&quot;)print(tos.items) tos.push(&quot;类型参数名&quot;)print(tos.items)let deletetos = tos.pop() 类型别名任何你定义的类型别名都会被当作不同的类型，以便于进行访问控制。一个类型别名的访问级别不可高于原类型的访问级别。","categories":[{"name":"Swift","slug":"Swift","permalink":"http://zhouzhuo810.github.io/categories/Swift/"}],"tags":[{"name":"Swift","slug":"Swift","permalink":"http://zhouzhuo810.github.io/tags/Swift/"}]},{"title":"Swift笔记-泛型","slug":"Swift笔记-泛型","date":"2017-06-07T04:28:41.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"2017/06/07/Swift笔记-泛型/","permalink":"http://zhouzhuo810.github.io/2017/06/07/Swift%E7%AC%94%E8%AE%B0-%E6%B3%9B%E5%9E%8B/","excerpt":"Swift 提供了泛型让你写出灵活且可重用的函数和类型。Swift 标准库是通过泛型代码构建出来的。Swift 的数组和字典类型都是泛型集。 泛型使用了占位类型名（在这里用字母 T 来表示）来代替实际类型名（例如 Int、String 或 Double）。","text":"Swift 提供了泛型让你写出灵活且可重用的函数和类型。Swift 标准库是通过泛型代码构建出来的。Swift 的数组和字典类型都是泛型集。 泛型使用了占位类型名（在这里用字母 T 来表示）来代替实际类型名（例如 Int、String 或 Double）。 语法1func swapTwoValues&lt;T&gt;(_ a: inout T, _ b: inout T) 实例1234567891011121314151617181920// 定义一个交换两个变量的函数func swapTwoValues&lt;T&gt;(_ a: inout T, _ b: inout T) &#123; let temporaryA = a a = b b = temporaryA&#125; var numb1 = 100var numb2 = 200 print(&quot;交换前数据: \\(numb1) 和 \\(numb2)&quot;)swapTwoValues(&amp;numb1, &amp;numb2)print(&quot;交换后数据: \\(numb1) 和 \\(numb2)&quot;) var str1 = &quot;A&quot;var str2 = &quot;B&quot; print(&quot;交换前数据: \\(str1) 和 \\(str2)&quot;)swapTwoValues(&amp;str1, &amp;str2)print(&quot;交换后数据: \\(str1) 和 \\(str2)&quot;) 泛型类型Swift 允许你定义你自己的泛型类型。 12345678910111213141516171819202122232425struct Stack&lt;Element&gt; &#123; var items = [Element]() mutating func push(_ item: Element) &#123; items.append(item) &#125; mutating func pop() -&gt; Element &#123; return items.removeLast() &#125;&#125; var stackOfStrings = Stack&lt;String&gt;()print(&quot;字符串元素入栈: &quot;)stackOfStrings.push(&quot;google&quot;)stackOfStrings.push(&quot;runoob&quot;)print(stackOfStrings.items); let deletetos = stackOfStrings.pop()print(&quot;出栈元素: &quot; + deletetos) var stackOfInts = Stack&lt;Int&gt;()print(&quot;整数元素入栈: &quot;)stackOfInts.push(1)stackOfInts.push(2)print(stackOfInts.items); 扩展泛型类型当你扩展一个泛型类型的时候（使用 extension 关键字），你并不需要在扩展的定义中提供类型参数列表。 1234567891011121314151617181920212223242526struct Stack&lt;Element&gt; &#123; var items = [Element]() mutating func push(_ item: Element) &#123; items.append(item) &#125; mutating func pop() -&gt; Element &#123; return items.removeLast() &#125;&#125; extension Stack &#123; var topItem: Element? &#123; return items.isEmpty ? nil : items[items.count - 1] &#125;&#125; var stackOfStrings = Stack&lt;String&gt;()print(&quot;字符串元素入栈: &quot;)stackOfStrings.push(&quot;google&quot;)stackOfStrings.push(&quot;runoob&quot;) if let topItem = stackOfStrings.topItem &#123; print(&quot;栈中的顶部元素是：\\(topItem).&quot;)&#125; print(stackOfStrings.items) 类型约束类型约束指定了一个必须继承自指定类的类型参数，或者遵循一个特定的协议或协议构成。 类型约束语法123func someFunction&lt;T: SomeClass, U: SomeProtocol&gt;(someT: T, someU: U) &#123; // 这里是泛型函数的函数体部分&#125; 上面这个函数有两个类型参数。第一个类型参数 T，有一个要求 T 必须是 SomeClass 子类的类型约束；第二个类型参数 U，有一个要求 U 必须符合 SomeProtocol 协议的类型约束。 实例12345678910111213141516// 非泛型函数，查找指定字符串在数组中的索引func findIndex(ofString valueToFind: String, in array: [String]) -&gt; Int? &#123; for (index, value) in array.enumerated() &#123; if value == valueToFind &#123; // 找到返回索引值 return index &#125; &#125; return nil&#125; let strings = [&quot;google&quot;, &quot;weibo&quot;, &quot;taobao&quot;, &quot;runoob&quot;, &quot;facebook&quot;]if let foundIndex = findIndex(ofString: &quot;runoob&quot;, in: strings) &#123; print(&quot;runoob 的索引为 \\(foundIndex)&quot;)&#125; 关联类Swift 中使用 associatedtype 关键字来设置关联类型实例。 1234567891011121314151617181920212223242526272829303132333435363738394041// Container 协议protocol Container &#123; associatedtype ItemType // 添加一个新元素到容器里 mutating func append(_ item: ItemType) // 获取容器中元素的数 var count: Int &#123; get &#125; // 通过索引值类型为 Int 的下标检索到容器中的每一个元素 subscript(i: Int) -&gt; ItemType &#123; get &#125;&#125;// Stack 结构体遵从 Container 协议struct Stack&lt;Element&gt;: Container &#123; // Stack&lt;Element&gt; 的原始实现部分 var items = [Element]() mutating func push(_ item: Element) &#123; items.append(item) &#125; mutating func pop() -&gt; Element &#123; return items.removeLast() &#125; // Container 协议的实现部分 mutating func append(_ item: Element) &#123; self.push(item) &#125; var count: Int &#123; return items.count &#125; subscript(i: Int) -&gt; Element &#123; return items[i] &#125;&#125;var tos = Stack&lt;String&gt;()tos.push(&quot;google&quot;)tos.push(&quot;runoob&quot;)tos.push(&quot;taobao&quot;)// 元素列表print(tos.items)// 元素个数print( tos.count) Where 语句类型约束能够确保类型符合泛型函数或类的定义约束。 你可以在参数列表中通过where语句定义参数的约束。 实例下面的例子定义了一个名为allItemsMatch的泛型函数，用来检查两个Container实例是否包含相同顺序的相同元素。如果所有的元素能够匹配，那么返回 true，反之则返回 false。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768// Container 协议protocol Container &#123; associatedtype ItemType // 添加一个新元素到容器里 mutating func append(_ item: ItemType) // 获取容器中元素的数 var count: Int &#123; get &#125; // 通过索引值类型为 Int 的下标检索到容器中的每一个元素 subscript(i: Int) -&gt; ItemType &#123; get &#125;&#125; // // 遵循Container协议的泛型TOS类型struct Stack&lt;Element&gt;: Container &#123; // Stack&lt;Element&gt; 的原始实现部分 var items = [Element]() mutating func push(_ item: Element) &#123; items.append(item) &#125; mutating func pop() -&gt; Element &#123; return items.removeLast() &#125; // Container 协议的实现部分 mutating func append(_ item: Element) &#123; self.push(item) &#125; var count: Int &#123; return items.count &#125; subscript(i: Int) -&gt; Element &#123; return items[i] &#125;&#125;// 扩展，将 Array 当作 Container 来使用extension Array: Container &#123;&#125; func allItemsMatch&lt;C1: Container, C2: Container&gt; (_ someContainer: C1, _ anotherContainer: C2) -&gt; Bool where C1.ItemType == C2.ItemType, C1.ItemType: Equatable &#123; // 检查两个容器含有相同数量的元素 if someContainer.count != anotherContainer.count &#123; return false &#125; // 检查每一对元素是否相等 for i in 0..&lt;someContainer.count &#123; if someContainer[i] != anotherContainer[i] &#123; return false &#125; &#125; // 所有元素都匹配，返回 true return true&#125;var tos = Stack&lt;String&gt;()tos.push(&quot;google&quot;)tos.push(&quot;runoob&quot;)tos.push(&quot;taobao&quot;) var aos = [&quot;google&quot;, &quot;runoob&quot;, &quot;taobao&quot;] if allItemsMatch(tos, aos) &#123; print(&quot;匹配所有元素&quot;)&#125; else &#123; print(&quot;元素不匹配&quot;)&#125; //匹配所有元素","categories":[{"name":"Swift","slug":"Swift","permalink":"http://zhouzhuo810.github.io/categories/Swift/"}],"tags":[{"name":"Swift","slug":"Swift","permalink":"http://zhouzhuo810.github.io/tags/Swift/"}]},{"title":"Swift笔记-协议","slug":"Swift笔记-协议","date":"2017-06-07T03:45:31.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"2017/06/07/Swift笔记-协议/","permalink":"http://zhouzhuo810.github.io/2017/06/07/Swift%E7%AC%94%E8%AE%B0-%E5%8D%8F%E8%AE%AE/","excerpt":"协议规定了用来实现某一特定功能所必需的方法和属性。 语法123protocol SomeProtocol &#123; // 协议内容&#125; 要使类遵循某个协议，需要在类型名称后加上协议名称，中间以冒号:分隔，作为类型定义的一部分。遵循多个协议时，各协议之间用逗号,分隔。","text":"协议规定了用来实现某一特定功能所必需的方法和属性。 语法123protocol SomeProtocol &#123; // 协议内容&#125; 要使类遵循某个协议，需要在类型名称后加上协议名称，中间以冒号:分隔，作为类型定义的一部分。遵循多个协议时，各协议之间用逗号,分隔。 123struct SomeStructure: FirstProtocol, AnotherProtocol &#123; // 结构体内容&#125; 如果类在遵循协议的同时拥有父类，应该将父类名放在协议名之前，以逗号分隔。 123class SomeClass: SomeSuperClass, FirstProtocol, AnotherProtocol &#123; // 类的内容&#125; 对属性的规定 协议用于指定特定的实例属性或类属性，而不用指定是存储型属性或计算型属性。此外还必须指明是只读的还是可读可写的。 协议中的通常用var来声明变量属性，在类型声明后加上{ set get }来表示属性是可读可写的，只读属性则用{ get }来表示。 1234567891011121314151617181920212223242526272829303132333435363738394041424344protocol classa &#123; var marks: Int &#123; get set &#125; var result: Bool &#123; get &#125; func attendance() -&gt; String func markssecured() -&gt; String &#125; protocol classb: classa &#123; var present: Bool &#123; get set &#125; var subject: String &#123; get set &#125; var stname: String &#123; get set &#125; &#125; class classc: classb &#123; var marks = 96 let result = true var present = false var subject = &quot;Swift 协议&quot; var stname = &quot;Protocols&quot; func attendance() -&gt; String &#123; return &quot;The \\(stname) has secured 99% attendance&quot; &#125; func markssecured() -&gt; String &#123; return &quot;\\(stname) has scored \\(marks)&quot; &#125;&#125; let studdet = classc()studdet.stname = &quot;Swift&quot;studdet.marks = 98studdet.markssecured() print(studdet.marks)print(studdet.result)print(studdet.present)print(studdet.subject)print(studdet.stname) 对 Mutating 方法的规定值类型(结构体，枚举)的实例方法中，将mutating关键字作为函数的前缀，写在func之前，表示可以在该方法中修改它所属的实例及其实例属性的值。 1234567891011121314151617181920212223242526272829303132333435363738protocol daysofaweek &#123; mutating func show()&#125; enum days: daysofaweek &#123; case sun, mon, tue, wed, thurs, fri, sat mutating func show() &#123; switch self &#123; case .sun: self = .sun print(&quot;Sunday&quot;) case .mon: self = .mon print(&quot;Monday&quot;) case .tue: self = .tue print(&quot;Tuesday&quot;) case .wed: self = .wed print(&quot;Wednesday&quot;) case .thurs: self = .thurs print(&quot;Wednesday&quot;) case .fri: self = .fri print(&quot;Wednesday&quot;) case .sat: self = .sat print(&quot;Saturday&quot;) default: print(&quot;NO Such Day&quot;) &#125; &#125;&#125; var res = days.wedres.show() 协议构造器规定在类中的实现你可以在遵循该协议的类中实现构造器，并指定其为类的指定构造器或者便利构造器。在这两种情况下，你都必须给构造器实现标上”required”修饰符： 1234567891011121314class SomeClass: SomeProtocol &#123; required init(someParameter: Int) &#123; // 构造器实现 &#125;&#125;protocol tcpprotocol &#123; init(aprot: Int)&#125;class tcpClass: tcpprotocol &#123; required init(aprot: Int) &#123; &#125;&#125; 使用required修饰符可以保证：所有的遵循该协议的子类，同样能为构造器规定提供一个显式的实现或继承实现。 如果一个子类重写了父类的指定构造器，并且该构造器遵循了某个协议的规定，那么该构造器的实现需要被同时标示required和override修饰符： 12345678910111213141516171819202122232425262728protocol tcpprotocol &#123; init(no1: Int)&#125;class mainClass &#123; var no1: Int // 局部变量 init(no1: Int) &#123; self.no1 = no1 // 初始化 &#125;&#125;class subClass: mainClass, tcpprotocol &#123; var no2: Int init(no1: Int, no2 : Int) &#123; self.no2 = no2 super.init(no1:no1) &#125; // 因为遵循协议，需要加上&quot;required&quot;; 因为继承自父类，需要加上&quot;override&quot; required override convenience init(no1: Int) &#123; self.init(no1:no1, no2:0) &#125;&#125;let res = mainClass(no1: 20)let show = subClass(no1: 30, no2: 50)print(&quot;res is: \\(res.no1)&quot;)print(&quot;res is: \\(show.no1)&quot;)print(&quot;res is: \\(show.no2)&quot;) 协议类型尽管协议本身并不实现任何功能，但是协议可以被当做类型来使用。 协议可以像其他普通类型一样使用，使用场景: 作为函数、方法或构造器中的参数类型或返回值类型 作为常量、变量或属性的类型 作为数组、字典或其他容器中的元素类型 在扩展中添加协议成员我们可以可以通过扩展来扩充已存在类型( 类，结构体，枚举等)。 扩展可以为已存在的类型添加属性，方法，下标脚本，协议等成员。 1234567891011121314151617181920212223242526272829303132333435363738protocol AgeClasificationProtocol &#123; var age: Int &#123; get &#125; func agetype() -&gt; String&#125;class Person &#123; let firstname: String let lastname: String var age: Int init(firstname: String, lastname: String) &#123; self.firstname = firstname self.lastname = lastname self.age = 10 &#125;&#125;extension Person : AgeClasificationProtocol &#123; func fullname() -&gt; String &#123; var c: String c = firstname + &quot; &quot; + lastname return c &#125; func agetype() -&gt; String &#123; switch age &#123; case 0...2: return &quot;Baby&quot; case 2...12: return &quot;Child&quot; case 13...19: return &quot;Teenager&quot; case let x where x &gt; 65: return &quot;Elderly&quot; default: return &quot;Normal&quot; &#125; &#125;&#125; 协议的继承协议能够继承一个或多个其他协议，可以在继承的协议基础上增加新的内容要求。 123protocol InheritingProtocol: SomeProtocol, AnotherProtocol &#123; // 协议定义&#125; 类专属协议123protocol SomeClassOnlyProtocol: class, SomeInheritedProtocol &#123; // 协议定义&#125; 协议合成Swift 支持合成多个协议，这在我们需要同时遵循多个协议时非常有用。 检验协议的一致性你可以使用is和as操作符来检查是否遵循某一协议或强制转化为某一类型。 is操作符用来检查实例是否遵循了某个协议。 as?返回一个可选值，当实例遵循协议时，返回该协议类型;否则返回nil。 as用以强制向下转型，如果强转失败，会引起运行时错误。 1234567891011121314151617181920212223242526272829303132333435363738protocol HasArea &#123; var area: Double &#123; get &#125;&#125;// 定义了Circle类，都遵循了HasArea协议class Circle: HasArea &#123; let pi = 3.1415927 var radius: Double var area: Double &#123; return pi * radius * radius &#125; init(radius: Double) &#123; self.radius = radius &#125;&#125;// 定义了Country类，都遵循了HasArea协议class Country: HasArea &#123; var area: Double init(area: Double) &#123; self.area = area &#125;&#125;// Animal是一个没有实现HasArea协议的类class Animal &#123; var legs: Int init(legs: Int) &#123; self.legs = legs &#125;&#125;let objects: [AnyObject] = [ Circle(radius: 2.0), Country(area: 243_610), Animal(legs: 4)]for object in objects &#123; // 对迭代出的每一个元素进行检查，看它是否遵循了HasArea协议 if let objectWithArea = object as? HasArea &#123; print(&quot;面积为 \\(objectWithArea.area)&quot;) &#125; else &#123; print(&quot;没有面积&quot;) &#125;&#125;","categories":[{"name":"Swift","slug":"Swift","permalink":"http://zhouzhuo810.github.io/categories/Swift/"}],"tags":[{"name":"Swift","slug":"Swift","permalink":"http://zhouzhuo810.github.io/tags/Swift/"}]},{"title":"Swift笔记-扩展","slug":"Swift笔记-扩展","date":"2017-06-06T08:53:57.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"2017/06/06/Swift笔记-扩展/","permalink":"http://zhouzhuo810.github.io/2017/06/06/Swift%E7%AC%94%E8%AE%B0-%E6%89%A9%E5%B1%95/","excerpt":"扩展就是向一个已有的类、结构体或枚举类型添加新功能。扩展可以对一个类型添加新的功能，但是不能重写已有的功能。 Swift 中的扩展可以： 添加计算型属性和计算型静态属性 定义实例方法和类型方法 提供新的构造器 定义下标 定义和使用新的嵌套类型 使一个已有类型符合某个协议","text":"扩展就是向一个已有的类、结构体或枚举类型添加新功能。扩展可以对一个类型添加新的功能，但是不能重写已有的功能。 Swift 中的扩展可以： 添加计算型属性和计算型静态属性 定义实例方法和类型方法 提供新的构造器 定义下标 定义和使用新的嵌套类型 使一个已有类型符合某个协议 语法扩展声明使用关键字 extension： 123extension SomeType &#123; // 加到SomeType的新功能写到这里&#125; 123extension SomeType: SomeProtocol, AnotherProctocol &#123; // 协议实现写到这里&#125; 计算型属性扩展可以向已有类型添加计算型实例属性和计算型类型属性。 123456789101112131415161718192021extension Int &#123; var add: Int &#123;return self + 100 &#125; var sub: Int &#123; return self - 10 &#125; var mul: Int &#123; return self * 10 &#125; var div: Int &#123; return self / 5 &#125;&#125; let addition = 3.addprint(&quot;加法运算后的值：\\(addition)&quot;) let subtraction = 120.subprint(&quot;减法运算后的值：\\(subtraction)&quot;) let multiplication = 39.mulprint(&quot;乘法运算后的值：\\(multiplication)&quot;) let division = 55.divprint(&quot;除法运算后的值: \\(division)&quot;) let mix = 30.add + 34.subprint(&quot;混合运算结果：\\(mix)&quot;) 构造器扩展可以向已有类型添加新的构造器。 1234567891011121314151617181920212223242526struct sum &#123; var num1 = 100, num2 = 200&#125; struct diff &#123; var no1 = 200, no2 = 100&#125; struct mult &#123; var a = sum() var b = diff()&#125; extension mult &#123; init(x: sum, y: diff) &#123; _ = x.num1 + x.num2 _ = y.no1 + y.no2 &#125;&#125; let a = sum(num1: 100, num2: 200)let b = diff(no1: 200, no2: 100)let getMult = mult(x: a, y: b) print(&quot;getMult sum\\(getMult.a.num1, getMult.a.num2)&quot;)print(&quot;getMult diff\\(getMult.b.no1, getMult.b.no2)&quot;) 方法扩展可以向已有类型添加新的实例方法和类型方法。 123456789101112131415extension Int &#123; func topics(summation: () -&gt; ()) &#123; for _ in 0..&lt;self &#123; summation() &#125; &#125;&#125; 4.topics(&#123; print(&quot;扩展模块内&quot;) &#125;) 3.topics(&#123; print(&quot;内型转换模块内&quot;) &#125;) 这个topics方法使用了一个() -&gt; ()类型的单参数，表明函数没有参数而且没有返回值。 可变实例方法通过扩展添加的实例方法也可以修改该实例本身。 123456789101112131415161718extension Double &#123; mutating func square() &#123; let pi = 3.1415 self = pi * self * self &#125;&#125; var Trial1 = 3.3Trial1.square()print(&quot;圆的面积为: \\(Trial1)&quot;) var Trial2 = 5.8Trial2.square()print(&quot;圆的面积为: \\(Trial2)&quot;) var Trial3 = 120.3Trial3.square()print(&quot;圆的面积为: \\(Trial3)&quot;) 下标扩展可以向一个已有类型添加新下标。 1234567891011121314extension Int &#123; subscript(var multtable: Int) -&gt; Int &#123; var no1 = 1 while multtable &gt; 0 &#123; no1 *= 10 --multtable &#125; return (self / no1) % 10 &#125;&#125; print(12[0]) //2print(7869[1]) //6print(786543[2]) //5 嵌套类型扩展可以向已有的类、结构体和枚举添加新的嵌套类型： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546extension Int &#123; enum calc &#123; case add case sub case mult case div case anything &#125; var print: calc &#123; switch self &#123; case 0: return .add case 1: return .sub case 2: return .mult case 3: return .div default: return .anything &#125; &#125;&#125; func result(numb: [Int]) &#123; for i in numb &#123; switch i.print &#123; case .add: print(&quot; 10 &quot;) case .sub: print(&quot; 20 &quot;) case .mult: print(&quot; 30 &quot;) case .div: print(&quot; 40 &quot;) default: print(&quot; 50 &quot;) &#125; &#125;&#125; result([0, 1, 2, 3, 4, 7])","categories":[{"name":"Swift","slug":"Swift","permalink":"http://zhouzhuo810.github.io/categories/Swift/"}],"tags":[{"name":"Swift","slug":"Swift","permalink":"http://zhouzhuo810.github.io/tags/Swift/"}]},{"title":"Swift笔记-类型转换","slug":"Swift笔记-类型转换","date":"2017-06-06T08:53:10.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"2017/06/06/Swift笔记-类型转换/","permalink":"http://zhouzhuo810.github.io/2017/06/06/Swift%E7%AC%94%E8%AE%B0-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/","excerpt":"Swift 中类型转换使用 is 和 as 操作符实现，is 用于检测值的类型，as 用于转换类型。 检查类型类型检查使用 is 关键字。 操作符 is 来检查一个实例是否属于特定子类型。若实例属于那个子类型，类型检查操作符返回 true，否则返回 false。","text":"Swift 中类型转换使用 is 和 as 操作符实现，is 用于检测值的类型，as 用于转换类型。 检查类型类型检查使用 is 关键字。 操作符 is 来检查一个实例是否属于特定子类型。若实例属于那个子类型，类型检查操作符返回 true，否则返回 false。 向下转型向下转型，用类型转换操作符(as? 或 as!) 当你不确定向下转型可以成功时，用类型转换的条件形式(as?)。条件形式的类型转换总是返回一个可选值（optional value），并且若下转是不可能的，可选值将是 nil。 只有你可以确定向下转型一定会成功时，才使用强制形式(as!)。当你试图向下转型为一个不正确的类型时，强制形式的类型转换会触发一个运行时错误。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152class Subjects &#123; var physics: String init(physics: String) &#123; self.physics = physics &#125;&#125;class Chemistry: Subjects &#123; var equations: String init(physics: String, equations: String) &#123; self.equations = equations super.init(physics: physics) &#125;&#125;class Maths: Subjects &#123; var formulae: String init(physics: String, formulae: String) &#123; self.formulae = formulae super.init(physics: physics) &#125;&#125;let sa = [ Chemistry(physics: &quot;固体物理&quot;, equations: &quot;赫兹&quot;), Maths(physics: &quot;流体动力学&quot;, formulae: &quot;千兆赫&quot;), Chemistry(physics: &quot;热物理学&quot;, equations: &quot;分贝&quot;), Maths(physics: &quot;天体物理学&quot;, formulae: &quot;兆赫&quot;), Maths(physics: &quot;微分方程&quot;, formulae: &quot;余弦级数&quot;)]let samplechem = Chemistry(physics: &quot;固体物理&quot;, equations: &quot;赫兹&quot;)print(&quot;实例物理学是: \\(samplechem.physics)&quot;)print(&quot;实例方程式: \\(samplechem.equations)&quot;)let samplemaths = Maths(physics: &quot;流体动力学&quot;, formulae: &quot;千兆赫&quot;)print(&quot;实例物理学是: \\(samplemaths.physics)&quot;)print(&quot;实例公式是: \\(samplemaths.formulae)&quot;)var chemCount = 0var mathsCount = 0for item in sa &#123; // 类型转换的条件形式 if let show = item as? Chemistry &#123; print(&quot;化学主题是: &#x27;\\(show.physics)&#x27;, \\(show.equations)&quot;) // 强制形式 &#125; else if let example = item as? Maths &#123; print(&quot;数学主题是: &#x27;\\(example.physics)&#x27;, \\(example.formulae)&quot;) &#125;&#125; Any和AnyObject的类型转换Swift为不确定类型提供了两种特殊类型别名： AnyObject可以代表任何class类型的实例。 Any可以表示任何类型，包括方法类型（function types）。 Any 实例123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475class Subjects &#123; var physics: String init(physics: String) &#123; self.physics = physics &#125;&#125;class Chemistry: Subjects &#123; var equations: String init(physics: String, equations: String) &#123; self.equations = equations super.init(physics: physics) &#125;&#125;class Maths: Subjects &#123; var formulae: String init(physics: String, formulae: String) &#123; self.formulae = formulae super.init(physics: physics) &#125;&#125;let sa = [ Chemistry(physics: &quot;固体物理&quot;, equations: &quot;赫兹&quot;), Maths(physics: &quot;流体动力学&quot;, formulae: &quot;千兆赫&quot;), Chemistry(physics: &quot;热物理学&quot;, equations: &quot;分贝&quot;), Maths(physics: &quot;天体物理学&quot;, formulae: &quot;兆赫&quot;), Maths(physics: &quot;微分方程&quot;, formulae: &quot;余弦级数&quot;)]let samplechem = Chemistry(physics: &quot;固体物理&quot;, equations: &quot;赫兹&quot;)print(&quot;实例物理学是: \\(samplechem.physics)&quot;)print(&quot;实例方程式: \\(samplechem.equations)&quot;)let samplemaths = Maths(physics: &quot;流体动力学&quot;, formulae: &quot;千兆赫&quot;)print(&quot;实例物理学是: \\(samplemaths.physics)&quot;)print(&quot;实例公式是: \\(samplemaths.formulae)&quot;)var chemCount = 0var mathsCount = 0for item in sa &#123; // 类型转换的条件形式 if let show = item as? Chemistry &#123; print(&quot;化学主题是: &#x27;\\(show.physics)&#x27;, \\(show.equations)&quot;) // 强制形式 &#125; else if let example = item as? Maths &#123; print(&quot;数学主题是: &#x27;\\(example.physics)&#x27;, \\(example.formulae)&quot;) &#125;&#125;// 可以存储Any类型的数组 exampleanyvar exampleany = [Any]()exampleany.append(12)exampleany.append(3.14159)exampleany.append(&quot;Any 实例&quot;)exampleany.append(Chemistry(physics: &quot;固体物理&quot;, equations: &quot;兆赫&quot;))for item2 in exampleany &#123; switch item2 &#123; case let someInt as Int: print(&quot;整型值为 \\(someInt)&quot;) case let someDouble as Double where someDouble &gt; 0: print(&quot;Pi 值为 \\(someDouble)&quot;) case let someString as String: print(&quot;\\(someString)&quot;) case let phy as Chemistry: print(&quot;主题 &#x27;\\(phy.physics)&#x27;, \\(phy.equations)&quot;) default: print(&quot;None&quot;) &#125;&#125; AnyObject 实例1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374class Subjects &#123; var physics: String init(physics: String) &#123; self.physics = physics &#125;&#125;class Chemistry: Subjects &#123; var equations: String init(physics: String, equations: String) &#123; self.equations = equations super.init(physics: physics) &#125;&#125;class Maths: Subjects &#123; var formulae: String init(physics: String, formulae: String) &#123; self.formulae = formulae super.init(physics: physics) &#125;&#125;// [AnyObject] 类型的数组let saprint: [AnyObject] = [ Chemistry(physics: &quot;固体物理&quot;, equations: &quot;赫兹&quot;), Maths(physics: &quot;流体动力学&quot;, formulae: &quot;千兆赫&quot;), Chemistry(physics: &quot;热物理学&quot;, equations: &quot;分贝&quot;), Maths(physics: &quot;天体物理学&quot;, formulae: &quot;兆赫&quot;), Maths(physics: &quot;微分方程&quot;, formulae: &quot;余弦级数&quot;)]let samplechem = Chemistry(physics: &quot;固体物理&quot;, equations: &quot;赫兹&quot;)print(&quot;实例物理学是: \\(samplechem.physics)&quot;)print(&quot;实例方程式: \\(samplechem.equations)&quot;)let samplemaths = Maths(physics: &quot;流体动力学&quot;, formulae: &quot;千兆赫&quot;)print(&quot;实例物理学是: \\(samplemaths.physics)&quot;)print(&quot;实例公式是: \\(samplemaths.formulae)&quot;)var chemCount = 0var mathsCount = 0for item in saprint &#123; // 类型转换的条件形式 if let show = item as? Chemistry &#123; print(&quot;化学主题是: &#x27;\\(show.physics)&#x27;, \\(show.equations)&quot;) // 强制形式 &#125; else if let example = item as? Maths &#123; print(&quot;数学主题是: &#x27;\\(example.physics)&#x27;, \\(example.formulae)&quot;) &#125;&#125;var exampleany = [Any]()exampleany.append(12)exampleany.append(3.14159)exampleany.append(&quot;Any 实例&quot;)exampleany.append(Chemistry(physics: &quot;固体物理&quot;, equations: &quot;兆赫&quot;))for item2 in exampleany &#123; switch item2 &#123; case let someInt as Int: print(&quot;整型值为 \\(someInt)&quot;) case let someDouble as Double where someDouble &gt; 0: print(&quot;Pi 值为 \\(someDouble)&quot;) case let someString as String: print(&quot;\\(someString)&quot;) case let phy as Chemistry: print(&quot;主题 &#x27;\\(phy.physics)&#x27;, \\(phy.equations)&quot;) default: print(&quot;None&quot;) &#125;&#125; 在一个switch语句的case中使用强制形式的类型转换操作符（as, 而不是 as?）来检查和转换到一个明确的类型。","categories":[{"name":"Swift","slug":"Swift","permalink":"http://zhouzhuo810.github.io/categories/Swift/"}],"tags":[{"name":"Swift","slug":"Swift","permalink":"http://zhouzhuo810.github.io/tags/Swift/"}]},{"title":"Swift笔记-自动引用计数","slug":"Swift笔记-自动引用计数","date":"2017-06-06T06:45:39.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"2017/06/06/Swift笔记-自动引用计数/","permalink":"http://zhouzhuo810.github.io/2017/06/06/Swift%E7%AC%94%E8%AE%B0-%E8%87%AA%E5%8A%A8%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0/","excerpt":"Swift 使用自动引用计数（ARC）这一机制来跟踪和管理应用程序的内存通常情况下我们不需要去手动释放内存，因为 ARC 会在类的实例不再被使用时，自动释放其占用的内存。但在有些时候我们还是需要在代码中实现内存管理。 ARC 功能 当每次使用 init() 方法创建一个类的新的实例的时候，ARC 会分配一大块内存用来储存实例的信息。 内存中会包含实例的类型信息，以及这个实例所有相关属性的值。 当实例不再被使用时，ARC 释放实例所占用的内存，并让释放的内存能挪作他用。 为了确保使用中的实例不会被销毁，ARC 会跟踪和计算每一个实例正在被多少属性，常量和变量所引用。 实例赋值给属性、常量或变量，它们都会创建此实例的强引用，只要强引用还在，实例是不允许被销毁的。","text":"Swift 使用自动引用计数（ARC）这一机制来跟踪和管理应用程序的内存通常情况下我们不需要去手动释放内存，因为 ARC 会在类的实例不再被使用时，自动释放其占用的内存。但在有些时候我们还是需要在代码中实现内存管理。 ARC 功能 当每次使用 init() 方法创建一个类的新的实例的时候，ARC 会分配一大块内存用来储存实例的信息。 内存中会包含实例的类型信息，以及这个实例所有相关属性的值。 当实例不再被使用时，ARC 释放实例所占用的内存，并让释放的内存能挪作他用。 为了确保使用中的实例不会被销毁，ARC 会跟踪和计算每一个实例正在被多少属性，常量和变量所引用。 实例赋值给属性、常量或变量，它们都会创建此实例的强引用，只要强引用还在，实例是不允许被销毁的。 类实例之间的循环强引用这种情况发生在两个类实例互相保持对方的强引用，并让对方不被销毁。这就是所谓的循环强引用。 1234567891011121314151617181920212223242526272829303132class Person &#123; let name: String init(name: String) &#123; self.name = name &#125; var apartment: Apartment? deinit &#123; print(&quot;\\(name) 被析构&quot;) &#125;&#125;class Apartment &#123; let number: Int init(number: Int) &#123; self.number = number &#125; var tenant: Person? deinit &#123; print(&quot;Apartment #\\(number) 被析构&quot;) &#125;&#125;// 两个变量都被初始化为nilvar runoob: Person?var number73: Apartment?// 赋值runoob = Person(name: &quot;Runoob&quot;)number73 = Apartment(number: 73)// 意感叹号是用来展开和访问可选变量 runoob 和 number73 中的实例// 循环强引用被创建runoob!.apartment = number73number73!.tenant = runoob// 断开 runoob 和 number73 变量所持有的强引用时，引用计数并不会降为 0，实例也不会被 ARC 销毁// 注意，当你把这两个变量设为nil时，没有任何一个析构函数被调用。// 强引用循环阻止了Person和Apartment类实例的销毁，并在你的应用程序中造成了内存泄漏runoob = nilnumber73 = nil 解决实例之间的循环强引用Swift 提供了两种办法用来解决你在使用类的属性时所遇到的循环强引用问题： 弱引用 无主引用 弱引用实例123456789101112131415161718192021222324252627class Module &#123; let name: String init(name: String) &#123; self.name = name &#125; var sub: SubModule? deinit &#123; print(&quot;\\(name) 主模块&quot;) &#125;&#125;class SubModule &#123; let number: Int init(number: Int) &#123; self.number = number &#125; //weak修饰变量 weak var topic: Module? deinit &#123; print(&quot;子模块 topic 数为 \\(number)&quot;) &#125;&#125;var toc: Module?var list: SubModule?toc = Module(name: &quot;ARC&quot;)list = SubModule(number: 4)toc!.sub = listlist!.topic = toctoc = nillist = nil 无主引用实例123456789101112131415161718192021222324252627class Student &#123; let name: String var section: Marks? init(name: String) &#123; self.name = name &#125; deinit &#123; print(&quot;\\(name)&quot;) &#125;&#125;class Marks &#123; let marks: Int //unowned修饰变量 unowned let stname: Student init(marks: Int, stname: Student) &#123; self.marks = marks self.stname = stname &#125; deinit &#123; print(&quot;学生的分数为 \\(marks)&quot;) &#125;&#125;var module: Student?module = Student(name: &quot;ARC&quot;)module!.section = Marks(marks: 98, stname: module!)module = nil 闭包引起的循环强引用12345678910111213141516171819202122232425262728class HTMLElement &#123; let name: String let text: String? lazy var asHTML: () -&gt; String = &#123; if let text = self.text &#123; //闭包强引用了self。 return &quot;&lt;\\(self.name)&gt;\\(text)&lt;/\\(self.name)&gt;&quot; &#125; else &#123; return &quot;&lt;\\(self.name) /&gt;&quot; &#125; &#125; init(name: String, text: String? = nil) &#123; self.name = name self.text = text &#125; deinit &#123; print(&quot;\\(name) is being deinitialized&quot;) &#125; &#125;// 创建实例并打印信息var paragraph: HTMLElement? = HTMLElement(name: &quot;p&quot;, text: &quot;hello, world&quot;)print(paragraph!.asHTML()) 解决方法： 1234567891011121314151617181920212223242526272829303132333435class HTMLElement &#123; let name: String let text: String? lazy var asHTML: () -&gt; String = &#123; //这里 [unowned self] in if let text = self.text &#123; return &quot;&lt;\\(self.name)&gt;\\(text)&lt;/\\(self.name)&gt;&quot; &#125; else &#123; return &quot;&lt;\\(self.name) /&gt;&quot; &#125; &#125; init(name: String, text: String? = nil) &#123; self.name = name self.text = text &#125; deinit &#123; print(&quot;\\(name) 被析构&quot;) &#125; &#125;//创建并打印HTMLElement实例var paragraph: HTMLElement? = HTMLElement(name: &quot;p&quot;, text: &quot;hello, world&quot;)print(paragraph!.asHTML())// HTMLElement实例将会被销毁，并能看到它的析构函数打印出的消息paragraph = nil//&lt;p&gt;hello, world&lt;/p&gt;//p 被析构","categories":[{"name":"Swift","slug":"Swift","permalink":"http://zhouzhuo810.github.io/categories/Swift/"}],"tags":[{"name":"Swift","slug":"Swift","permalink":"http://zhouzhuo810.github.io/tags/Swift/"}]},{"title":"Swift笔记-可选链","slug":"Swift笔记-可选链","date":"2017-06-06T06:40:32.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"2017/06/06/Swift笔记-可选链/","permalink":"http://zhouzhuo810.github.io/2017/06/06/Swift%E7%AC%94%E8%AE%B0-%E5%8F%AF%E9%80%89%E9%93%BE/","excerpt":"！使用感叹号(!)可选链实例 1234567891011121314class Person &#123; var residence: Residence?&#125; class Residence &#123; var numberOfRooms = 1&#125; let john = Person() //将导致运行时错误let roomCount = john.residence!.numberOfRooms //fatal error: unexpectedly found nil while unwrapping an Optional value 想使用感叹号（!）强制解析获得这个人residence属性numberOfRooms属性值，将会引发运行时错误，因为这时没有可以供解析的residence值。","text":"！使用感叹号(!)可选链实例 1234567891011121314class Person &#123; var residence: Residence?&#125; class Residence &#123; var numberOfRooms = 1&#125; let john = Person() //将导致运行时错误let roomCount = john.residence!.numberOfRooms //fatal error: unexpectedly found nil while unwrapping an Optional value 想使用感叹号（!）强制解析获得这个人residence属性numberOfRooms属性值，将会引发运行时错误，因为这时没有可以供解析的residence值。 ？使用问号(?)可选链实例 123456789101112131415161718class Person &#123; var residence: Residence?&#125; class Residence &#123; var numberOfRooms = 1&#125; let john = Person() // 链接可选residence?属性，如果residence存在则取回numberOfRooms的值if let roomCount = john.residence?.numberOfRooms &#123; print(&quot;John 的房间号为 \\(roomCount)。&quot;)&#125; else &#123; print(&quot;不能查看房间号&quot;)&#125; //不能查看房间号 连接多层链接1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950class Person &#123; var residence: Residence?&#125; // 定义了一个变量 rooms，它被初始化为一个Room[]类型的空数组class Residence &#123; var rooms = [Room]() var numberOfRooms: Int &#123; return rooms.count &#125; subscript(i: Int) -&gt; Room &#123; return rooms[i] &#125; func printNumberOfRooms() &#123; print(&quot;房间号为 \\(numberOfRooms)&quot;) &#125; var address: Address?&#125; // Room 定义一个name属性和一个设定room名的初始化器class Room &#123; let name: String init(name: String) &#123; self.name = name &#125;&#125; // 模型中的最终类叫做Addressclass Address &#123; var buildingName: String? var buildingNumber: String? var street: String? func buildingIdentifier() -&gt; String? &#123; if (buildingName != nil) &#123; return buildingName &#125; else if (buildingNumber != nil) &#123; return buildingNumber &#125; else &#123; return nil &#125; &#125;&#125; let john = Person() if let johnsStreet = john.residence?.address?.street &#123; print(&quot;John 的地址为 \\(johnsStreet).&quot;)&#125; else &#123; print(&quot;不能检索地址&quot;)&#125; //不能检索地址 对返回可选值的函数进行链接我们还可以通过可选链接来调用返回可空值的方法，并且可以继续对可选值进行链接。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950class Person &#123; var residence: Residence?&#125; // 定义了一个变量 rooms，它被初始化为一个Room[]类型的空数组class Residence &#123; var rooms = [Room]() var numberOfRooms: Int &#123; return rooms.count &#125; subscript(i: Int) -&gt; Room &#123; return rooms[i] &#125; func printNumberOfRooms() &#123; print(&quot;房间号为 \\(numberOfRooms)&quot;) &#125; var address: Address?&#125; // Room 定义一个name属性和一个设定room名的初始化器class Room &#123; let name: String init(name: String) &#123; self.name = name &#125;&#125; // 模型中的最终类叫做Addressclass Address &#123; var buildingName: String? var buildingNumber: String? var street: String? func buildingIdentifier() -&gt; String? &#123; if (buildingName != nil) &#123; return buildingName &#125; else if (buildingNumber != nil) &#123; return buildingNumber &#125; else &#123; return nil &#125; &#125;&#125; let john = Person() if john.residence?.printNumberOfRooms() != nil &#123; print(&quot;指定了房间号)&quot;)&#125; else &#123; print(&quot;未指定房间号&quot;)&#125; //未指定房间号 上例中，对Residence的函数printNumberOfRooms进行链接。","categories":[{"name":"Swift","slug":"Swift","permalink":"http://zhouzhuo810.github.io/categories/Swift/"}],"tags":[{"name":"Swift","slug":"Swift","permalink":"http://zhouzhuo810.github.io/tags/Swift/"}]},{"title":"Swift笔记-析构过程","slug":"Swift笔记-析构过程","date":"2017-06-06T06:39:31.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"2017/06/06/Swift笔记-析构过程/","permalink":"http://zhouzhuo810.github.io/2017/06/06/Swift%E7%AC%94%E8%AE%B0-%E6%9E%90%E6%9E%84%E8%BF%87%E7%A8%8B/","excerpt":"在一个类的实例被释放之前，析构函数被立即调用。 用关键字deinit来标示析构函数，类似于初始化函数用init来标示。析构函数只适用于类类型。 Swift 会自动释放不再需要的实例以释放资源。 Swift 通过自动引用计数（ARC）处理实例的内存管理。 通常当你的实例被释放时不需要手动地去清理。但是，当使用自己的资源时，你可能需要进行一些额外的清理。","text":"在一个类的实例被释放之前，析构函数被立即调用。 用关键字deinit来标示析构函数，类似于初始化函数用init来标示。析构函数只适用于类类型。 Swift 会自动释放不再需要的实例以释放资源。 Swift 通过自动引用计数（ARC）处理实例的内存管理。 通常当你的实例被释放时不需要手动地去清理。但是，当使用自己的资源时，你可能需要进行一些额外的清理。 实例1234567891011121314151617var counter = 0; // 引用计数器class BaseClass &#123; init() &#123; counter += 1; &#125; deinit &#123; counter -= 1; &#125;&#125;var show: BaseClass? = BaseClass()print(counter)show = nilprint(counter)//1//0","categories":[{"name":"Swift","slug":"Swift","permalink":"http://zhouzhuo810.github.io/categories/Swift/"}],"tags":[{"name":"Swift","slug":"Swift","permalink":"http://zhouzhuo810.github.io/tags/Swift/"}]},{"title":"Swift笔记-继承","slug":"Swift笔记-继承","date":"2017-06-06T05:41:14.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"2017/06/06/Swift笔记-继承/","permalink":"http://zhouzhuo810.github.io/2017/06/06/Swift%E7%AC%94%E8%AE%B0-%E7%BB%A7%E6%89%BF/","excerpt":"在 Swift 中，类可以调用和访问超类的方法，属性和下标脚本，并且可以重写它们。 基类没有继承其它类的类，称之为基类（Base Class）。 123456789101112131415161718192021222324252627class StudDetails &#123; var stname: String! var mark1: Int! var mark2: Int! var mark3: Int! init(stname: String, mark1: Int, mark2: Int, mark3: Int) &#123; self.stname = stname self.mark1 = mark1 self.mark2 = mark2 self.mark3 = mark3 &#125;&#125;let stname = &quot;swift&quot;let mark1 = 98let mark2 = 89let mark3 = 76 let sds = StudDetails(stname:stname, mark1:mark1, mark2:mark2, mark3:mark3); print(sds.stname)print(sds.mark1)print(sds.mark2)print(sds.mark3)//swift//98//89//76","text":"在 Swift 中，类可以调用和访问超类的方法，属性和下标脚本，并且可以重写它们。 基类没有继承其它类的类，称之为基类（Base Class）。 123456789101112131415161718192021222324252627class StudDetails &#123; var stname: String! var mark1: Int! var mark2: Int! var mark3: Int! init(stname: String, mark1: Int, mark2: Int, mark3: Int) &#123; self.stname = stname self.mark1 = mark1 self.mark2 = mark2 self.mark3 = mark3 &#125;&#125;let stname = &quot;swift&quot;let mark1 = 98let mark2 = 89let mark3 = 76 let sds = StudDetails(stname:stname, mark1:mark1, mark2:mark2, mark3:mark3); print(sds.stname)print(sds.mark1)print(sds.mark2)print(sds.mark3)//swift//98//89//76 子类子类指的是在一个已有类的基础上创建一个新的类。 123class SomeClass: SomeSuperclass &#123; // 类的定义&#125; 实例1234567891011121314151617181920212223242526272829class StudDetails&#123; var mark1: Int; var mark2: Int; init(stm1:Int, results stm2:Int) &#123; mark1 = stm1; mark2 = stm2; &#125; func show() &#123; print(&quot;Mark1:\\(self.mark1), Mark2:\\(self.mark2)&quot;) &#125;&#125;class Tom : StudDetails&#123; init() &#123; super.init(stm1: 93, results: 89) &#125;&#125; let tom = Tom()tom.show() //Mark1:93, Mark2:89 重写子类可以通过继承来的实例方法，类方法，实例属性，或下标脚本来实现自己的定制功能，我们把这种行为叫重写（overriding）。 重写 访问方法，属性，下标脚本 方法 super.somemethod() 属性 super.someProperty() 下标脚本 super[someIndex] 重写方法和属性重写方法1234567891011121314151617181920class SuperClass &#123; func show() &#123; print(&quot;这是超类 SuperClass&quot;) &#125;&#125; class SubClass: SuperClass &#123; override func show() &#123; print(&quot;这是子类 SubClass&quot;) &#125;&#125; let superClass = SuperClass()superClass.show() let subClass = SubClass()subClass.show() //这是超类 SuperClass//这是子类 SubClass 重写属性注意点： 如果你在重写属性中提供了 setter，那么你也一定要提供 getter。 如果你不想在重写版本中的 getter 里修改继承来的属性值，你可以直接通过super.someProperty来返回继承来的值，其中someProperty是你要重写的属性的名字。 123456789101112131415161718192021class Circle &#123; var radius = 12.5 var area: String &#123; return &quot;矩形半径 \\(radius) &quot; &#125;&#125; // 继承超类 Circleclass Rectangle: Circle &#123; var print = 7 override var area: String &#123; return super.area + &quot; ，但现在被重写为 \\(print)&quot; &#125;&#125; let rect = Rectangle()rect.radius = 25.0rect.print = 3print(&quot;Radius \\(rect.area)&quot;) //Radius 矩形半径 25.0 ，但现在被重写为 3 写属性观察器12345678910111213141516171819202122232425262728293031323334class Circle &#123; var radius = 12.5 var area: String &#123; return &quot;矩形半径为 \\(radius) &quot; &#125;&#125; class Rectangle: Circle &#123; var print = 7 override var area: String &#123; return super.area + &quot; ，但现在被重写为 \\(print)&quot; &#125;&#125; let rect = Rectangle()rect.radius = 25.0rect.print = 3print(&quot;半径: \\(rect.area)&quot;) class Square: Rectangle &#123; override var radius: Double &#123; //重写didSet didSet &#123; print = Int(radius/5.0)+1 &#125; &#125;&#125; let sq = Square()sq.radius = 100.0 print(&quot;半径: \\(sq.area)&quot;) 防止重写我们可以使用 final 关键字防止它们被重写 123456final class Circle &#123; final var radius = 12.5 var area: String &#123; return &quot;矩形半径为 \\(radius) &quot; &#125;&#125;","categories":[{"name":"Swift","slug":"Swift","permalink":"http://zhouzhuo810.github.io/categories/Swift/"}],"tags":[{"name":"Swift","slug":"Swift","permalink":"http://zhouzhuo810.github.io/tags/Swift/"}]},{"title":"Swift笔记-下标脚本","slug":"Swift笔记-下标脚本","date":"2017-06-06T05:24:23.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"2017/06/06/Swift笔记-下标脚本/","permalink":"http://zhouzhuo810.github.io/2017/06/06/Swift%E7%AC%94%E8%AE%B0-%E4%B8%8B%E6%A0%87%E8%84%9A%E6%9C%AC/","excerpt":"语法定义下标脚本使用subscript关键字，显式声明入参（一个或多个）和返回类型。 123456789subscript(index: Int) -&gt; Int &#123; get &#123; // 用于下标脚本值的声明 &#125; set(newValue) &#123; // 执行赋值操作 &#125;&#125;","text":"语法定义下标脚本使用subscript关键字，显式声明入参（一个或多个）和返回类型。 123456789subscript(index: Int) -&gt; Int &#123; get &#123; // 用于下标脚本值的声明 &#125; set(newValue) &#123; // 执行赋值操作 &#125;&#125; 123subscript(index: Int) -&gt; Int &#123; return index*4 // 用于下标脚本值的声明&#125; 实例123456789101112131415import Cocoastruct subexample &#123; let decrementer: Int subscript(index: Int) -&gt; Int &#123; return decrementer / index &#125;&#125;let division = subexample(decrementer: 100)print(&quot;100 除以 9 等于 \\(division[9])&quot;)print(&quot;100 除以 2 等于 \\(division[2])&quot;)print(&quot;100 除以 3 等于 \\(division[3])&quot;)print(&quot;100 除以 5 等于 \\(division[5])&quot;)print(&quot;100 除以 7 等于 \\(division[7])&quot;) 实例21234567891011121314151617181920import Cocoaclass daysofaweek &#123; private var days = [&quot;Sunday&quot;, &quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Wednesday&quot;, &quot;Thursday&quot;, &quot;Friday&quot;, &quot;saturday&quot;] subscript(index: Int) -&gt; String &#123; get &#123; return days[index] // 声明下标脚本的值 &#125; set(newValue) &#123; self.days[index] = newValue // 执行赋值操作 &#125; &#125;&#125;var p = daysofaweek()print(p[0])print(p[1])print(p[2])print(p[3]) 下标脚本选项 下标脚本允许任意数量的入参索引，并且每个入参类型也没有限制。 下标脚本的返回值也可以是任何类型。 下标脚本可以使用变量参数和可变参数。 123456789101112131415161718192021222324252627282930313233import Cocoastruct Matrix &#123; let rows: Int, columns: Int var print: [Double] init(rows: Int, columns: Int) &#123; self.rows = rows self.columns = columns print = Array(repeating: 0.0, count: rows * columns) &#125; subscript(row: Int, column: Int) -&gt; Double &#123; get &#123; return print[(row * columns) + column] &#125; set &#123; print[(row * columns) + column] = newValue &#125; &#125;&#125;// 创建了一个新的 3 行 3 列的Matrix实例var mat = Matrix(rows: 3, columns: 3)// 通过下标脚本设置值mat[0,0] = 1.0mat[0,1] = 2.0mat[1,0] = 3.0mat[1,1] = 5.0// 通过下标脚本获取值print(&quot;\\(mat[0,0])&quot;)print(&quot;\\(mat[0,1])&quot;)print(&quot;\\(mat[1,0])&quot;)print(&quot;\\(mat[1,1])&quot;)","categories":[{"name":"Swift","slug":"Swift","permalink":"http://zhouzhuo810.github.io/categories/Swift/"}],"tags":[{"name":"Swift","slug":"Swift","permalink":"http://zhouzhuo810.github.io/tags/Swift/"}]},{"title":"Swift笔记-方法","slug":"Swift笔记-方法","date":"2017-06-06T05:07:15.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"2017/06/06/Swift笔记-方法/","permalink":"http://zhouzhuo810.github.io/2017/06/06/Swift%E7%AC%94%E8%AE%B0-%E6%96%B9%E6%B3%95/","excerpt":"实例方法在 Swift 语言中，实例方法是属于某个特定类、结构体或者枚举类型实例的方法。实例方法提供以下方法： 可以访问和修改实例属性 提供与实例目的相关的功能 实例方法要写在它所属的类型的前后大括号({})之间。实例方法能够隐式访问它所属类型的所有的其他实例方法和属性。实例方法只能被它所属的类的某个特定实例调用。实例方法不能脱离于现存的实例而被调用。","text":"实例方法在 Swift 语言中，实例方法是属于某个特定类、结构体或者枚举类型实例的方法。实例方法提供以下方法： 可以访问和修改实例属性 提供与实例目的相关的功能 实例方法要写在它所属的类型的前后大括号({})之间。实例方法能够隐式访问它所属类型的所有的其他实例方法和属性。实例方法只能被它所属的类的某个特定实例调用。实例方法不能脱离于现存的实例而被调用。 123456789101112131415161718192021222324252627import Cocoaclass Counter &#123; var count = 0 func increment() &#123; count += 1 &#125; func incrementBy(amount: Int) &#123; count += amount &#125; func reset() &#123; count = 0 &#125;&#125;// 初始计数值是0let counter = Counter()// 计数值现在是1counter.increment()// 计数值现在是6counter.incrementBy(amount: 5)print(counter.count)// 计数值现在是0counter.reset()print(counter.count) 方法的局部参数名称和外部参数名称12345678910111213141516import Cocoaclass multiplication &#123; var count: Int = 0 func incrementBy(first no1: Int, no2: Int) &#123; count = no1 * no2 print(count) &#125;&#125;let counter = multiplication()counter.incrementBy(first: 800, no2: 3)counter.incrementBy(first: 100, no2: 5)counter.incrementBy(first: 15000, no2: 3)//我们呢也可以使用下划线（_）设置第二个及后续的参数不提供一个外部名称。 self 属性类型的每一个实例都有一个隐含属性叫做self，self 完全等同于该实例本身。 1234567891011121314151617181920212223242526272829303132333435import Cocoaclass calculations &#123; let a: Int let b: Int let res: Int init(a: Int, b: Int) &#123; self.a = a self.b = b res = a + b print(&quot;Self 内: \\(res)&quot;) &#125; func tot(c: Int) -&gt; Int &#123; return res - c &#125; func result() &#123; print(&quot;结果为: \\(tot(c: 20))&quot;) print(&quot;结果为: \\(tot(c: 50))&quot;) &#125;&#125;let pri = calculations(a: 600, b: 300)let sum = calculations(a: 1200, b: 300)pri.result()sum.result()//Self 内: 900//Self 内: 1500//结果为: 880//结果为: 850//结果为: 1480//结果为: 1450 在实例方法中修改值类型Swift 语言中结构体和枚举是值类型。一般情况下，值类型的属性不能在它的实例方法中被修改。 123456789101112131415161718192021222324import Cocoastruct area &#123; var length = 1 var breadth = 1 func area() -&gt; Int &#123; return length * breadth &#125; //使用mutating方法可以在实例中改变值类型的属性 mutating func scaleBy(res: Int) &#123; length *= res breadth *= res print(length) print(breadth) &#125;&#125;var val = area(length: 3, breadth: 5)val.scaleBy(res: 3)val.scaleBy(res: 30)val.scaleBy(res: 300) 类型方法类型本身调用的方法，这种方法就叫做类型方法。 声明结构体和枚举的类型方法，在方法的func关键字之前加上关键字static。类可能会用关键字class来允许子类重写父类的实现方法。 12345678910111213141516171819202122232425262728293031323334353637383940414243mport Cocoa//类class Math&#123; //类型方法 class func abs(number: Int) -&gt; Int &#123; if number &lt; 0 &#123; return (-number) &#125; else &#123; return number &#125; &#125;&#125;//结构体struct absno&#123; //类型方法 static func abs(number: Int) -&gt; Int &#123; if number &lt; 0 &#123; return (-number) &#125; else &#123; return number &#125; &#125;&#125;let no = Math.abs(number: -35)let num = absno.abs(number: -5)print(no)print(num)//35//5","categories":[{"name":"Swift","slug":"Swift","permalink":"http://zhouzhuo810.github.io/categories/Swift/"}],"tags":[{"name":"Swift","slug":"Swift","permalink":"http://zhouzhuo810.github.io/tags/Swift/"}]},{"title":"Swift笔记-属性","slug":"Swift笔记-属性","date":"2017-06-06T02:35:36.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"2017/06/06/Swift笔记-属性/","permalink":"http://zhouzhuo810.github.io/2017/06/06/Swift%E7%AC%94%E8%AE%B0-%E5%B1%9E%E6%80%A7/","excerpt":"存储属性12345678910111213import Cocoa struct Number&#123; var digits: Int let pi = 3.1415&#125; var n = Number(digits: 12345)n.digits = 67 print(&quot;\\(n.digits)&quot;)print(&quot;\\(n.pi)&quot;)","text":"存储属性12345678910111213import Cocoa struct Number&#123; var digits: Int let pi = 3.1415&#125; var n = Number(digits: 12345)n.digits = 67 print(&quot;\\(n.digits)&quot;)print(&quot;\\(n.pi)&quot;) 存储属性可以是变量存储属性（用关键字var定义），也可以是常量存储属性（用关键字let定义）。 可以在定义存储属性的时候指定默认值 也可以在构造过程中设置或修改存储属性的值，甚至修改常量存储属性的值 123456789101112131415import Cocoa struct Number&#123; var digits: Int let pi = 3.1415&#125; var n = Number(digits: 12345)n.digits = 67 print(&quot;\\(n.digits)&quot;)print(&quot;\\(n.pi)&quot;)//67//3.1415 &#x2F;&#x2F;构造方法给常量赋值 12345678910111213141516171819import Cocoa struct Number&#123; var digits: Int let numbers: Double init(digits: Int, numbers : Double) &#123; self.digits = digits; self.numbers = numbers; &#125;&#125; var n = Number(digits: 12345, numbers: 3.14)n.digits = 67 print(&quot;\\(n.digits)&quot;)print(&quot;\\(n.numbers)&quot;)//67//3.14 延迟存储属性延迟存储属性是指当第一次被调用的时候才会计算其初始值的属性。 延迟存储属性一般用于： 延迟对象的创建。 当属性的值依赖于其他未知类 12345678910111213import Cocoa class sample &#123; lazy var no = number() // `var` 关键字是必须的&#125; class number &#123; var name = &quot;Runoob Swift 教程&quot;&#125; var firstsample = sample()print(firstsample.no.name)//Runoob Swift 教程 计算属性计算属性不直接存储值，而是提供一个 getter 来获取值，一个可选的 setter 来间接设置其他属性或变量的值。 1234567891011121314151617181920212223242526import Cocoa class sample &#123; var no1 = 0.0, no2 = 0.0 var length = 300.0, breadth = 150.0 var middle: (Double, Double) &#123; get&#123; return (length / 2, breadth / 2) &#125; set(axis)&#123; no1 = axis.0 - (length / 2) no2 = axis.1 - (breadth / 2) &#125; &#125;&#125; var result = sample()print(result.middle)result.middle = (0.0, 10.0) print(result.no1)print(result.no2)//(150.0, 75.0)//-150.0//-65.0 只读计算属性只有 getter 没有 setter 的计算属性就是只读计算属性。 12345678910111213141516171819202122import Cocoa class film &#123; var head = &quot;&quot; var duration = 0.0 var metaInfo: [String:String] &#123; return [ &quot;head&quot;: self.head, &quot;duration&quot;:&quot;\\(self.duration)&quot; ] &#125;&#125; var movie = film()movie.head = &quot;Swift 属性&quot;movie.duration = 3.09 print(movie.metaInfo[&quot;head&quot;]!)print(movie.metaInfo[&quot;duration&quot;]!) //Swift 属性//3.09 属性观察器属性观察器监控和响应属性值的变化，每次属性被设置值的时候都会调用属性观察器，甚至新的值和现在的值相同的时候也不例外。 可以为属性添加如下的一个或全部观察器： willSet在设置新的值之前调用 didSet在新的值被设置之后立即调用 willSet和didSet观察器在属性初始化过程中不会被调用 123456789101112131415161718192021import Cocoa class Samplepgm &#123; var counter: Int = 0&#123; willSet(newTotal)&#123; print(&quot;计数器: \\(newTotal)&quot;) &#125; didSet&#123; if counter &gt; oldValue &#123; print(&quot;新增数 \\(counter - oldValue)&quot;) &#125; &#125; &#125;&#125;let NewCounter = Samplepgm()NewCounter.counter = 100NewCounter.counter = 800//计数器: 100//新增数 100//计数器: 800//新增数 700 类型属性类型属性是作为类型定义的一部分写在类型最外层的花括号（{}）内。 使用关键字 static 来定义值类型的类型属性，关键字 class 来为类定义类型属性。 12345678910111213141516171819struct Structname &#123; static var storedTypeProperty = &quot; &quot; static var computedTypeProperty: Int &#123; // 这里返回一个 Int 值 &#125;&#125; enum Enumname &#123; static var storedTypeProperty = &quot; &quot; static var computedTypeProperty: Int &#123; // 这里返回一个 Int 值 &#125;&#125; class Classname &#123; class var computedTypeProperty: Int &#123; // 这里返回一个 Int 值 &#125;&#125; 获取和设置类型属性的值类型属性是通过类型本身来获取和设置，而不是通过实例。 12345678910111213141516171819202122232425262728import Cocoa struct StudMarks &#123; static let markCount = 97 static var totalCount = 0 var InternalMarks: Int = 0 &#123; didSet &#123; if InternalMarks &gt; StudMarks.markCount &#123; InternalMarks = StudMarks.markCount &#125; if InternalMarks &gt; StudMarks.totalCount &#123; //类型属性赋值 StudMarks.totalCount = InternalMarks &#125; &#125; &#125;&#125; var stud1Mark1 = StudMarks()var stud1Mark2 = StudMarks() stud1Mark1.InternalMarks = 98print(stud1Mark1.InternalMarks) stud1Mark2.InternalMarks = 87print(stud1Mark2.InternalMarks)//97//87","categories":[{"name":"Swift","slug":"Swift","permalink":"http://zhouzhuo810.github.io/categories/Swift/"}],"tags":[{"name":"Swift","slug":"Swift","permalink":"http://zhouzhuo810.github.io/tags/Swift/"}]},{"title":"Swift笔记-类","slug":"Swift笔记-类","date":"2017-06-06T01:05:10.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"2017/06/06/Swift笔记-类/","permalink":"http://zhouzhuo810.github.io/2017/06/06/Swift%E7%AC%94%E8%AE%B0-%E7%B1%BB/","excerpt":"语法类定义12345class student &#123; var studname: String var mark: Int var mark2: Int&#125;","text":"语法类定义12345class student &#123; var studname: String var mark: Int var mark2: Int&#125; 实例化类1let studrecord = student() 实例123456789101112131415import Cocoaclass MarksStruct &#123; var mark: Int init(mark: Int) &#123; self.mark = mark &#125;&#125;class studentMarks &#123; var mark = 300&#125;let marks = studentMarks()print(&quot;成绩为 \\(marks.mark)&quot;)//成绩为 300 作为引用类型访问类属性类的属性可以通过 . 来访问。格式为：实例化类名.属性名： 123456789101112131415161718192021import Cocoaclass MarksStruct &#123; var mark: Int init(mark: Int) &#123; self.mark = mark &#125;&#125;class studentMarks &#123; var mark1 = 300 var mark2 = 400 var mark3 = 900&#125;let marks = studentMarks()print(&quot;Mark1 is \\(marks.mark1)&quot;)print(&quot;Mark2 is \\(marks.mark2)&quot;)print(&quot;Mark3 is \\(marks.mark3)&quot;)//Mark1 is 300//Mark2 is 400//Mark3 is 900 恒等运算符 恒等运算符 不恒等运算符 运算符为：&#x3D;&#x3D;&#x3D; 运算符为：!&#x3D;&#x3D; 如果两个常量或者变量引用同一个类实例则返回 true 如果两个常量或者变量引用不同一个类实例则返回 true 1234567891011121314151617181920212223import Cocoaclass SampleClass: Equatable &#123; let myProperty: String init(s: String) &#123; myProperty = s &#125;&#125;func ==(lhs: SampleClass, rhs: SampleClass) -&gt; Bool &#123; return lhs.myProperty == rhs.myProperty&#125;let spClass1 = SampleClass(s: &quot;Hello&quot;)let spClass2 = SampleClass(s: &quot;Hello&quot;)if spClass1 === spClass2 &#123;// false print(&quot;引用相同的类实例 \\(spClass1)&quot;)&#125;if spClass1 !== spClass2 &#123;// true print(&quot;引用不相同的类实例 \\(spClass2)&quot;)&#125;//引用不相同的类实例 SampleClass","categories":[{"name":"Swift","slug":"Swift","permalink":"http://zhouzhuo810.github.io/categories/Swift/"}],"tags":[{"name":"Swift","slug":"Swift","permalink":"http://zhouzhuo810.github.io/tags/Swift/"}]},{"title":"Swift笔记-结构体","slug":"Swift笔记-结构体","date":"2017-06-06T00:53:00.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"2017/06/06/Swift笔记-结构体/","permalink":"http://zhouzhuo810.github.io/2017/06/06/Swift%E7%AC%94%E8%AE%B0-%E7%BB%93%E6%9E%84%E4%BD%93/","excerpt":"语法123456struct nameStruct &#123; Definition 1 Definition 2 …… Definition N&#125;","text":"语法123456struct nameStruct &#123; Definition 1 Definition 2 …… Definition N&#125; 实例12345struct MarkStruct&#123; var mark1: Int var mark2: Int var mark3: Int&#125; 我们可以通过结构体名来访问结构体成员。结构体实例化使用 let 关键字： 1234567891011121314import Cocoastruct studentMarks &#123; var mark1 = 100 var mark2 = 78 var mark3 = 98&#125;let marks = studentMarks()print(&quot;Mark1 是 \\(marks.mark1)&quot;)print(&quot;Mark2 是 \\(marks.mark2)&quot;)print(&quot;Mark3 是 \\(marks.mark3)&quot;)//Mark1 是 100//Mark2 是 78//Mark3 是 98 1234567891011121314import Cocoastruct MarksStruct &#123; var mark: Int init(mark: Int) &#123; self.mark = mark &#125;&#125;var aStruct = MarksStruct(mark: 98)var bStruct = aStruct // aStruct 和 bStruct 是使用相同值的结构体！bStruct.mark = 97print(aStruct.mark) // 98print(bStruct.mark) // 97 结构体应用当符合一条或多条以下条件时，请考虑构建结构体： 结构体的主要目的是用来封装少量相关简单数据值。 有理由预计一个结构体实例在赋值或传递时，封装的数据将会被拷贝而不是被引用。 任何在结构体中储存的值类型属性，也将会被拷贝，而不是被引用。 结构体不需要去继承另一个已存在类型的属性或者行为。 结构体实例是通过值传递而不是通过引用传递。 123456789101112131415161718192021222324252627282930313233import Cocoastruct markStruct&#123; var mark1: Int var mark2: Int var mark3: Int init(mark1: Int, mark2: Int, mark3: Int)&#123; self.mark1 = mark1 self.mark2 = mark2 self.mark3 = mark3 &#125;&#125;print(&quot;优异成绩:&quot;)var marks = markStruct(mark1: 98, mark2: 96, mark3:100)print(marks.mark1)print(marks.mark2)print(marks.mark3)print(&quot;糟糕成绩:&quot;)var fail = markStruct(mark1: 34, mark2: 42, mark3: 13)print(fail.mark1)print(fail.mark2)print(fail.mark3)//优异成绩://98//96//100//糟糕成绩://34//42//13","categories":[{"name":"Swift","slug":"Swift","permalink":"http://zhouzhuo810.github.io/categories/Swift/"}],"tags":[{"name":"Swift","slug":"Swift","permalink":"http://zhouzhuo810.github.io/tags/Swift/"}]},{"title":"Swift笔记-枚举","slug":"Swift笔记-枚举","date":"2017-06-06T00:30:35.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"2017/06/06/Swift笔记-枚举/","permalink":"http://zhouzhuo810.github.io/2017/06/06/Swift%E7%AC%94%E8%AE%B0-%E6%9E%9A%E4%B8%BE/","excerpt":"Swift 的枚举类似于 Objective C 和 C 的结构，枚举的功能为: 它声明在类中，可以通过实例化类来访问它的值。 枚举也可以定义构造函数（initializers）来提供一个初始成员值；可以在原始的实现基础上扩展它们的功能。 可以遵守协议（protocols）来提供标准的功能。 语法123enum enumname &#123; // 枚举定义放在这里&#125;","text":"Swift 的枚举类似于 Objective C 和 C 的结构，枚举的功能为: 它声明在类中，可以通过实例化类来访问它的值。 枚举也可以定义构造函数（initializers）来提供一个初始成员值；可以在原始的实现基础上扩展它们的功能。 可以遵守协议（protocols）来提供标准的功能。 语法123enum enumname &#123; // 枚举定义放在这里&#125; 123456789101112131415161718192021222324252627282930313233import Cocoa// 定义枚举enum DaysofaWeek &#123; case Sunday case Monday case TUESDAY case WEDNESDAY case THURSDAY case FRIDAY case Saturday&#125;var weekDay = DaysofaWeek.THURSDAYweekDay = .THURSDAYswitch weekDay&#123;case .Sunday: print(&quot;星期天&quot;)case .Monday: print(&quot;星期一&quot;)case .TUESDAY: print(&quot;星期二&quot;)case .WEDNESDAY: print(&quot;星期三&quot;)case .THURSDAY: print(&quot;星期四&quot;)case .FRIDAY: print(&quot;星期五&quot;)case .Saturday: print(&quot;星期六&quot;)&#125;//星期四 相关值123456789101112131415import Cocoaenum Student&#123; case Name(String) case Mark(Int,Int,Int)&#125;var studDetails = Student.Name(&quot;Runoob&quot;)var studMarks = Student.Mark(98,97,95)switch studMarks &#123;case .Name(let studName): print(&quot;学生的名字是: \\(studName)。&quot;)case .Mark(let Mark1, let Mark2, let Mark3): print(&quot;学生的成绩是: \\(Mark1),\\(Mark2),\\(Mark3)。&quot;)&#125;//学生的成绩是: 98,97,95。 原始值 原始值可以是字符串，字符，或者任何整型值或浮点型值。 每个原始值在它的枚举声明中必须是唯一的。 当使用整数作为原始值时，隐式赋值的值依次递增1。如果第一个值没有被赋初值，将会被自动置为0。 123456789import Cocoaenum Month: Int &#123; case January = 1, February, March, April, May, June, July, August, September, October, November, December&#125;let yearMonth = Month.May.rawValueprint(&quot;数字月份为: \\(yearMonth)。&quot;)//数字月份为: 5。","categories":[{"name":"Swift","slug":"Swift","permalink":"http://zhouzhuo810.github.io/categories/Swift/"}],"tags":[{"name":"Swift","slug":"Swift","permalink":"http://zhouzhuo810.github.io/tags/Swift/"}]},{"title":"Swift笔记-闭包","slug":"Swift笔记-闭包","date":"2017-06-05T09:27:37.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"2017/06/05/Swift笔记-闭包/","permalink":"http://zhouzhuo810.github.io/2017/06/05/Swift%E7%AC%94%E8%AE%B0-%E9%97%AD%E5%8C%85/","excerpt":"sorted 方法排序闭包函数类型需为(String, String) -&gt; Bool。 1234567891011import Cocoa let names = [&quot;AT&quot;, &quot;AE&quot;, &quot;D&quot;, &quot;S&quot;, &quot;BE&quot;] // 使用普通函数(或内嵌函数)提供排序功能,闭包函数类型需为(String, String) -&gt; Bool。func backwards(s1: String, s2: String) -&gt; Bool &#123; return s1 &gt; s2&#125;var reversed = names.sorted(by: backwards) print(reversed)","text":"sorted 方法排序闭包函数类型需为(String, String) -&gt; Bool。 1234567891011import Cocoa let names = [&quot;AT&quot;, &quot;AE&quot;, &quot;D&quot;, &quot;S&quot;, &quot;BE&quot;] // 使用普通函数(或内嵌函数)提供排序功能,闭包函数类型需为(String, String) -&gt; Bool。func backwards(s1: String, s2: String) -&gt; Bool &#123; return s1 &gt; s2&#125;var reversed = names.sorted(by: backwards) print(reversed) 闭包表达式语法123&#123; (parameters) -&gt; returnType in statements&#125; 下面的例子展示了之前backwards(::)函数对应的闭包表达式版本的代码： 123var reverses = names.sorted(by: &#123; (s1 , s2) -&gt; Bool in return s1 &gt; s2&#125;) 根据上下文推断类型1reversed = names.sorted(by: &#123; s1, s2 in return s1 &gt; s2 &#125; ) 单表达式闭包隐式返回1reversed = names.sorted(by: &#123; s1, s2 in s1 &gt; s2 &#125; ) 在这个例子中，sort(_:)方法的第二个参数函数类型明确了闭包必须返回一个Bool类型值。因为闭包函数体只包含了一个单一表达式（s1 &gt; s2），该表达式返回Bool类型值，因此这里没有歧义，return关键字可以省略。 参数名称缩写Swift 自动为内联闭包提供了参数名称缩写功能，您可以直接通过$0，$1，$2来顺序调用闭包的参数，以此类推。 123456import Cocoa let names = [&quot;AT&quot;, &quot;AE&quot;, &quot;D&quot;, &quot;S&quot;, &quot;BE&quot;] var reversed = names.sorted( by: &#123; $0 &gt; $1 &#125; )print(reversed) 在这个例子中，$0和$1表示闭包中第一个和第二个String类型的参数。 运算符函数123456import Cocoa let names = [&quot;AT&quot;, &quot;AE&quot;, &quot;D&quot;, &quot;S&quot;, &quot;BE&quot;] var reversed = names.sorted(by: &gt;)print(reversed) 尾随闭包尾随闭包是一个书写在函数括号之后的闭包表达式，函数支持将其作为最后一个参数调用。 12345678910111213func someFunctionThatTakesAClosure(closure: () -&gt; Void) &#123; // 函数体部分&#125; // 以下是不使用尾随闭包进行函数调用someFunctionThatTakesAClosure(&#123; // 闭包主体部分&#125;) // 以下是使用尾随闭包进行函数调用someFunctionThatTakesAClosure() &#123; // 闭包主体部分&#125; 如果函数只需要闭包表达式一个参数，当您使用尾随闭包时，您甚至可以把()省略掉： 1234567import Cocoa let names = [&quot;AT&quot;, &quot;AE&quot;, &quot;D&quot;, &quot;S&quot;, &quot;BE&quot;] //尾随闭包var reversed = names.sorted() &#123; $0 &gt; $1 &#125;print(reversed) 注意： 如果函数只需要闭包表达式一个参数，当您使用尾随闭包时，您甚至可以把()省略掉。 1reversed = names.sorted &#123; $0 &gt; $1 &#125;","categories":[{"name":"Swift","slug":"Swift","permalink":"http://zhouzhuo810.github.io/categories/Swift/"}],"tags":[{"name":"Swift","slug":"Swift","permalink":"http://zhouzhuo810.github.io/tags/Swift/"}]},{"title":"Swift笔记-函数","slug":"Swift笔记-函数","date":"2017-06-05T07:29:35.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"2017/06/05/Swift笔记-函数/","permalink":"http://zhouzhuo810.github.io/2017/06/05/Swift%E7%AC%94%E8%AE%B0-%E5%87%BD%E6%95%B0/","excerpt":"函数的定义与调用123456func sayHelloAgain(personName: String) -&gt; String &#123; return &quot;Hello again, &quot; + personName + &quot;!&quot;&#125; print(sayHelloAgain(personName: &quot;Anna&quot;))// prints &quot;Hello again, Anna!&quot; 函数参数与返回值无参函数12345func sayHelloWorld() -&gt; String &#123; return &quot;hello, world&quot;&#125;print(sayHelloWorld())// prints &quot;hello, world&quot;","text":"函数的定义与调用123456func sayHelloAgain(personName: String) -&gt; String &#123; return &quot;Hello again, &quot; + personName + &quot;!&quot;&#125; print(sayHelloAgain(personName: &quot;Anna&quot;))// prints &quot;Hello again, Anna!&quot; 函数参数与返回值无参函数12345func sayHelloWorld() -&gt; String &#123; return &quot;hello, world&quot;&#125;print(sayHelloWorld())// prints &quot;hello, world&quot; 多参数函数123456789func sayHello(personName: String, alreadyGreeted: Bool) -&gt; String &#123; if alreadyGreeted &#123; return sayHelloAgain(personName: personName) &#125; else &#123; return sayHello(personName: personName, alreadyGreeted: &lt;#Bool#&gt;) &#125;&#125;print(sayHello(personName: &quot;Tim&quot;, alreadyGreeted: true))// prints &quot;Hello again, Tim!&quot; 无返回值函数12345func sayGoodbye(personName: String) &#123; print(&quot;Goodbye, \\(personName)!&quot;)&#125;sayGoodbye(personName: &quot;Dave&quot;)// prints &quot;Goodbye, Dave!&quot; 多重返回值函数123456789101112func minMax(array: [Int]) -&gt; (min: Int, max: Int) &#123; var currentMin = array[0] var currentMax = array[0] for value in array[1..&lt;array.count] &#123; if value &lt; currentMin &#123; currentMin = value &#125; else if value &gt; currentMax &#123; currentMax = value &#125; &#125; return (currentMin, currentMax)&#125; 可选元组返回类型为了安全地处理这个“空数组”问题，将minMax(_:)函数改写为使用可选元组返回类型，并且当数组为空时返回nil： 12345678910111213func minMax(array: [Int]) -&gt; (min: Int, max: Int)? &#123; if array.isEmpty &#123; return nil &#125; var currentMin = array[0] var currentMax = array[0] for value in array[1..&lt;array.count] &#123; if value &lt; currentMin &#123; currentMin = value &#125; else if value &gt; currentMax &#123; currentMax = value &#125; &#125; return (currentMin, currentMax)&#125; 函数参数名称函数参数都有一个外部参数名（external parameter name）和一个局部参数名（local parameter name）。外部参数名用于在函数调用时标注传递给函数的参数，局部参数名在函数的实现内部使用。 123456func someFunction(firstParameterName: Int, secondParameterName: Int) &#123; // function body goes here // firstParameterName and secondParameterName refer to // the argument values for the first and second parameters&#125;someFunction(firstParameterName: 1, secondParameterName: 2) 指定外部参数名1234func someFunction(externalParameterName localParameterName: Int) &#123; // function body goes here, and can use localParameterName // to refer to the argument value for that parameter&#125; 12345func sayHello(to person: String, and anotherPerson: String) -&gt; String &#123; return &quot;Hello \\(person) and \\(anotherPerson)!&quot;&#125;print(sayHello(to: &quot;Bill&quot;, and: &quot;Ted&quot;))// prints &quot;Hello Bill and Ted!&quot; 为每个参数指定外部参数名后，在你调用sayHello(to:and:)函数时两个外部参数名都必须写出来。 忽略外部参数名如果你不想为第二个及后续的参数设置外部参数名，用一个下划线（_）代替一个明确的参数名。 123456func someFunction(firstParameterName: Int, _ secondParameterName: Int) &#123; // function body goes here // firstParameterName and secondParameterName refer to // the argument values for the first and second parameters&#125;someFunction(1, 2) 默认参数值你可以在函数体中为每个参数定义默认值（Deafult Values）。当默认值被定义后，调用这个函数时可以忽略这个参数。 1234567func someFunction(_ parameterWithDefault: Int = 12) &#123; // function body goes here // if no arguments are passed to the function call, // value of parameterWithDefault is 12&#125;someFunction(6) // parameterWithDefault is 6someFunction() // parameterWithDefault is 12 可变参数1234567891011func arithmeticMean(numbers: Double...) -&gt; Double &#123; var total: Double = 0 for number in numbers &#123; total += number &#125; return total / Double(numbers.count)&#125;arithmeticMean(1, 2, 3, 4, 5)// returns 3.0, which is the arithmetic mean of these five numbersarithmeticMean(3, 8.25, 18.75)// returns 10.0, which is the arithmetic mean of these three numbers 注意:一个函数最多只能有一个可变参数。 输入输出参数12345func swapTwoInts(a:inout Int, _ b:inout Int) &#123; let temporaryA = a a = b b = temporaryA&#125; 调用参数需要添加&amp; 12345var someInt = 3var anotherInt = 107swapTwoInts(&amp;someInt, &amp;anotherInt)print(&quot;someInt is now \\(someInt), and anotherInt is now \\(anotherInt)&quot;)// prints &quot;someInt is now 107, and anotherInt is now 3&quot; 从上面这个例子中，我们可以看到 someInt 和 anotherInt 的原始值在 swapTwoInts(::) 函数中被修改，尽管它们的定义在函数体外。 函数类型每个函数都有种特定的函数类型，由函数的参数类型和返回类型组成。 嵌套函数123456789101112131415161718func chooseStepFunction(backwards: Bool) -&gt; (Int) -&gt; Int &#123; func stepForward(input: Int) -&gt; Int &#123; return input + 1 &#125; func stepBackward(input: Int) -&gt; Int &#123; return input - 1 &#125; return backwards ? stepBackward : stepForward&#125;var currentValue = -4let moveNearerToZero = chooseStepFunction(backwards: currentValue &gt; 0)// moveNearerToZero now refers to the nested stepForward() functionwhile currentValue != 0 &#123; print(&quot;\\(currentValue)... &quot;) currentValue = moveNearerToZero(currentValue)&#125;print(&quot;zero!&quot;)// -4...// -3...// -2...// -1...// zero!","categories":[{"name":"Swift","slug":"Swift","permalink":"http://zhouzhuo810.github.io/categories/Swift/"}],"tags":[{"name":"Swift","slug":"Swift","permalink":"http://zhouzhuo810.github.io/tags/Swift/"}]},{"title":"Swift笔记-控制流","slug":"Swift笔记-控制流","date":"2017-06-05T06:26:31.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"2017/06/05/Swift笔记-控制流/","permalink":"http://zhouzhuo810.github.io/2017/06/05/Swift%E7%AC%94%E8%AE%B0-%E6%8E%A7%E5%88%B6%E6%B5%81/","excerpt":"For循环For-In你可以使用for-in循环来遍历一个集合里面的所有元素 12345678for index in 1...5 &#123; print(&quot;\\(index) times 5 is \\(index * 5)&quot;)&#125;// 1 times 5 is 5// 2 times 5 is 10// 3 times 5 is 15// 4 times 5 is 20// 5 times 5 is 25 如果你不需要知道区间序列内每一项的值，你可以使用下划线（_）替代变量名来忽略对值的访问： 12345678let base = 3let power = 10var answer = 1for _ in 1...power &#123; answer *= base&#125;print(&quot;\\(base) to the power of \\(power) is \\(answer)&quot;)// 输出 &quot;3 to the power of 10 is 59049&quot;","text":"For循环For-In你可以使用for-in循环来遍历一个集合里面的所有元素 12345678for index in 1...5 &#123; print(&quot;\\(index) times 5 is \\(index * 5)&quot;)&#125;// 1 times 5 is 5// 2 times 5 is 10// 3 times 5 is 15// 4 times 5 is 20// 5 times 5 is 25 如果你不需要知道区间序列内每一项的值，你可以使用下划线（_）替代变量名来忽略对值的访问： 12345678let base = 3let power = 10var answer = 1for _ in 1...power &#123; answer *= base&#125;print(&quot;\\(base) to the power of \\(power) is \\(answer)&quot;)// 输出 &quot;3 to the power of 10 is 59049&quot; For123456for var index = 0; index &lt; 3; ++index &#123; print(&quot;index is \\(index)&quot;)&#125;// index is 0// index is 1// index is 2 While循环 while循环，每次在循环开始时计算条件是否符合； repeat-while循环，每次在循环结束时计算条件是否符合。while循环，每次在循环开始时计算条件是否符合；repeat-while循环，每次在循环结束时计算条件是否符合。 While123while condition &#123; statements&#125; Repeat-While类似于java的do while 123repeat &#123; statements&#125; while condition 条件语句if12345var temperatureInFahrenheit = 30if temperatureInFahrenheit &lt;= 32 &#123; print(&quot;It&#x27;s very cold. Consider wearing a scarf.&quot;)&#125;// 输出 &quot;It&#x27;s very cold. Consider wearing a scarf.&quot; if else1234567temperatureInFahrenheit = 40if temperatureInFahrenheit &lt;= 32 &#123; print(&quot;It&#x27;s very cold. Consider wearing a scarf.&quot;)&#125; else &#123; print(&quot;It&#x27;s not that cold. Wear a t-shirt.&quot;)&#125;// 输出 &quot;It&#x27;s not that cold. Wear a t-shirt.&quot; if else if else123456789temperatureInFahrenheit = 90if temperatureInFahrenheit &lt;= 32 &#123; print(&quot;It&#x27;s very cold. Consider wearing a scarf.&quot;)&#125; else if temperatureInFahrenheit &gt;= 86 &#123; print(&quot;It&#x27;s really warm. Don&#x27;t forget to wear sunscreen.&quot;)&#125; else &#123; print(&quot;It&#x27;s not that cold. Wear a t-shirt.&quot;)&#125;// 输出 &quot;It&#x27;s really warm. Don&#x27;t forget to wear sunscreen.&quot; if else if123456temperatureInFahrenheit = 72if temperatureInFahrenheit &lt;= 32 &#123; print(&quot;It&#x27;s very cold. Consider wearing a scarf.&quot;)&#125; else if temperatureInFahrenheit &gt;= 86 &#123; print(&quot;It&#x27;s really warm. Don&#x27;t forget to wear sunscreen.&quot;)&#125; Switch12345678switch some value to consider &#123;case value 1: respond to value 1case value 2, value 3: respond to value 2 or 3default: otherwise, do something else&#125; 1234567891011let someCharacter: Character = &quot;e&quot;switch someCharacter &#123;case &quot;a&quot;, &quot;e&quot;, &quot;i&quot;, &quot;o&quot;, &quot;u&quot;: print(&quot;\\(someCharacter) is a vowel&quot;)case &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;f&quot;, &quot;g&quot;, &quot;h&quot;, &quot;j&quot;, &quot;k&quot;, &quot;l&quot;, &quot;m&quot;,&quot;n&quot;, &quot;p&quot;, &quot;q&quot;, &quot;r&quot;, &quot;s&quot;, &quot;t&quot;, &quot;v&quot;, &quot;w&quot;, &quot;x&quot;, &quot;y&quot;, &quot;z&quot;: print(&quot;\\(someCharacter) is a consonant&quot;)default: print(&quot;\\(someCharacter) is not a vowel or a consonant&quot;)&#125;// 输出 &quot;e is a vowel&quot; 区间匹配12345678910111213141516171819let approximateCount = 62let countedThings = &quot;moons orbiting Saturn&quot;var naturalCount: Stringswitch approximateCount &#123;case 0: naturalCount = &quot;no&quot;case 1..&lt;5: naturalCount = &quot;a few&quot;case 5..&lt;12: naturalCount = &quot;several&quot;case 12..&lt;100: naturalCount = &quot;dozens of&quot;case 100..&lt;1000: naturalCount = &quot;hundreds of&quot;default: naturalCount = &quot;many&quot;&#125;print(&quot;There are \\(naturalCount) \\(countedThings).&quot;)// 输出 &quot;There are dozens of moons orbiting Saturn.&quot; 元组1234567891011121314let somePoint = (1, 1)switch somePoint &#123;case (0, 0): print(&quot;(0, 0) is at the origin&quot;)case (_, 0): print(&quot;(\\(somePoint.0), 0) is on the x-axis&quot;)case (0, _): print(&quot;(0, \\(somePoint.1)) is on the y-axis&quot;)case (-2...2, -2...2): print(&quot;(\\(somePoint.0), \\(somePoint.1)) is inside the box&quot;)default: print(&quot;(\\(somePoint.0), \\(somePoint.1)) is outside of the box&quot;)&#125;// 输出 &quot;(1, 1) is inside the box&quot; 值绑定12345678910let anotherPoint = (2, 0)switch anotherPoint &#123;case (let x, 0): print(&quot;on the x-axis with an x value of \\(x)&quot;)case (0, let y): print(&quot;on the y-axis with a y value of \\(y)&quot;)case let (x, y): print(&quot;somewhere else at (\\(x), \\(y))&quot;)&#125;// 输出 &quot;on the x-axis with an x value of 2&quot; Where12345678910let yetAnotherPoint = (1, -1)switch yetAnotherPoint &#123;case let (x, y) where x == y: print(&quot;(\\(x), \\(y)) is on the line x == y&quot;)case let (x, y) where x == -y: print(&quot;(\\(x), \\(y)) is on the line x == -y&quot;)case let (x, y): print(&quot;(\\(x), \\(y)) is just some arbitrary point&quot;)&#125;// 输出 &quot;(1, -1) is on the line x == -y&quot; 控制转移语句Swift 有五种控制转移语句： continue break fallthrough return throw Continue123456789101112let puzzleInput = &quot;great minds think alike&quot;var puzzleOutput = &quot;&quot;for character in puzzleInput.characters &#123; switch character &#123; case &quot;a&quot;, &quot;e&quot;, &quot;i&quot;, &quot;o&quot;, &quot;u&quot;, &quot; &quot;: continue default: puzzleOutput.append(character) &#125;&#125;print(puzzleOutput)// 输出 &quot;grtmndsthnklk&quot; Breakbreak语句会立刻结束整个控制流的执行。 循环语句中的 break当在一个循环体中使用break时，会立刻中断该循环体的执行，然后跳转到表示循环体结束的大括号(})后的第一行代码。 Switch 语句中的 break当在一个switch代码块中使用break时，会立即中断该switch代码块的执行，并且跳转到表示switch代码块结束的大括号(})后的第一行代码。 fallthrough1234567891011let integerToDescribe = 5var description = &quot;The number \\(integerToDescribe) is&quot;switch integerToDescribe &#123;case 2, 3, 5, 7, 11, 13, 17, 19: description += &quot; a prime number, and also&quot; fallthroughdefault: description += &quot; an integer.&quot;&#125;print(description)// 输出 &quot;The number 5 is a prime number, and also an integer.&quot; return像if语句一样，guard的执行取决于一个表达式的布尔值。我们可以使用guard语句来要求条件必须为真时，以执行guard语句后的代码。不同于if语句，一个guard语句总是有一个else分句，如果条件不为真则执行else分句中的代码。 123456789101112131415161718192021func greet(person: [String: String]) &#123; guard let name = person[&quot;name&quot;] else &#123; return &#125; print(&quot;Hello \\(name)&quot;) guard let location = person[&quot;location&quot;] else &#123; print(&quot;I hope the weather is nice near you.&quot;) return &#125; print(&quot;I hope the weather is nice in \\(location).&quot;)&#125; greet([&quot;name&quot;: &quot;John&quot;])// prints &quot;Hello John!&quot;// prints &quot;I hope the weather is nice near you.&quot;greet([&quot;name&quot;: &quot;Jane&quot;, &quot;location&quot;: &quot;Cupertino&quot;])// prints &quot;Hello Jane!&quot;// prints &quot;I hope the weather is nice in Cupertino.&quot; 检测 API 可用性12345if #available(iOS 9, OSX 10.10, *) &#123; // 在 iOS 使用 iOS 9 的 API, 在 OS X 使用 OS X v10.10 的 API&#125; else &#123; // 使用先前版本的 iOS 和 OS X 的 API&#125;","categories":[{"name":"Swift","slug":"Swift","permalink":"http://zhouzhuo810.github.io/categories/Swift/"}],"tags":[{"name":"Swift","slug":"Swift","permalink":"http://zhouzhuo810.github.io/tags/Swift/"}]},{"title":"Swift笔记-集合类型","slug":"Swift笔记-集合类型","date":"2017-06-05T03:01:53.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"2017/06/05/Swift笔记-集合类型/","permalink":"http://zhouzhuo810.github.io/2017/06/05/Swift%E7%AC%94%E8%AE%B0-%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B/","excerpt":"Swift 语言提供Arrays、Sets和Dictionaries三种基本的集合类型用来存储集合数据。 数组创建一个空数组123var someInts = [Int]()print(&quot;someInts is of type [Int] with \\(someInts.count) items.&quot;)// 打印 &quot;someInts is of type [Int] with 0 items.&quot; 创建一个带有默认值的数组12var threeDoubles = [Double](count: 3, repeatedValue:0.0)// threeDoubles 是一种 [Double] 数组，等价于 [0.0, 0.0, 0.0]","text":"Swift 语言提供Arrays、Sets和Dictionaries三种基本的集合类型用来存储集合数据。 数组创建一个空数组123var someInts = [Int]()print(&quot;someInts is of type [Int] with \\(someInts.count) items.&quot;)// 打印 &quot;someInts is of type [Int] with 0 items.&quot; 创建一个带有默认值的数组12var threeDoubles = [Double](count: 3, repeatedValue:0.0)// threeDoubles 是一种 [Double] 数组，等价于 [0.0, 0.0, 0.0] 通过两个数组相加创建一个数组12345var anotherThreeDoubles = Array(count: 3, repeatedValue: 2.5)// anotherThreeDoubles 被推断为 [Double]，等价于 [2.5, 2.5, 2.5]var sixDoubles = threeDoubles + anotherThreeDoubles// sixDoubles 被推断为 [Double]，等价于 [0.0, 0.0, 0.0, 2.5, 2.5, 2.5] 用字面量构造数组12var shoppingList: [String] = [&quot;Eggs&quot;, &quot;Milk&quot;]// shoppingList 已经被构造并且拥有两个初始项。 或 1var shoppingList = [&quot;Eggs&quot;, &quot;Milk&quot;] 因为所有字面量中的值都是相同的类型，Swift 可以推断出[String]是shoppinglist中变量的正确类型。 访问和修改数组可以使用数组的只读属性count来获取数组中的数据项数量： 12print(&quot;The shopping list contains \\(shoppingList.count) items.&quot;)// 输出 &quot;The shopping list contains 2 items.&quot;（这个数组有2个项） 使用布尔值属性isEmpty作为检查count属性的值是否为 0 的捷径： 123456if shoppingList.isEmpty &#123; print(&quot;The shopping list is empty.&quot;)&#125; else &#123; print(&quot;The shopping list is not empty.&quot;)&#125;// 打印 &quot;The shopping list is not empty.&quot;（shoppinglist 不是空的） 也可以使用append(_:)方法在数组后面添加新的数据项： 12shoppingList.append(&quot;Flour&quot;)// shoppingList 现在有3个数据项，有人在摊煎饼 使用加法赋值运算符（+&#x3D;）也可以直接在数组后面添加一个或多个拥有相同类型的数据项： 1234shoppingList += [&quot;Baking Powder&quot;]// shoppingList 现在有四项了shoppingList += [&quot;Chocolate Spread&quot;, &quot;Cheese&quot;, &quot;Butter&quot;]// shoppingList 现在有七项了 可以直接使用下标语法来获取数组中的数据项 12var firstItem = shoppingList[0]// 第一项是 &quot;Eggs&quot; 还可以利用下标来一次改变一系列数据值，即使新数据和原有数据的数量是不一样的。下面的例子把”Chocolate Spread”，”Cheese”，和”Butter”替换为”Bananas”和 “Apples”： 12shoppingList[4...6] = [&quot;Bananas&quot;, &quot;Apples&quot;]// shoppingList 现在有6项 调用数组的insert(_:atIndex:)方法来在某个具体索引值之前添加数据项： 123shoppingList.insert(&quot;Maple Syrup&quot;, atIndex: 0)// shoppingList 现在有7项// &quot;Maple Syrup&quot; 现在是这个列表中的第一项 类似的我们可以使用removeAtIndex(_:)方法来移除数组中的某一项。 1234let mapleSyrup = shoppingList.removeAtIndex(0)// 索引值为0的数据项被移除// shoppingList 现在只有6项，而且不包括 Maple Syrup// mapleSyrup 常量的值等于被移除数据项的值 &quot;Maple Syrup&quot; 如果我们只想把数组中的最后一项移除，可以使用removeLast()方法 1234let apples = shoppingList.removeLast()// 数组的最后一项被移除了// shoppingList 现在只有5项，不包括 cheese// apples 常量的值现在等于 &quot;Apples&quot; 字符串 数组的遍历我们可以使用for-in循环来遍历所有数组中的数据项： 12345678for item in shoppingList &#123; print(item)&#125;// Six eggs// Milk// Flour// Baking Powder// Bananas 如果我们同时需要每个数据项的值和索引值，可以使用enumerate()方法来进行数组遍历。 12345678for (index, value) in shoppingList.enumerate() &#123; print(&quot;Item \\(String(index + 1)): \\(value)&quot;)&#125;// Item 1: Six eggs// Item 2: Milk// Item 3: Flour// Item 4: Baking Powder// Item 5: Bananas 集合创建和构造一个空的集合123var letters = Set&lt;Character&gt;()print(&quot;letters is of type Set&lt;Character&gt; with \\(letters.count) items.&quot;)// 打印 &quot;letters is of type Set&lt;Character&gt; with 0 items.&quot; 用数组字面量创建集合12var favoriteGenres: Set&lt;String&gt; = [&quot;Rock&quot;, &quot;Classical&quot;, &quot;Hip hop&quot;]// favoriteGenres 被构造成含有三个初始值的集合 访问和修改一个集合为了找出一个Set中元素的数量，可以使用其只读属性count： 12print(&quot;I have \\(favoriteGenres.count) favorite music genres.&quot;)// 打印 &quot;I have 3 favorite music genres.&quot; 使用布尔属性isEmpty作为一个缩写形式去检查count属性是否为0： 123456if favoriteGenres.isEmpty &#123; print(&quot;As far as music goes, I&#x27;m not picky.&quot;)&#125; else &#123; print(&quot;I have particular music preferences.&quot;)&#125;// 打印 &quot;I have particular music preferences.&quot; 你可以通过调用Set的insert(_:)方法来添加一个新元素： 12favoriteGenres.insert(&quot;Jazz&quot;)// favoriteGenres 现在包含4个元素 你可以通过调用Set的remove(_:)方法去删除一个元素，如果该值是该Set的一个元素则删除该元素并且返回被删除的元素值，否则如果该Set不包含该值，则返回nil 123456if let removedGenre = favoriteGenres.remove(&quot;Rock&quot;) &#123; print(&quot;\\(removedGenre)? I&#x27;m over it.&quot;)&#125; else &#123; print(&quot;I never much cared for that.&quot;)&#125;// 打印 &quot;Rock? I&#x27;m over it.&quot; 使用contains(_:)方法去检查Set中是否包含一个特定的值： 123456if favoriteGenres.contains(&quot;Funk&quot;) &#123; print(&quot;I get up on the good foot.&quot;)&#125; else &#123; print(&quot;It&#x27;s too funky in here.&quot;)&#125;// 打印 &quot;It&#x27;s too funky in here.&quot; 遍历一个集合123456for genre in favoriteGenres &#123; print(&quot;\\(genre)&quot;)&#125;// Classical// Jazz// Hip hop 123456for genre in favoriteGenres.sort() &#123; print(&quot;\\(genre)&quot;)&#125;// prints &quot;Classical&quot;// prints &quot;Hip hop&quot;// prints &quot;Jazz 基本集合操作 123456789101112let oddDigits: Set = [1, 3, 5, 7, 9]let evenDigits: Set = [0, 2, 4, 6, 8]let singleDigitPrimeNumbers: Set = [2, 3, 5, 7]oddDigits.union(evenDigits).sort()// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]oddDigits.intersect(evenDigits).sort()// []oddDigits.subtract(singleDigitPrimeNumbers).sort()// [1, 9]oddDigits.exclusiveOr(singleDigitPrimeNumbers).sort()// [1, 2, 9] 字典创建一个空字典12var namesOfIntegers = [Int: String]()// namesOfIntegers 是一个空的 [Int: String] 字典 用字典字面量创建字典1var airports: [String: String] = [&quot;YYZ&quot;: &quot;Toronto Pearson&quot;, &quot;DUB&quot;: &quot;Dublin&quot;] 访问和修改字典我们可以通过字典的只读属性count来获取某个字典的数据项数量： 12print(&quot;The dictionary of airports contains \\(airports.count) items.&quot;)// 打印 &quot;The dictionary of airports contains 2 items.&quot;（这个字典有两个数据项） 使用布尔属性isEmpty来快捷地检查字典的count属性是否等于0： 123456if airports.isEmpty &#123; print(&quot;The airports dictionary is empty.&quot;)&#125; else &#123; print(&quot;The airports dictionary is not empty.&quot;)&#125;// 打印 &quot;The airports dictionary is not empty.&quot; 我们还可以使用下标语法来通过给某个键的对应值赋值为nil来从字典里移除一个键值对： 1234airports[&quot;APL&quot;] = &quot;Apple Internation&quot;// &quot;Apple Internation&quot; 不是真的 APL 机场, 删除它airports[&quot;APL&quot;] = nil// APL 现在被移除了 updateValue(_:forKey:)方法会返回对应值的类型的可选值。 1234if let oldValue = airports.updateValue(&quot;Dublin Airport&quot;, forKey: &quot;DUB&quot;) &#123; print(&quot;The old value for DUB was \\(oldValue).&quot;)&#125;// 输出 &quot;The old value for DUB was Dublin.&quot; removeValueForKey(_:)方法也可以用来在字典中移除键值对。这个方法在键值对存在的情况下会移除该键值对并且返回被移除的值或者在没有值的情况下返回nil： 123456if let removedValue = airports.removeValueForKey(&quot;DUB&quot;) &#123; print(&quot;The removed airport&#x27;s name is \\(removedValue).&quot;)&#125; else &#123; print(&quot;The airports dictionary does not contain a value for DUB.&quot;)&#125;// prints &quot;The removed airport&#x27;s name is Dublin Airport.&quot; 字典遍历12345for (airportCode, airportName) in airports &#123; print(&quot;\\(airportCode): \\(airportName)&quot;)&#125;// YYZ: Toronto Pearson// LHR: London Heathrow 1234567891011for airportCode in airports.keys &#123; print(&quot;Airport code: \\(airportCode)&quot;)&#125;// Airport code: YYZ// Airport code: LHRfor airportName in airports.values &#123; print(&quot;Airport name: \\(airportName)&quot;)&#125;// Airport name: Toronto Pearson// Airport name: London Heathrow 如果我们只是需要使用某个字典的键集合或者值集合来作为某个接受Array实例的 API 的参数，可以直接使用keys或者values属性构造一个新数组： 12345let airportCodes = [String](airports.keys)// airportCodes 是 [&quot;YYZ&quot;, &quot;LHR&quot;]let airportNames = [String](airports.values)// airportNames 是 [&quot;Toronto Pearson&quot;, &quot;London Heathrow&quot;]","categories":[{"name":"Swift","slug":"Swift","permalink":"http://zhouzhuo810.github.io/categories/Swift/"}],"tags":[{"name":"Swift","slug":"Swift","permalink":"http://zhouzhuo810.github.io/tags/Swift/"}]},{"title":"Swift笔记-字符串和字符","slug":"Swift笔记-字符串和字符","date":"2017-06-05T01:50:34.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"2017/06/05/Swift笔记-字符串和字符/","permalink":"http://zhouzhuo810.github.io/2017/06/05/Swift%E7%AC%94%E8%AE%B0-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%AD%97%E7%AC%A6/","excerpt":"初始化空字符串123var emptyString = &quot;&quot; // 空字符串字面量var anotherEmptyString = String() // 初始化方法// 两个字符串均为空并等价。 判断该字符串是否为空 1234if emptyString.isEmpty &#123; print(&quot;Nothing to see here&quot;)&#125;// 打印输出：&quot;Nothing to see here&quot;","text":"初始化空字符串123var emptyString = &quot;&quot; // 空字符串字面量var anotherEmptyString = String() // 初始化方法// 两个字符串均为空并等价。 判断该字符串是否为空 1234if emptyString.isEmpty &#123; print(&quot;Nothing to see here&quot;)&#125;// 打印输出：&quot;Nothing to see here&quot; 字符串可变性1234567var variableString = &quot;Horse&quot;variableString += &quot; and carriage&quot;// variableString 现在为 &quot;Horse and carriage&quot;let constantString = &quot;Highlander&quot;constantString += &quot; and another Highlander&quot;// 这会报告一个编译错误 (compile-time error) - 常量字符串不可以被修改。 使用字符遍历字符串中的字符12345678for character in &quot;Dog!🐶&quot;.characters &#123; print(character)&#125;// D// o// g// !// 🐶 声明字符常量1let exclamationMark: Character = &quot;!&quot; 字符数组转字符串1234let catCharacters: [Character] = [&quot;C&quot;, &quot;a&quot;, &quot;t&quot;, &quot;!&quot;, &quot;🐱&quot;]let catString = String(catCharacters)print(catString)// 打印输出：&quot;Cat!🐱&quot; 连接字符串和字符+1234let string1 = &quot;hello&quot;let string2 = &quot; there&quot;var welcome = string1 + string2// welcome 现在等于 &quot;hello there&quot; +&#x3D;123var instruction = &quot;look over&quot;instruction += string2// instruction 现在等于 &quot;look over there&quot; append()123let exclamationMark: Character = &quot;!&quot;welcome.append(exclamationMark)// welcome 现在等于 &quot;hello there!&quot; 字符串插值123let multiplier = 3let message = &quot;\\(multiplier) times 2.5 is \\(Double(multiplier) * 2.5)&quot;// message is &quot;3 times 2.5 is 7.5&quot; 计算字符数量 (str.count)123var word = &quot;cafe&quot;print(&quot;the number of characters in \\(word) is \\(word.characters.count)&quot;)// 打印输出 &quot;the number of characters in cafe is 4&quot; 访问和修改字符串字符串索引12345678910let greeting = &quot;Guten Tag!&quot;greeting[greeting.startIndex]// Ggreeting[greeting.endIndex.predecessor()]// !greeting[greeting.startIndex.successor()]// ulet index = greeting.startIndex.advancedBy(7)greeting[index]// a 1234for index in greeting.characters.indices &#123; print(&quot;\\(greeting[index]) &quot;, terminator: &quot; &quot;)&#125;// 打印输出 &quot;G u t e n T a g !&quot; 插入和删除()调用insert(_:atIndex:)方法可以在一个字符串的指定索引插入一个字符。 123var welcome = &quot;hello&quot;welcome.insert(&quot;!&quot;, atIndex: welcome.endIndex)// welcome now 现在等于 &quot;hello!&quot; 调用insertContentsOf(_:at:)方法可以在一个字符串的指定索引插入一个字符串。 12welcome.insertContentsOf(&quot; there&quot;.characters, at: welcome.endIndex.predecessor())// welcome 现在等于 &quot;hello there!&quot; 调用removeAtIndex(_:)方法可以在一个字符串的指定索引删除一个字符。 12welcome.removeAtIndex(welcome.endIndex.predecessor())// welcome 现在等于 &quot;hello there&quot; 调用removeRange(_:)方法可以在一个字符串的指定索引删除一个子字符串。 123let range = welcome.endIndex.advancedBy(-6)..&lt;welcome.endIndexwelcome.removeRange(range)// welcome 现在等于 &quot;hello&quot; 比较字符串字符串&#x2F;字符相等 (&#x3D;&#x3D; 和 !&#x3D;)123456let quotation = &quot;We&#x27;re a lot alike, you and I.&quot;let sameQuotation = &quot;We&#x27;re a lot alike, you and I.&quot;if quotation == sameQuotation &#123; print(&quot;These two strings are considered equal&quot;)&#125;// 打印输出 &quot;These two strings are considered equal&quot; 前缀&#x2F;后缀相等通过调用字符串的hasPrefix(:)&#x2F;hasSuffix(:)方法来检查字符串是否拥有特定前缀&#x2F;后缀，两个方法均接收一个String类型的参数，并返回一个布尔值。 12345678910111213let romeoAndJuliet = [ &quot;Act 1 Scene 1: Verona, A public place&quot;, &quot;Act 1 Scene 2: Capulet&#x27;s mansion&quot;, &quot;Act 1 Scene 3: A room in Capulet&#x27;s mansion&quot;, &quot;Act 1 Scene 4: A street outside Capulet&#x27;s mansion&quot;, &quot;Act 1 Scene 5: The Great Hall in Capulet&#x27;s mansion&quot;, &quot;Act 2 Scene 1: Outside Capulet&#x27;s mansion&quot;, &quot;Act 2 Scene 2: Capulet&#x27;s orchard&quot;, &quot;Act 2 Scene 3: Outside Friar Lawrence&#x27;s cell&quot;, &quot;Act 2 Scene 4: A street in Verona&quot;, &quot;Act 2 Scene 5: Capulet&#x27;s mansion&quot;, &quot;Act 2 Scene 6: Friar Lawrence&#x27;s cell&quot;] 前缀判断 12345678var act1SceneCount = 0for scene in romeoAndJuliet &#123; if scene.hasPrefix(&quot;Act 1 &quot;) &#123; ++act1SceneCount &#125;&#125;print(&quot;There are \\(act1SceneCount) scenes in Act 1&quot;)// 打印输出 &quot;There are 5 scenes in Act 1&quot; 后缀判断 1234567891011var mansionCount = 0var cellCount = 0for scene in romeoAndJuliet &#123; if scene.hasSuffix(&quot;Capulet&#x27;s mansion&quot;) &#123; ++mansionCount &#125; else if scene.hasSuffix(&quot;Friar Lawrence&#x27;s cell&quot;) &#123; ++cellCount &#125;&#125;print(&quot;\\(mansionCount) mansion scenes; \\(cellCount) cell scenes&quot;)// 打印输出 &quot;6 mansion scenes; 2 cell scenes&quot;","categories":[{"name":"Swift","slug":"Swift","permalink":"http://zhouzhuo810.github.io/categories/Swift/"}],"tags":[{"name":"Swift","slug":"Swift","permalink":"http://zhouzhuo810.github.io/tags/Swift/"}]},{"title":"Swift笔记-运算符","slug":"Swift笔记-运算符","date":"2017-06-05T01:06:54.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"2017/06/05/Swift笔记-运算符/","permalink":"http://zhouzhuo810.github.io/2017/06/05/Swift%E7%AC%94%E8%AE%B0-%E8%BF%90%E7%AE%97%E7%AC%A6/","excerpt":"赋值运算符 (&#x3D;)1234let b = 10var a = 5a = b// a 现在等于 10 算术运算符 加法（+） 减法（-） 乘法（*） 除法（&#x2F;） 12341 + 2 // 等于 35 - 3 // 等于 22 * 3 // 等于 610.0 / 2.5 // 等于 4.0 加法运算符也可用于String的拼接： 1&quot;hello, &quot; + &quot;world&quot; // 等于 &quot;hello, world&quot;","text":"赋值运算符 (&#x3D;)1234let b = 10var a = 5a = b// a 现在等于 10 算术运算符 加法（+） 减法（-） 乘法（*） 除法（&#x2F;） 12341 + 2 // 等于 35 - 3 // 等于 22 * 3 // 等于 610.0 / 2.5 // 等于 4.0 加法运算符也可用于String的拼接： 1&quot;hello, &quot; + &quot;world&quot; // 等于 &quot;hello, world&quot; 求余运算符 (%)19 % 4 // 等于 1 18 % 2.5 // 等于 0.5 自增和自减 (++) (–) 当++前置的时候，先自増再返回。 当++后置的时候，先返回再自增。 123var a = 0let b = ++a // a 和 b 现在都是 1let c = a++ // a 现在 2, 但 c 是 a 自增前的值 1 一元负号运算符123let three = 3let minusThree = -three // minusThree 等于 -3let plusThree = -minusThree // plusThree 等于 3, 或 &quot;负负3&quot; 一元正号运算符一元正号（+）不做任何改变地返回操作数的值： 12let minusSix = -6let alsoMinusSix = +minusSix // alsoMinusSix 等于 -6 组合赋值运算符表达式a +&#x3D; 2是a &#x3D; a + 2的简写 12var a = 1a += 2 // a 现在是 3 比较运算符 等于（a &#x3D;&#x3D; b） 不等于（a !&#x3D; b） 大于（a &gt; b） 小于（a &lt; b） 大于等于（a &gt;&#x3D; b） 小于等于（a &lt;&#x3D; b） 1234561 == 1 // true, 因为 1 等于 12 != 1 // true, 因为 2 不等于 12 &gt; 1 // true, 因为 2 大于 11 &lt; 2 // true, 因为 1 小于21 &gt;= 1 // true, 因为 1 大于等于 12 &lt;= 1 // false, 因为 2 并不小于等于 1 三目运算符 (a?b:c)问题 ? 答案1 : 答案2 如果问题成立，返回答案1的结果; 如果不成立，返回答案2的结果。 空合运算符 (a ?? b)空合运算符(a ?? b)将对可选类型a进行空判断，如果a包含一个值就进行解封，否则就返回一个默认值b.这个运算符有两个条件: 表达式a必须是Optional可选类型 默认值b的类型必须要和a存储值的类型保持一致 123456let defaultColorName = &quot;red&quot;var userDefinedColorName: String? //默认值为 nilvar colorNameToUse = userDefinedColorName ?? defaultColorName// userDefinedColorName 的值为空，所以 colorNameToUse 的值为 &quot;red&quot; 123userDefinedColorName = &quot;green&quot;colorNameToUse = userDefinedColorName ?? defaultColorName// userDefinedColorName 非空，因此 colorNameToUse 的值为 &quot;green&quot; 区间运算符闭区间运算符 （a…b）12345678for index in 1...5 &#123; print(&quot;\\(index) * 5 = \\(index * 5)&quot;)&#125;// 1 * 5 = 5// 2 * 5 = 10// 3 * 5 = 15// 4 * 5 = 20// 5 * 5 = 25 半开区间运算符 (a..&lt;b)123456789let names = [&quot;Anna&quot;, &quot;Alex&quot;, &quot;Brian&quot;, &quot;Jack&quot;]let count = names.countfor i in 0..&lt;count &#123; print(&quot;第 \\(i + 1) 个人叫 \\(names[i])&quot;)&#125;// 第 1 个人叫 Anna// 第 2 个人叫 Alex// 第 3 个人叫 Brian// 第 4 个人叫 Jack 逻辑运算逻辑非 (!a)12345let allowedEntry = falseif !allowedEntry &#123; print(&quot;ACCESS DENIED&quot;)&#125;// 输出 &quot;ACCESS DENIED&quot; 逻辑与 (a &amp;&amp; b)12345678let enteredDoorCode = truelet passedRetinaScan = falseif enteredDoorCode &amp;&amp; passedRetinaScan &#123; print(&quot;Welcome!&quot;)&#125; else &#123; print(&quot;ACCESS DENIED&quot;)&#125;// 输出 &quot;ACCESS DENIED&quot; 逻辑或 (a || b)12345678let hasDoorKey = falselet knowsOverridePassword = trueif hasDoorKey || knowsOverridePassword &#123; print(&quot;Welcome!&quot;)&#125; else &#123; print(&quot;ACCESS DENIED&quot;)&#125;// 输出 &quot;Welcome!&quot; 使用括号来明确优先级123456if (enteredDoorCode &amp;&amp; passedRetinaScan) || hasDoorKey || knowsOverridePassword &#123; print(&quot;Welcome!&quot;)&#125; else &#123; print(&quot;ACCESS DENIED&quot;)&#125;// 输出 &quot;Welcome!&quot;","categories":[{"name":"Swift","slug":"Swift","permalink":"http://zhouzhuo810.github.io/categories/Swift/"}],"tags":[{"name":"Swift","slug":"Swift","permalink":"http://zhouzhuo810.github.io/tags/Swift/"}]},{"title":"Swift笔记-基础部分","slug":"Swift笔记-基础部分","date":"2017-06-02T08:18:33.000Z","updated":"2024-06-13T11:58:36.781Z","comments":true,"path":"2017/06/02/Swift笔记-基础部分/","permalink":"http://zhouzhuo810.github.io/2017/06/02/Swift%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/","excerpt":"常量和变量 变量 12345678910//变量声明var x = 1//声明多个变量var x = 1, y = 2//带类型声明var msg: String//变量赋值msg = &quot;Hello&quot; 常量 12//声明常量let pi = 3.14159","text":"常量和变量 变量 12345678910//变量声明var x = 1//声明多个变量var x = 1, y = 2//带类型声明var msg: String//变量赋值msg = &quot;Hello&quot; 常量 12//声明常量let pi = 3.14159 注释 单行注释 1//xxx 多行注释 1234/*xxxxxx*/ 基础数据类型 整数 （1）Int ：有符号整数 在32位平台上，Int和Int32长度相同。 在64位平台上，Int和Int64长度相同。 （2）UInt : 无符号整数 在32位平台上，UInt和UInt32长度相同。 在64位平台上，UInt和UInt64长度相同。 推荐使用Int，提高代码的可复用性。 浮点数 Double ： 64位浮点数Float ： 32位浮点数 注意：Double精确度很高，至少有15位数字，而Float最少只有6位数字。选择哪个类型取决于你的代码需要处理的值的范围。 布尔类型 Bool 123let a = truelet b = false 进制 一个十进制数，没有前缀 一个二进制数，前缀是0b 一个八进制数，前缀是0o 一个十六进制数，前缀是0x 1234let decimalInteger = 17 let binaryInteger = 0b10001 // 二进制的17 let octalInteger = 0o21 // 八进制的17 let hexadecimalInteger = 0x11 // 十六进制的17 如果一个十进制数的指数为exp，那这个数相当于基数和$10^{exp}$的乘积： 1.25e2 表示 $1.25 × 10^{2}$，等于 125.0。1.25e-2 表示 $1.25 × 10^{-2}$，等于 0.0125。 如果一个十六进制数的指数为exp，那这个数相当于基数和$2^{exp}$的乘积： 0xFp2 表示 $15 × 2^{2}$，等于 60.0。0xFp-2 表示 $15 × 2^{-2}$，等于 3.75。 类型转换 整数转换 12345// 下划线用来增加可读性，不会影响值let twoThousand: UInt16 = 2_000 let one: UInt8 = 1 // 将UInt8转换成UInt16再相加let twoThousandAndOne = twoThousand + UInt16(one) 浮点数转换 （1）整数-&gt;浮点数 12let three = 3let t = Double(three) （2）浮点数-&gt;整数 12let d = 0.123let i = Int(d) // i = 0 类型别名12typealias AudioSample = UInt16 元组元组（tuples）把多个值组合成一个复合值。元组内的值可以使任意类型，并不要求是相同类型。 12let http404Error = (404, &quot;Not Found&quot;) // http404Error 的类型是 (Int, String)，值是 (404, &quot;Not Found&quot;) 你可以将一个元组的内容分解（decompose）成单独的常量和变量 12345let (statusCode, statusMessage) = http404Error println(&quot;The status code is \\(statusCode)&quot;) // 输出 &quot;The status code is 404&quot; println(&quot;The status message is \\(statusMessage)&quot;) // 输出 &quot;The status message is Not Found&quot; 如果你只需要一部分元组值，分解的时候可以把要忽略的部分用下划线（_）标记 123let (justTheStatusCode, _) = http404Error println(&quot;The status code is \\(justTheStatusCode)&quot;) // 输出 &quot;The status code is 404&quot; 你还可以通过下标来访问元组中的单个元素，下标从零开始 1234println(&quot;The status code is \\(http404Error.0)&quot;) // 输出 &quot;The status code is 404&quot; println(&quot;The status message is \\(http404Error.1)&quot;) // 输出 &quot;The status message is Not Found&quot; 你可以在定义元组的时候给单个元素命名 1234567let http200Status = (statusCode: 200, description: &quot;OK&quot;) println(&quot;The status code is \\(http200Status.statusCode)&quot;) // 输出 &quot;The status code is 200&quot; println(&quot;The status message is \\(http200Status.description)&quot;) // 输出 &quot;The status message is OK&quot; 可选 （?）可选表示： 有值，等于 x 或者 没有值 “Int?”表示可选的Int 123let possibleNumber = &quot;123&quot; let convertedNumber = possibleNumber.toInt() // convertedNumber 被推测为类型 &quot;Int?&quot;， 或者类型 &quot;optional Int&quot; 判断可选是否有值 1234567if let actualNumber = possibleNumber.toInt() &#123; println(&quot;\\(possibleNumber) has an integer value of \\(actualNumber)&quot;) &#125; else &#123; println(&quot;\\(possibleNumber) could not be converted to an integer&quot;) &#125; // 输出 &quot;123 has an integer value of 123&quot; 隐式解析可选 （!）1234567let possibleString: String? = &quot;An optional string.&quot; println(possibleString!) // 需要惊叹号来获取值 // 输出 &quot;An optional string.&quot; let assumedString: String! = &quot;An implicitly unwrapped optional string.&quot; println(assumedString) // 不需要感叹号 // 输出 &quot;An implicitly unwrapped optional string.&quot; 注意：如果你在隐式解析可选没有值的时候尝试取值，会触发运行时错误。和你在没有值的普通可选后面加一个惊叹号一样。 nil可以给可选变量赋值为nil来表示它没有值 1234var serverResponseCode: Int? = 404 // serverResponseCode 包含一个可选的 Int 值 404 serverResponseCode = nil // serverResponseCode 现在不包含值 如果你声明一个可选常量或者变量但是没有赋值，它们会自动被设置为nil： 123var surveyAnswer: String? // surveyAnswer 被自动设置为 nil 异常处理throws 抛出异常 try method 抓取并执行可能抛出异常的方法 do {try …} catch ErrorType {…处理} 处理异常 123456789101112func makeASandwich() throws &#123; // ...&#125;do &#123; try makeASandwich() eatASandwich()&#125; catch Error.OutOfCleanDishes &#123; washDishes()&#125; catch Error.MissingIngredients(let ingredients) &#123; buyGroceries(ingredients)&#125; 断言 （assert）123let age = -3 assert(age &gt;= 0, &quot;A person&#x27;s age cannot be less than zero&quot;) // 因为 age &lt; 0，所以断言会触发 何时使用断言当条件可能为假时使用断言，但是最终一定要保证条件为真，这样你的代码才能继续运行。 断言的适用情景： 整数的附属脚本索引被传入一个自定义附属脚本实现，但是下标索引值可能太小或者太大。 需要给函数传入一个值，但是非法的值可能导致函数不能正常执行。 一个可选值现在是nil，但是后面的代码运行需要一个非nil值。","categories":[{"name":"Swift","slug":"Swift","permalink":"http://zhouzhuo810.github.io/categories/Swift/"}],"tags":[{"name":"Swift","slug":"Swift","permalink":"http://zhouzhuo810.github.io/tags/Swift/"}]},{"title":"使用hexo搭建github静态博客","slug":"使用hexo搭建github静态博客","date":"2017-06-01T08:19:18.000Z","updated":"2024-06-13T12:06:47.731Z","comments":true,"path":"2017/06/01/使用hexo搭建github静态博客/","permalink":"http://zhouzhuo810.github.io/2017/06/01/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BAgithub%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/","excerpt":"网上虽然不乏此类教程，但是实际操作起来还是遇到了一些问题。总结如下。 以Windows 7系统为例： 登陆Github，创建Reposity 用户名.github.io, 例如我的是zhouzhuo810.github.io 点击Setting-&gt;Choose Theme-&gt;随便选一个Theme-&gt;Select-&gt;默认Readme 访问username.github.io可以看到readme的内容即可。 安装Node.jshttps://nodejs.org/en/选择第二个下载安装。","text":"网上虽然不乏此类教程，但是实际操作起来还是遇到了一些问题。总结如下。 以Windows 7系统为例： 登陆Github，创建Reposity 用户名.github.io, 例如我的是zhouzhuo810.github.io 点击Setting-&gt;Choose Theme-&gt;随便选一个Theme-&gt;Select-&gt;默认Readme 访问username.github.io可以看到readme的内容即可。 安装Node.jshttps://nodejs.org/en/选择第二个下载安装。 安装git安装hexo使用cmd命令行工具， 123456F:npm install hexo-cli -ghexo init blogcd blognpm installhexo server 配置config123456title: 标题subtitle: 副标题description: 描述author: 作者language: zh-CN timezone: Asia/Shanghai 1234deploy: type: git repo: 复制github的ssh格式的路径(不要用https格式的) branch: master 配置ssh key。 打开git bash123$ git config --global user.name &quot;你的github用户名&quot;$ git config --global user.email &quot;你的github验证邮箱&quot;$ ssh-keygen -t rsa -C &quot;你的github验证邮箱&quot; 一路回车即可。 默认在C:\\Users\\Administrator.ssh下 找到id_rsa.pub文件。 2.记事本打开，复制所有内容。 到https://github.com/settings/keys配置即可 标题随意。 3.最后别忘了最关键的一步： 验证SSH key配置是否成功： 1$ ssh -T git@github.com 如果弹出Are you sure you want to continue connecting (yes&#x2F;no)?输入yes，回车 等待结果：如果返回以下内容，说明成功了。 1Hi xxx! You&#x27;ve successfully authenticated, but GitHub does not provide shell access. 然后在博客目录下，执行如下命令： 1npm install hexo-deployer-git --save 不行就 1npm install --save hexo-deployer-git 发布123hexo ghexo d 查看不出意外的话，通过username.github.io可以访问到发布的内容了。 切换主题https://github.com/stkevintan/hexo-theme-material-flow 1.安装插件和下载主题 123456# change to work dircd /your_blog_dir/# install dependenciesnpm i -S hexo-generator-search hexo-generator-feed hexo-renderer-less hexo-autoprefixer hexo-generator-json-content# download sourcegit clone https://github.com/stkevintan/hexo-theme-material-flow themes/material-flow 注意事项：多个插件同时安装报错时，拆分成单个插件安装即可。 如： 12345678npm i -S hexo-generator-searchnpm i -S hexo-generator-feed...... 2.修改配置文件_config.yml 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758avatar: /images/avatar.jpgfavicon: /images/favicon.icotheme: material-flowsearch: path: search.xml field: postautoprefixer: exclude: - &#x27;*.min.css&#x27; # remove: false # prevent autoprefixer remove page-break-inside # browsers: # - &#x27;last 2 versions&#x27; # - &#x27;&gt; 5%&#x27;# Generator json contentjsonContent: meta: false keywords: false pages: title: true slug: false date: false updated: false comments: false path: false link: false permalink: true excerpt: false keywords: false text: true raw: false content: false posts: title: true slug: false date: false updated: false comments: false path: false link: false permalink: true excerpt: false keywords: false text: true raw: false content: false categories: false tags: falsefeed: type: atom path: atom.xml limit: 20 hub: content: 3.头像和网站图标配置 在sources文件夹下新建images文件夹即可。","categories":[{"name":"hexo","slug":"hexo","permalink":"http://zhouzhuo810.github.io/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://zhouzhuo810.github.io/tags/hexo/"}]}],"categories":[{"name":"InteliJ IDEA","slug":"InteliJ-IDEA","permalink":"http://zhouzhuo810.github.io/categories/InteliJ-IDEA/"},{"name":"JavaEE","slug":"JavaEE","permalink":"http://zhouzhuo810.github.io/categories/JavaEE/"},{"name":"MySQL","slug":"MySQL","permalink":"http://zhouzhuo810.github.io/categories/MySQL/"},{"name":"Git常见问题","slug":"Git常见问题","permalink":"http://zhouzhuo810.github.io/categories/Git%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"},{"name":"Android疑难杂症","slug":"Android疑难杂症","permalink":"http://zhouzhuo810.github.io/categories/Android%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"},{"name":"Android常见Exception","slug":"Android常见Exception","permalink":"http://zhouzhuo810.github.io/categories/Android%E5%B8%B8%E8%A7%81Exception/"},{"name":"RxJava","slug":"RxJava","permalink":"http://zhouzhuo810.github.io/categories/RxJava/"},{"name":"Android开发工具","slug":"Android开发工具","permalink":"http://zhouzhuo810.github.io/categories/Android%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"},{"name":"Linux","slug":"Linux","permalink":"http://zhouzhuo810.github.io/categories/Linux/"},{"name":"常识","slug":"常识","permalink":"http://zhouzhuo810.github.io/categories/%E5%B8%B8%E8%AF%86/"},{"name":"Android常用代码","slug":"Android常用代码","permalink":"http://zhouzhuo810.github.io/categories/Android%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/"},{"name":"Android版本特性","slug":"Android版本特性","permalink":"http://zhouzhuo810.github.io/categories/Android%E7%89%88%E6%9C%AC%E7%89%B9%E6%80%A7/"},{"name":"SpringMVC","slug":"SpringMVC","permalink":"http://zhouzhuo810.github.io/categories/SpringMVC/"},{"name":"Android自定义控件","slug":"Android自定义控件","permalink":"http://zhouzhuo810.github.io/categories/Android%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"},{"name":"Android-TV开发","slug":"Android-TV开发","permalink":"http://zhouzhuo810.github.io/categories/Android-TV%E5%BC%80%E5%8F%91/"},{"name":"网页前端","slug":"网页前端","permalink":"http://zhouzhuo810.github.io/categories/%E7%BD%91%E9%A1%B5%E5%89%8D%E7%AB%AF/"},{"name":"iOS","slug":"iOS","permalink":"http://zhouzhuo810.github.io/categories/iOS/"},{"name":"PhotoShop","slug":"PhotoShop","permalink":"http://zhouzhuo810.github.io/categories/PhotoShop/"},{"name":"Python","slug":"Python","permalink":"http://zhouzhuo810.github.io/categories/Python/"},{"name":"Android签名打包","slug":"Android签名打包","permalink":"http://zhouzhuo810.github.io/categories/Android%E7%AD%BE%E5%90%8D%E6%89%93%E5%8C%85/"},{"name":"Android开源控件","slug":"Android开源控件","permalink":"http://zhouzhuo810.github.io/categories/Android%E5%BC%80%E6%BA%90%E6%8E%A7%E4%BB%B6/"},{"name":"Java工具类","slug":"Java工具类","permalink":"http://zhouzhuo810.github.io/categories/Java%E5%B7%A5%E5%85%B7%E7%B1%BB/"},{"name":"Tomcat","slug":"Tomcat","permalink":"http://zhouzhuo810.github.io/categories/Tomcat/"},{"name":"Android常用demo","slug":"Android常用demo","permalink":"http://zhouzhuo810.github.io/categories/Android%E5%B8%B8%E7%94%A8demo/"},{"name":"PHP","slug":"PHP","permalink":"http://zhouzhuo810.github.io/categories/PHP/"},{"name":"Markdown","slug":"Markdown","permalink":"http://zhouzhuo810.github.io/categories/Markdown/"},{"name":"SQL","slug":"SQL","permalink":"http://zhouzhuo810.github.io/categories/SQL/"},{"name":"Swift开源控件","slug":"Swift开源控件","permalink":"http://zhouzhuo810.github.io/categories/Swift%E5%BC%80%E6%BA%90%E6%8E%A7%E4%BB%B6/"},{"name":"ACM","slug":"ACM","permalink":"http://zhouzhuo810.github.io/categories/ACM/"},{"name":"Swift","slug":"Swift","permalink":"http://zhouzhuo810.github.io/categories/Swift/"},{"name":"hexo","slug":"hexo","permalink":"http://zhouzhuo810.github.io/categories/hexo/"}],"tags":[{"name":"InteliJ IDEA","slug":"InteliJ-IDEA","permalink":"http://zhouzhuo810.github.io/tags/InteliJ-IDEA/"},{"name":"MySQL - JavaEE","slug":"MySQL-JavaEE","permalink":"http://zhouzhuo810.github.io/tags/MySQL-JavaEE/"},{"name":"Git","slug":"Git","permalink":"http://zhouzhuo810.github.io/tags/Git/"},{"name":"Android","slug":"Android","permalink":"http://zhouzhuo810.github.io/tags/Android/"},{"name":"RxJava","slug":"RxJava","permalink":"http://zhouzhuo810.github.io/tags/RxJava/"},{"name":"Linux","slug":"Linux","permalink":"http://zhouzhuo810.github.io/tags/Linux/"},{"name":"常识","slug":"常识","permalink":"http://zhouzhuo810.github.io/tags/%E5%B8%B8%E8%AF%86/"},{"name":"JavaEE","slug":"JavaEE","permalink":"http://zhouzhuo810.github.io/tags/JavaEE/"},{"name":"网页前端","slug":"网页前端","permalink":"http://zhouzhuo810.github.io/tags/%E7%BD%91%E9%A1%B5%E5%89%8D%E7%AB%AF/"},{"name":"iOS","slug":"iOS","permalink":"http://zhouzhuo810.github.io/tags/iOS/"},{"name":"PhotoShop","slug":"PhotoShop","permalink":"http://zhouzhuo810.github.io/tags/PhotoShop/"},{"name":"Python","slug":"Python","permalink":"http://zhouzhuo810.github.io/tags/Python/"},{"name":"PHP","slug":"PHP","permalink":"http://zhouzhuo810.github.io/tags/PHP/"},{"name":"Markdown","slug":"Markdown","permalink":"http://zhouzhuo810.github.io/tags/Markdown/"},{"name":"SQL","slug":"SQL","permalink":"http://zhouzhuo810.github.io/tags/SQL/"},{"name":"Swift","slug":"Swift","permalink":"http://zhouzhuo810.github.io/tags/Swift/"},{"name":"ACM","slug":"ACM","permalink":"http://zhouzhuo810.github.io/tags/ACM/"},{"name":"hexo","slug":"hexo","permalink":"http://zhouzhuo810.github.io/tags/hexo/"}]}